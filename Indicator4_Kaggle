{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"tpu1vmV38","dataSources":[{"sourceId":9037578,"sourceType":"datasetVersion","datasetId":5447973},{"sourceId":9050032,"sourceType":"datasetVersion","datasetId":5456485},{"sourceId":9055807,"sourceType":"datasetVersion","datasetId":5460381},{"sourceId":89848,"sourceType":"modelInstanceVersion","modelInstanceId":69639,"modelId":94706}],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"pip install --upgrade pip","metadata":{"execution":{"iopub.status.busy":"2024-08-06T05:56:02.001194Z","iopub.execute_input":"2024-08-06T05:56:02.001425Z","iopub.status.idle":"2024-08-06T05:56:08.086667Z","shell.execute_reply.started":"2024-08-06T05:56:02.001400Z","shell.execute_reply":"2024-08-06T05:56:08.085404Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Requirement already satisfied: pip in /usr/local/lib/python3.10/site-packages (23.0.1)\nCollecting pip\n  Downloading pip-24.2-py3-none-any.whl (1.8 MB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.8/1.8 MB\u001b[0m \u001b[31m19.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0ma \u001b[36m0:00:01\u001b[0m\n\u001b[?25hInstalling collected packages: pip\n  Attempting uninstall: pip\n    Found existing installation: pip 23.0.1\n    Uninstalling pip-23.0.1:\n      Successfully uninstalled pip-23.0.1\nSuccessfully installed pip-24.2\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0mNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}]},{"cell_type":"code","source":"pip install imbalanced-learn","metadata":{"execution":{"iopub.status.busy":"2024-08-06T05:56:08.089177Z","iopub.execute_input":"2024-08-06T05:56:08.089578Z","iopub.status.idle":"2024-08-06T05:56:10.209597Z","shell.execute_reply.started":"2024-08-06T05:56:08.089532Z","shell.execute_reply":"2024-08-06T05:56:10.208455Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"Collecting imbalanced-learn\n  Downloading imbalanced_learn-0.12.3-py3-none-any.whl.metadata (8.3 kB)\nRequirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.10/site-packages (from imbalanced-learn) (1.26.4)\nRequirement already satisfied: scipy>=1.5.0 in /usr/local/lib/python3.10/site-packages (from imbalanced-learn) (1.14.0)\nRequirement already satisfied: scikit-learn>=1.0.2 in /usr/local/lib/python3.10/site-packages (from imbalanced-learn) (1.5.1)\nRequirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/site-packages (from imbalanced-learn) (1.4.2)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/site-packages (from imbalanced-learn) (3.5.0)\nDownloading imbalanced_learn-0.12.3-py3-none-any.whl (258 kB)\nInstalling collected packages: imbalanced-learn\nSuccessfully installed imbalanced-learn-0.12.3\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.\u001b[0m\u001b[33m\n\u001b[0mNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}]},{"cell_type":"code","source":"pip install joblib","metadata":{"execution":{"iopub.status.busy":"2024-08-06T05:56:10.211028Z","iopub.execute_input":"2024-08-06T05:56:10.211407Z","iopub.status.idle":"2024-08-06T05:56:11.989886Z","shell.execute_reply.started":"2024-08-06T05:56:10.211374Z","shell.execute_reply":"2024-08-06T05:56:11.989011Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Requirement already satisfied: joblib in /usr/local/lib/python3.10/site-packages (1.4.2)\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.\u001b[0m\u001b[33m\n\u001b[0mNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}]},{"cell_type":"code","source":"pip install shap","metadata":{"execution":{"iopub.status.busy":"2024-08-06T05:56:11.991814Z","iopub.execute_input":"2024-08-06T05:56:11.992123Z","iopub.status.idle":"2024-08-06T05:56:14.334801Z","shell.execute_reply.started":"2024-08-06T05:56:11.992091Z","shell.execute_reply":"2024-08-06T05:56:14.334037Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"Collecting shap\n  Downloading shap-0.46.0-cp310-cp310-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (24 kB)\nRequirement already satisfied: numpy in /usr/local/lib/python3.10/site-packages (from shap) (1.26.4)\nRequirement already satisfied: scipy in /usr/local/lib/python3.10/site-packages (from shap) (1.14.0)\nRequirement already satisfied: scikit-learn in /usr/local/lib/python3.10/site-packages (from shap) (1.5.1)\nRequirement already satisfied: pandas in /usr/local/lib/python3.10/site-packages (from shap) (2.2.2)\nRequirement already satisfied: tqdm>=4.27.0 in /usr/local/lib/python3.10/site-packages (from shap) (4.66.4)\nRequirement already satisfied: packaging>20.9 in /usr/local/lib/python3.10/site-packages (from shap) (24.1)\nCollecting slicer==0.0.8 (from shap)\n  Downloading slicer-0.0.8-py3-none-any.whl.metadata (4.0 kB)\nRequirement already satisfied: numba in /usr/local/lib/python3.10/site-packages (from shap) (0.60.0)\nRequirement already satisfied: cloudpickle in /usr/local/lib/python3.10/site-packages (from shap) (3.0.0)\nRequirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in /usr/local/lib/python3.10/site-packages (from numba->shap) (0.43.0)\nRequirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/site-packages (from pandas->shap) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/site-packages (from pandas->shap) (2024.1)\nRequirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/site-packages (from pandas->shap) (2024.1)\nRequirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.10/site-packages (from scikit-learn->shap) (1.4.2)\nRequirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.10/site-packages (from scikit-learn->shap) (3.5.0)\nRequirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas->shap) (1.16.0)\nDownloading shap-0.46.0-cp310-cp310-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (540 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m540.1/540.1 kB\u001b[0m \u001b[31m8.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading slicer-0.0.8-py3-none-any.whl (15 kB)\nInstalling collected packages: slicer, shap\nSuccessfully installed shap-0.46.0 slicer-0.0.8\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.\u001b[0m\u001b[33m\n\u001b[0mNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}]},{"cell_type":"code","source":"pip install tdqm","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport os\nimport logging\n\n# TensorFlow 및 TPU 설정\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import LSTM, Dense\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\n\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.impute import SimpleImputer\nimport joblib\nimport matplotlib.pyplot as plt\nimport time\nimport seaborn as sns\n\nfrom tqdm import tqdm","metadata":{"execution":{"iopub.status.busy":"2024-08-06T11:33:47.164446Z","iopub.execute_input":"2024-08-06T11:33:47.164728Z","iopub.status.idle":"2024-08-06T11:34:03.563738Z","shell.execute_reply.started":"2024-08-06T11:33:47.164699Z","shell.execute_reply":"2024-08-06T11:34:03.562969Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stderr","text":"WARNING: Logging before InitGoogle() is written to STDERR\nE0000 00:00:1722944034.595705      13 common_lib.cc:798] Could not set metric server port: INVALID_ARGUMENT: Could not find SliceBuilder port 8471 in any of the 0 ports provided in `tpu_process_addresses`=\"local\"\n=== Source Location Trace: ===\nlearning/45eac/tfrc/runtime/common_lib.cc:479\nD0806 11:33:54.603942311      13 config.cc:196]                        gRPC EXPERIMENT call_status_override_on_cancellation   OFF (default:OFF)\nD0806 11:33:54.603955840      13 config.cc:196]                        gRPC EXPERIMENT call_v3                                OFF (default:OFF)\nD0806 11:33:54.603959143      13 config.cc:196]                        gRPC EXPERIMENT canary_client_privacy                  ON  (default:ON)\nD0806 11:33:54.603961497      13 config.cc:196]                        gRPC EXPERIMENT capture_base_context                   ON  (default:ON)\nD0806 11:33:54.603963768      13 config.cc:196]                        gRPC EXPERIMENT client_idleness                        ON  (default:ON)\nD0806 11:33:54.603966025      13 config.cc:196]                        gRPC EXPERIMENT client_privacy                         ON  (default:ON)\nD0806 11:33:54.603968307      13 config.cc:196]                        gRPC EXPERIMENT dapper_request_wire_size               OFF (default:OFF)\nD0806 11:33:54.603970510      13 config.cc:196]                        gRPC EXPERIMENT empty_experiment                       OFF (default:OFF)\nD0806 11:33:54.603972684      13 config.cc:196]                        gRPC EXPERIMENT event_engine_client                    OFF (default:OFF)\nD0806 11:33:54.603974802      13 config.cc:196]                        gRPC EXPERIMENT event_engine_dns                       ON  (default:ON)\nD0806 11:33:54.603977022      13 config.cc:196]                        gRPC EXPERIMENT event_engine_listener                  ON  (default:ON)\nD0806 11:33:54.603979273      13 config.cc:196]                        gRPC EXPERIMENT free_large_allocator                   OFF (default:OFF)\nD0806 11:33:54.603981447      13 config.cc:196]                        gRPC EXPERIMENT google_no_envelope_resolver            OFF (default:OFF)\nD0806 11:33:54.603983606      13 config.cc:196]                        gRPC EXPERIMENT http2_stats_fix                        OFF (default:OFF)\nD0806 11:33:54.603985847      13 config.cc:196]                        gRPC EXPERIMENT keepalive_fix                          OFF (default:OFF)\nD0806 11:33:54.603988002      13 config.cc:196]                        gRPC EXPERIMENT keepalive_server_fix                   ON  (default:ON)\nD0806 11:33:54.603990403      13 config.cc:196]                        gRPC EXPERIMENT loas_do_not_prefer_rekey_next_protocol OFF (default:OFF)\nD0806 11:33:54.603992609      13 config.cc:196]                        gRPC EXPERIMENT loas_prod_to_cloud_prefer_pfs_ciphers  OFF (default:OFF)\nD0806 11:33:54.603994791      13 config.cc:196]                        gRPC EXPERIMENT monitoring_experiment                  ON  (default:ON)\nD0806 11:33:54.603997033      13 config.cc:196]                        gRPC EXPERIMENT multiping                              OFF (default:OFF)\nD0806 11:33:54.603999180      13 config.cc:196]                        gRPC EXPERIMENT peer_state_based_framing               OFF (default:OFF)\nD0806 11:33:54.604001339      13 config.cc:196]                        gRPC EXPERIMENT pending_queue_cap                      ON  (default:ON)\nD0806 11:33:54.604003592      13 config.cc:196]                        gRPC EXPERIMENT pick_first_happy_eyeballs              ON  (default:ON)\nD0806 11:33:54.604005801      13 config.cc:196]                        gRPC EXPERIMENT promise_based_client_call              OFF (default:OFF)\nD0806 11:33:54.604007868      13 config.cc:196]                        gRPC EXPERIMENT promise_based_inproc_transport         OFF (default:OFF)\nD0806 11:33:54.604009982      13 config.cc:196]                        gRPC EXPERIMENT promise_based_server_call              OFF (default:OFF)\nD0806 11:33:54.604012215      13 config.cc:196]                        gRPC EXPERIMENT registered_method_lookup_in_transport  ON  (default:ON)\nD0806 11:33:54.604014404      13 config.cc:196]                        gRPC EXPERIMENT rfc_max_concurrent_streams             ON  (default:ON)\nD0806 11:33:54.604016650      13 config.cc:196]                        gRPC EXPERIMENT round_robin_delegate_to_pick_first     ON  (default:ON)\nD0806 11:33:54.604019802      13 config.cc:196]                        gRPC EXPERIMENT rstpit                                 OFF (default:OFF)\nD0806 11:33:54.604022064      13 config.cc:196]                        gRPC EXPERIMENT schedule_cancellation_over_write       OFF (default:OFF)\nD0806 11:33:54.604024287      13 config.cc:196]                        gRPC EXPERIMENT server_privacy                         ON  (default:ON)\nD0806 11:33:54.604026554      13 config.cc:196]                        gRPC EXPERIMENT tcp_frame_size_tuning                  OFF (default:OFF)\nD0806 11:33:54.604028718      13 config.cc:196]                        gRPC EXPERIMENT tcp_rcv_lowat                          OFF (default:OFF)\nD0806 11:33:54.604030852      13 config.cc:196]                        gRPC EXPERIMENT trace_record_callops                   OFF (default:OFF)\nD0806 11:33:54.604033042      13 config.cc:196]                        gRPC EXPERIMENT unconstrained_max_quota_buffer_size    OFF (default:OFF)\nD0806 11:33:54.604035175      13 config.cc:196]                        gRPC EXPERIMENT v3_backend_metric_filter               OFF (default:OFF)\nD0806 11:33:54.604037321      13 config.cc:196]                        gRPC EXPERIMENT v3_channel_idle_filters                ON  (default:ON)\nD0806 11:33:54.604039569      13 config.cc:196]                        gRPC EXPERIMENT v3_compression_filter                  ON  (default:ON)\nD0806 11:33:54.604041754      13 config.cc:196]                        gRPC EXPERIMENT v3_server_auth_filter                  OFF (default:OFF)\nD0806 11:33:54.604043902      13 config.cc:196]                        gRPC EXPERIMENT work_serializer_clears_time_cache      OFF (default:OFF)\nD0806 11:33:54.604046007      13 config.cc:196]                        gRPC EXPERIMENT work_serializer_dispatch               OFF (default:OFF)\nD0806 11:33:54.604048205      13 config.cc:196]                        gRPC EXPERIMENT write_size_cap                         ON  (default:ON)\nD0806 11:33:54.604050441      13 config.cc:196]                        gRPC EXPERIMENT write_size_policy                      ON  (default:ON)\nD0806 11:33:54.604052660      13 config.cc:196]                        gRPC EXPERIMENT wrr_delegate_to_pick_first             ON  (default:ON)\nI0806 11:33:54.604216047      13 ev_epoll1_linux.cc:123]               grpc epoll fd: 59\nD0806 11:33:54.604227698      13 ev_posix.cc:113]                      Using polling engine: epoll1\nD0806 11:33:54.614468321      13 lb_policy_registry.cc:46]             registering LB policy factory for \"priority_experimental\"\nD0806 11:33:54.614478131      13 lb_policy_registry.cc:46]             registering LB policy factory for \"outlier_detection_experimental\"\nD0806 11:33:54.614485877      13 lb_policy_registry.cc:46]             registering LB policy factory for \"weighted_target_experimental\"\nD0806 11:33:54.614488903      13 lb_policy_registry.cc:46]             registering LB policy factory for \"pick_first\"\nD0806 11:33:54.614491887      13 lb_policy_registry.cc:46]             registering LB policy factory for \"round_robin\"\nD0806 11:33:54.614494666      13 lb_policy_registry.cc:46]             registering LB policy factory for \"weighted_round_robin\"\nD0806 11:33:54.614518835      13 lb_policy_registry.cc:46]             registering LB policy factory for \"grpclb\"\nD0806 11:33:54.614533019      13 dns_resolver_plugin.cc:43]            Using EventEngine dns resolver\nD0806 11:33:54.614549057      13 lb_policy_registry.cc:46]             registering LB policy factory for \"rls_experimental\"\nD0806 11:33:54.614568640      13 lb_policy_registry.cc:46]             registering LB policy factory for \"xds_cluster_manager_experimental\"\nD0806 11:33:54.614575741      13 lb_policy_registry.cc:46]             registering LB policy factory for \"xds_cluster_impl_experimental\"\nD0806 11:33:54.614578917      13 lb_policy_registry.cc:46]             registering LB policy factory for \"cds_experimental\"\nD0806 11:33:54.614585400      13 lb_policy_registry.cc:46]             registering LB policy factory for \"xds_override_host_experimental\"\nD0806 11:33:54.614588757      13 lb_policy_registry.cc:46]             registering LB policy factory for \"xds_wrr_locality_experimental\"\nD0806 11:33:54.614591783      13 lb_policy_registry.cc:46]             registering LB policy factory for \"ring_hash_experimental\"\nD0806 11:33:54.614594906      13 certificate_provider_registry.cc:33]  registering certificate provider factory for \"file_watcher\"\nD0806 11:33:54.614640514      13 channel_init.cc:157]                  Filter server-auth not registered, but is referenced in the after clause of grpc-server-authz when building channel stack SERVER_CHANNEL\nI0806 11:33:54.616392496      13 ev_epoll1_linux.cc:359]               grpc epoll fd: 61\nI0806 11:33:54.617596229      13 tcp_socket_utils.cc:689]              Disabling AF_INET6 sockets because ::1 is not available.\nI0806 11:33:54.634215836     103 socket_utils_common_posix.cc:452]     Disabling AF_INET6 sockets because ::1 is not available.\nI0806 11:33:54.634267352     103 socket_utils_common_posix.cc:379]     TCP_USER_TIMEOUT is available. TCP_USER_TIMEOUT will be used thereafter\nE0806 11:33:54.640113048      13 oauth2_credentials.cc:238]            oauth_fetch: UNKNOWN:C-ares status is not ARES_SUCCESS qtype=A name=metadata.google.internal. is_balancer=0: Domain name not found {grpc_status:2, created_time:\"2024-08-06T11:33:54.640097633+00:00\"}\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**학습 데이터 처리**","metadata":{}},{"cell_type":"code","source":"#메인 데이터\ndata = pd.read_csv(\"/kaggle/input/indicator3-full/SOL60_INDICATOR3\")\n\n# Display the first few rows of the dataset to ensure it is loaded correctly\ndata.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-06T05:56:30.759890Z","iopub.execute_input":"2024-08-06T05:56:30.760788Z","iopub.status.idle":"2024-08-06T05:57:56.740443Z","shell.execute_reply.started":"2024-08-06T05:56:30.760745Z","shell.execute_reply":"2024-08-06T05:57:56.739406Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"   Unnamed: 0.1  Unnamed: 0            open_time    open    high     low  \\\n0             0           0  2020-12-31 15:00:00  1.4458  1.4458  1.4444   \n1             1           1  2020-12-31 15:01:00  1.4477  1.4478  1.4463   \n2             2           2  2020-12-31 15:02:00  1.4479  1.4530  1.4466   \n3             3           3  2020-12-31 15:03:00  1.4503  1.4559  1.4503   \n4             4           4  2020-12-31 15:04:00  1.4558  1.4569  1.4545   \n\n    close   volume   time    atr_5  ...  price_ma_10  volume_ma_10  \\\n0  1.4456   161.34  15:00  0.00000  ...          NaN           NaN   \n1  1.4463   148.86  15:01  0.00000  ...          NaN           NaN   \n2  1.4484  3208.13  15:02  0.00000  ...          NaN           NaN   \n3  1.4558  1639.76  15:03  0.00000  ...          NaN           NaN   \n4  1.4569   900.91  15:04  0.00404  ...          NaN           NaN   \n\n   price_ma_20  volume_ma_20  price_ma_50  volume_ma_50  price_ma_100  \\\n0          NaN           NaN          NaN           NaN           NaN   \n1          NaN           NaN          NaN           NaN           NaN   \n2          NaN           NaN          NaN           NaN           NaN   \n3          NaN           NaN          NaN           NaN           NaN   \n4          NaN           NaN          NaN           NaN           NaN   \n\n   volume_ma_100  price_ma_200  volume_ma_200  \n0            NaN           NaN            NaN  \n1            NaN           NaN            NaN  \n2            NaN           NaN            NaN  \n3            NaN           NaN            NaN  \n4            NaN           NaN            NaN  \n\n[5 rows x 141 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0.1</th>\n      <th>Unnamed: 0</th>\n      <th>open_time</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>time</th>\n      <th>atr_5</th>\n      <th>...</th>\n      <th>price_ma_10</th>\n      <th>volume_ma_10</th>\n      <th>price_ma_20</th>\n      <th>volume_ma_20</th>\n      <th>price_ma_50</th>\n      <th>volume_ma_50</th>\n      <th>price_ma_100</th>\n      <th>volume_ma_100</th>\n      <th>price_ma_200</th>\n      <th>volume_ma_200</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>2020-12-31 15:00:00</td>\n      <td>1.4458</td>\n      <td>1.4458</td>\n      <td>1.4444</td>\n      <td>1.4456</td>\n      <td>161.34</td>\n      <td>15:00</td>\n      <td>0.00000</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>2020-12-31 15:01:00</td>\n      <td>1.4477</td>\n      <td>1.4478</td>\n      <td>1.4463</td>\n      <td>1.4463</td>\n      <td>148.86</td>\n      <td>15:01</td>\n      <td>0.00000</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>2</td>\n      <td>2020-12-31 15:02:00</td>\n      <td>1.4479</td>\n      <td>1.4530</td>\n      <td>1.4466</td>\n      <td>1.4484</td>\n      <td>3208.13</td>\n      <td>15:02</td>\n      <td>0.00000</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>3</td>\n      <td>2020-12-31 15:03:00</td>\n      <td>1.4503</td>\n      <td>1.4559</td>\n      <td>1.4503</td>\n      <td>1.4558</td>\n      <td>1639.76</td>\n      <td>15:03</td>\n      <td>0.00000</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>4</td>\n      <td>2020-12-31 15:04:00</td>\n      <td>1.4558</td>\n      <td>1.4569</td>\n      <td>1.4545</td>\n      <td>1.4569</td>\n      <td>900.91</td>\n      <td>15:04</td>\n      <td>0.00404</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 141 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#3등분 한 것의 두번째\n# 데이터프레임의 길이 계산\ntotal_length = len(data)\n\n# 3등분으로 나눈 길이 계산\nsplit_length = total_length // 3\n\n# 중간 부분 데이터 분리\ndata = data.iloc[split_length:split_length*2]\ndata.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-05T12:17:58.663433Z","iopub.execute_input":"2024-08-05T12:17:58.664453Z","iopub.status.idle":"2024-08-05T12:17:58.685958Z","shell.execute_reply.started":"2024-08-05T12:17:58.664403Z","shell.execute_reply":"2024-08-05T12:17:58.685023Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"        Unnamed: 0.1  Unnamed: 0            open_time   open   high    low  \\\n916804        916804      916804  2022-09-29 23:36:00  33.95  33.97  33.94   \n916805        916805      916805  2022-09-29 23:37:00  33.96  33.96  33.93   \n916806        916806      916806  2022-09-29 23:38:00  33.93  33.96  33.93   \n916807        916807      916807  2022-09-29 23:39:00  33.96  33.97  33.95   \n916808        916808      916808  2022-09-29 23:40:00  33.97  34.00  33.95   \n\n        close   volume   time     atr_5  ...  price_ma_10  volume_ma_10  \\\n916804  33.97  2578.31  23:36  0.041503  ...       33.952      1195.012   \n916805  33.94  1206.73  23:37  0.041202  ...       33.950      1177.165   \n916806  33.96   408.00  23:38  0.038962  ...       33.947      1062.665   \n916807  33.97   235.80  23:39  0.035169  ...       33.947      1037.289   \n916808  33.97   655.07  23:40  0.038135  ...       33.947      1059.877   \n\n        price_ma_20  volume_ma_20  price_ma_50  volume_ma_50  price_ma_100  \\\n916804      33.8825      1367.091      33.8206     1034.8934       33.8501   \n916805      33.8900      1400.971      33.8260     1008.6594       33.8524   \n916806      33.9020      1212.661      33.8318     1009.2016       33.8547   \n916807      33.9140      1189.046      33.8384      995.3398       33.8568   \n916808      33.9225      1128.944      33.8444      996.8920       33.8586   \n\n        volume_ma_100  price_ma_200  volume_ma_200  \n916804      1345.3022      33.90845     1178.99600  \n916805      1327.6491      33.90850     1177.95525  \n916806      1327.2931      33.90845     1177.09755  \n916807      1314.2680      33.90850     1176.55455  \n916808      1288.1592      33.90855     1177.11455  \n\n[5 rows x 141 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0.1</th>\n      <th>Unnamed: 0</th>\n      <th>open_time</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>time</th>\n      <th>atr_5</th>\n      <th>...</th>\n      <th>price_ma_10</th>\n      <th>volume_ma_10</th>\n      <th>price_ma_20</th>\n      <th>volume_ma_20</th>\n      <th>price_ma_50</th>\n      <th>volume_ma_50</th>\n      <th>price_ma_100</th>\n      <th>volume_ma_100</th>\n      <th>price_ma_200</th>\n      <th>volume_ma_200</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>916804</th>\n      <td>916804</td>\n      <td>916804</td>\n      <td>2022-09-29 23:36:00</td>\n      <td>33.95</td>\n      <td>33.97</td>\n      <td>33.94</td>\n      <td>33.97</td>\n      <td>2578.31</td>\n      <td>23:36</td>\n      <td>0.041503</td>\n      <td>...</td>\n      <td>33.952</td>\n      <td>1195.012</td>\n      <td>33.8825</td>\n      <td>1367.091</td>\n      <td>33.8206</td>\n      <td>1034.8934</td>\n      <td>33.8501</td>\n      <td>1345.3022</td>\n      <td>33.90845</td>\n      <td>1178.99600</td>\n    </tr>\n    <tr>\n      <th>916805</th>\n      <td>916805</td>\n      <td>916805</td>\n      <td>2022-09-29 23:37:00</td>\n      <td>33.96</td>\n      <td>33.96</td>\n      <td>33.93</td>\n      <td>33.94</td>\n      <td>1206.73</td>\n      <td>23:37</td>\n      <td>0.041202</td>\n      <td>...</td>\n      <td>33.950</td>\n      <td>1177.165</td>\n      <td>33.8900</td>\n      <td>1400.971</td>\n      <td>33.8260</td>\n      <td>1008.6594</td>\n      <td>33.8524</td>\n      <td>1327.6491</td>\n      <td>33.90850</td>\n      <td>1177.95525</td>\n    </tr>\n    <tr>\n      <th>916806</th>\n      <td>916806</td>\n      <td>916806</td>\n      <td>2022-09-29 23:38:00</td>\n      <td>33.93</td>\n      <td>33.96</td>\n      <td>33.93</td>\n      <td>33.96</td>\n      <td>408.00</td>\n      <td>23:38</td>\n      <td>0.038962</td>\n      <td>...</td>\n      <td>33.947</td>\n      <td>1062.665</td>\n      <td>33.9020</td>\n      <td>1212.661</td>\n      <td>33.8318</td>\n      <td>1009.2016</td>\n      <td>33.8547</td>\n      <td>1327.2931</td>\n      <td>33.90845</td>\n      <td>1177.09755</td>\n    </tr>\n    <tr>\n      <th>916807</th>\n      <td>916807</td>\n      <td>916807</td>\n      <td>2022-09-29 23:39:00</td>\n      <td>33.96</td>\n      <td>33.97</td>\n      <td>33.95</td>\n      <td>33.97</td>\n      <td>235.80</td>\n      <td>23:39</td>\n      <td>0.035169</td>\n      <td>...</td>\n      <td>33.947</td>\n      <td>1037.289</td>\n      <td>33.9140</td>\n      <td>1189.046</td>\n      <td>33.8384</td>\n      <td>995.3398</td>\n      <td>33.8568</td>\n      <td>1314.2680</td>\n      <td>33.90850</td>\n      <td>1176.55455</td>\n    </tr>\n    <tr>\n      <th>916808</th>\n      <td>916808</td>\n      <td>916808</td>\n      <td>2022-09-29 23:40:00</td>\n      <td>33.97</td>\n      <td>34.00</td>\n      <td>33.95</td>\n      <td>33.97</td>\n      <td>655.07</td>\n      <td>23:40</td>\n      <td>0.038135</td>\n      <td>...</td>\n      <td>33.947</td>\n      <td>1059.877</td>\n      <td>33.9225</td>\n      <td>1128.944</td>\n      <td>33.8444</td>\n      <td>996.8920</td>\n      <td>33.8586</td>\n      <td>1288.1592</td>\n      <td>33.90855</td>\n      <td>1177.11455</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 141 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#3등분 한 것의 마지막 등분\n# 데이터프레임의 길이 계산\ntotal_length = len(data)\n\n# 마지막 1/3 데이터 분리\ndata = data.iloc[-(total_length // 3):]\ndata.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-06T05:57:56.742624Z","iopub.execute_input":"2024-08-06T05:57:56.742937Z","iopub.status.idle":"2024-08-06T05:57:56.766421Z","shell.execute_reply.started":"2024-08-06T05:57:56.742909Z","shell.execute_reply":"2024-08-06T05:57:56.765518Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"         Unnamed: 0.1  Unnamed: 0            open_time   open   high    low  \\\n1237686       1237686     1237686  2023-05-10 20:58:00  21.25  21.25  21.23   \n1237687       1237687     1237687  2023-05-10 20:59:00  21.24  21.25  21.20   \n1237688       1237688     1237688  2023-05-10 21:00:00  21.21  21.24  21.16   \n1237689       1237689     1237689  2023-05-10 21:01:00  21.17  21.22  21.17   \n1237690       1237690     1237690  2023-05-10 21:02:00  21.21  21.21  21.16   \n\n         close    volume   time     atr_5  ...  price_ma_10  volume_ma_10  \\\n1237686  21.24   2098.96  20:58  0.025890  ...       21.246      2933.807   \n1237687  21.22   7424.21  20:59  0.030712  ...       21.245      3610.047   \n1237688  21.18   5169.38  21:00  0.040569  ...       21.239      3802.387   \n1237689  21.21  10218.04  21:01  0.042456  ...       21.234      4722.521   \n1237690  21.16   8709.12  21:02  0.043964  ...       21.226      5449.737   \n\n         price_ma_20  volume_ma_20  price_ma_50  volume_ma_50  price_ma_100  \\\n1237686      21.2390     3138.1335      21.1804     5560.0868       21.0848   \n1237687      21.2390     3507.0905      21.1840     5699.3074       21.0875   \n1237688      21.2375     3366.2490      21.1866     5752.3590       21.0899   \n1237689      21.2370     3759.4135      21.1896     5927.1122       21.0924   \n1237690      21.2335     4148.8480      21.1920     6051.7250       21.0945   \n\n         volume_ma_100  price_ma_200  volume_ma_200  \n1237686      6034.5430      20.90295     5699.17150  \n1237687      6099.6345      20.90650     5654.97705  \n1237688      6032.1937      20.90990     5647.21795  \n1237689      6080.2697      20.91335     5646.12765  \n1237690      6079.5891      20.91665     5613.22115  \n\n[5 rows x 141 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0.1</th>\n      <th>Unnamed: 0</th>\n      <th>open_time</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>time</th>\n      <th>atr_5</th>\n      <th>...</th>\n      <th>price_ma_10</th>\n      <th>volume_ma_10</th>\n      <th>price_ma_20</th>\n      <th>volume_ma_20</th>\n      <th>price_ma_50</th>\n      <th>volume_ma_50</th>\n      <th>price_ma_100</th>\n      <th>volume_ma_100</th>\n      <th>price_ma_200</th>\n      <th>volume_ma_200</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1237686</th>\n      <td>1237686</td>\n      <td>1237686</td>\n      <td>2023-05-10 20:58:00</td>\n      <td>21.25</td>\n      <td>21.25</td>\n      <td>21.23</td>\n      <td>21.24</td>\n      <td>2098.96</td>\n      <td>20:58</td>\n      <td>0.025890</td>\n      <td>...</td>\n      <td>21.246</td>\n      <td>2933.807</td>\n      <td>21.2390</td>\n      <td>3138.1335</td>\n      <td>21.1804</td>\n      <td>5560.0868</td>\n      <td>21.0848</td>\n      <td>6034.5430</td>\n      <td>20.90295</td>\n      <td>5699.17150</td>\n    </tr>\n    <tr>\n      <th>1237687</th>\n      <td>1237687</td>\n      <td>1237687</td>\n      <td>2023-05-10 20:59:00</td>\n      <td>21.24</td>\n      <td>21.25</td>\n      <td>21.20</td>\n      <td>21.22</td>\n      <td>7424.21</td>\n      <td>20:59</td>\n      <td>0.030712</td>\n      <td>...</td>\n      <td>21.245</td>\n      <td>3610.047</td>\n      <td>21.2390</td>\n      <td>3507.0905</td>\n      <td>21.1840</td>\n      <td>5699.3074</td>\n      <td>21.0875</td>\n      <td>6099.6345</td>\n      <td>20.90650</td>\n      <td>5654.97705</td>\n    </tr>\n    <tr>\n      <th>1237688</th>\n      <td>1237688</td>\n      <td>1237688</td>\n      <td>2023-05-10 21:00:00</td>\n      <td>21.21</td>\n      <td>21.24</td>\n      <td>21.16</td>\n      <td>21.18</td>\n      <td>5169.38</td>\n      <td>21:00</td>\n      <td>0.040569</td>\n      <td>...</td>\n      <td>21.239</td>\n      <td>3802.387</td>\n      <td>21.2375</td>\n      <td>3366.2490</td>\n      <td>21.1866</td>\n      <td>5752.3590</td>\n      <td>21.0899</td>\n      <td>6032.1937</td>\n      <td>20.90990</td>\n      <td>5647.21795</td>\n    </tr>\n    <tr>\n      <th>1237689</th>\n      <td>1237689</td>\n      <td>1237689</td>\n      <td>2023-05-10 21:01:00</td>\n      <td>21.17</td>\n      <td>21.22</td>\n      <td>21.17</td>\n      <td>21.21</td>\n      <td>10218.04</td>\n      <td>21:01</td>\n      <td>0.042456</td>\n      <td>...</td>\n      <td>21.234</td>\n      <td>4722.521</td>\n      <td>21.2370</td>\n      <td>3759.4135</td>\n      <td>21.1896</td>\n      <td>5927.1122</td>\n      <td>21.0924</td>\n      <td>6080.2697</td>\n      <td>20.91335</td>\n      <td>5646.12765</td>\n    </tr>\n    <tr>\n      <th>1237690</th>\n      <td>1237690</td>\n      <td>1237690</td>\n      <td>2023-05-10 21:02:00</td>\n      <td>21.21</td>\n      <td>21.21</td>\n      <td>21.16</td>\n      <td>21.16</td>\n      <td>8709.12</td>\n      <td>21:02</td>\n      <td>0.043964</td>\n      <td>...</td>\n      <td>21.226</td>\n      <td>5449.737</td>\n      <td>21.2335</td>\n      <td>4148.8480</td>\n      <td>21.1920</td>\n      <td>6051.7250</td>\n      <td>21.0945</td>\n      <td>6079.5891</td>\n      <td>20.91665</td>\n      <td>5613.22115</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 141 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"rows_2_3 = int(len(data) * 2 / 3)\n\n# Extract the first 2/3 of the dataset\ndata = data.iloc[:rows_2_3]\n\n# Display the first few rows of the extracted dataset to ensure it is correct\ndata.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#메인 데이터\ndata = pd.read_csv(\"/kaggle/input/indicator3-test/SOL60_INDICATOR3_SMALL\")\n\n# Display the first few rows of the dataset to ensure it is loaded correctly\ndata.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-05T09:36:30.693266Z","iopub.execute_input":"2024-08-05T09:36:30.694110Z","iopub.status.idle":"2024-08-05T09:36:30.790148Z","shell.execute_reply.started":"2024-08-05T09:36:30.694072Z","shell.execute_reply":"2024-08-05T09:36:30.789162Z"},"trusted":true},"execution_count":3,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","Cell \u001b[0;32mIn[3], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m#메인 데이터\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m data \u001b[38;5;241m=\u001b[39m \u001b[43mpd\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mread_csv\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43m/kaggle/input/indicator3-test/SOL60_INDICATOR3_SMALL\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Display the first few rows of the dataset to ensure it is loaded correctly\u001b[39;00m\n\u001b[1;32m      5\u001b[0m data\u001b[38;5;241m.\u001b[39mhead()\n","File \u001b[0;32m/usr/local/lib/python3.10/site-packages/pandas/io/parsers/readers.py:1026\u001b[0m, in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1013\u001b[0m kwds_defaults \u001b[38;5;241m=\u001b[39m _refine_defaults_read(\n\u001b[1;32m   1014\u001b[0m     dialect,\n\u001b[1;32m   1015\u001b[0m     delimiter,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1022\u001b[0m     dtype_backend\u001b[38;5;241m=\u001b[39mdtype_backend,\n\u001b[1;32m   1023\u001b[0m )\n\u001b[1;32m   1024\u001b[0m kwds\u001b[38;5;241m.\u001b[39mupdate(kwds_defaults)\n\u001b[0;32m-> 1026\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43m_read\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfilepath_or_buffer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkwds\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/usr/local/lib/python3.10/site-packages/pandas/io/parsers/readers.py:620\u001b[0m, in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    617\u001b[0m _validate_names(kwds\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnames\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m))\n\u001b[1;32m    619\u001b[0m \u001b[38;5;66;03m# Create the parser.\u001b[39;00m\n\u001b[0;32m--> 620\u001b[0m parser \u001b[38;5;241m=\u001b[39m \u001b[43mTextFileReader\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfilepath_or_buffer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwds\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    622\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m chunksize \u001b[38;5;129;01mor\u001b[39;00m iterator:\n\u001b[1;32m    623\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m parser\n","File \u001b[0;32m/usr/local/lib/python3.10/site-packages/pandas/io/parsers/readers.py:1620\u001b[0m, in \u001b[0;36mTextFileReader.__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1617\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39moptions[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhas_index_names\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m kwds[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhas_index_names\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n\u001b[1;32m   1619\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandles: IOHandles \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m-> 1620\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_engine \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_make_engine\u001b[49m\u001b[43m(\u001b[49m\u001b[43mf\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mengine\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/usr/local/lib/python3.10/site-packages/pandas/io/parsers/readers.py:1880\u001b[0m, in \u001b[0;36mTextFileReader._make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1878\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mb\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m mode:\n\u001b[1;32m   1879\u001b[0m         mode \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mb\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m-> 1880\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandles \u001b[38;5;241m=\u001b[39m \u001b[43mget_handle\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1881\u001b[0m \u001b[43m    \u001b[49m\u001b[43mf\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1882\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1883\u001b[0m \u001b[43m    \u001b[49m\u001b[43mencoding\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mencoding\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1884\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcompression\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mcompression\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1885\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmemory_map\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mmemory_map\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1886\u001b[0m \u001b[43m    \u001b[49m\u001b[43mis_text\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mis_text\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1887\u001b[0m \u001b[43m    \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mencoding_errors\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mstrict\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1888\u001b[0m \u001b[43m    \u001b[49m\u001b[43mstorage_options\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moptions\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mstorage_options\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1889\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1890\u001b[0m \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandles \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m   1891\u001b[0m f \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mhandles\u001b[38;5;241m.\u001b[39mhandle\n","File \u001b[0;32m/usr/local/lib/python3.10/site-packages/pandas/io/common.py:873\u001b[0m, in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    868\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(handle, \u001b[38;5;28mstr\u001b[39m):\n\u001b[1;32m    869\u001b[0m     \u001b[38;5;66;03m# Check whether the filename is to be opened in binary mode.\u001b[39;00m\n\u001b[1;32m    870\u001b[0m     \u001b[38;5;66;03m# Binary mode does not support 'encoding' and 'newline'.\u001b[39;00m\n\u001b[1;32m    871\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m ioargs\u001b[38;5;241m.\u001b[39mencoding \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mb\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m ioargs\u001b[38;5;241m.\u001b[39mmode:\n\u001b[1;32m    872\u001b[0m         \u001b[38;5;66;03m# Encoding\u001b[39;00m\n\u001b[0;32m--> 873\u001b[0m         handle \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mopen\u001b[39;49m\u001b[43m(\u001b[49m\n\u001b[1;32m    874\u001b[0m \u001b[43m            \u001b[49m\u001b[43mhandle\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    875\u001b[0m \u001b[43m            \u001b[49m\u001b[43mioargs\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    876\u001b[0m \u001b[43m            \u001b[49m\u001b[43mencoding\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mioargs\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mencoding\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    877\u001b[0m \u001b[43m            \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    878\u001b[0m \u001b[43m            \u001b[49m\u001b[43mnewline\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m    879\u001b[0m \u001b[43m        \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    880\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    881\u001b[0m         \u001b[38;5;66;03m# Binary mode\u001b[39;00m\n\u001b[1;32m    882\u001b[0m         handle \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mopen\u001b[39m(handle, ioargs\u001b[38;5;241m.\u001b[39mmode)\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/kaggle/input/indicator3-test/SOL60_INDICATOR3_SMALL'"],"ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: '/kaggle/input/indicator3-test/SOL60_INDICATOR3_SMALL'","output_type":"error"}]},{"cell_type":"code","source":"data.columns","metadata":{"execution":{"iopub.status.busy":"2024-08-06T05:57:56.767662Z","iopub.execute_input":"2024-08-06T05:57:56.767964Z","iopub.status.idle":"2024-08-06T05:57:56.780874Z","shell.execute_reply.started":"2024-08-06T05:57:56.767934Z","shell.execute_reply":"2024-08-06T05:57:56.780100Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"Index(['Unnamed: 0.1', 'Unnamed: 0', 'open_time', 'open', 'high', 'low',\n       'close', 'volume', 'time', 'atr_5',\n       ...\n       'price_ma_10', 'volume_ma_10', 'price_ma_20', 'volume_ma_20',\n       'price_ma_50', 'volume_ma_50', 'price_ma_100', 'volume_ma_100',\n       'price_ma_200', 'volume_ma_200'],\n      dtype='object', length=141)"},"metadata":{}}]},{"cell_type":"code","source":"# 사용하지 않을 열 제외\ndata = data.drop(columns=['Unnamed: 0.1'])","metadata":{"execution":{"iopub.status.busy":"2024-08-06T05:58:10.684558Z","iopub.execute_input":"2024-08-06T05:58:10.685800Z","iopub.status.idle":"2024-08-06T05:58:10.902976Z","shell.execute_reply.started":"2024-08-06T05:58:10.685752Z","shell.execute_reply":"2024-08-06T05:58:10.901768Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"# 시간 관련 열 변환 함수\ndef convert_time_features(data):\n    # open_time 열이 datetime 형식이 아닌 경우 변환\n    if not np.issubdtype(data['open_time'].dtype, np.datetime64):\n        data['open_time'] = pd.to_datetime(data['open_time'])\n\n    # time 열을 분 단위로 변환\n    data['time'] = data['open_time'].dt.hour * 60 + data['open_time'].dt.minute\n\n    # 사용하지 않을 열 제외\n    data = data.drop(columns=['open_time', 'Unnamed: 0'])\n    \n    return data\n\n# 시간 관련 열 변환\ndata = convert_time_features(data)","metadata":{"execution":{"iopub.status.busy":"2024-08-06T05:58:17.387381Z","iopub.execute_input":"2024-08-06T05:58:17.387860Z","iopub.status.idle":"2024-08-06T05:58:17.800586Z","shell.execute_reply.started":"2024-08-06T05:58:17.387815Z","shell.execute_reply":"2024-08-06T05:58:17.799439Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"# 데이터 전처리 함수\ndef preprocess_data(data):\n    # 목표 변수 생성\n    data['target'] = (data['max_return_60min'] >= 1.1).astype(int)\n\n    # 특성과 목표 변수 분리\n    X = data.drop(columns=['max_return_60min', 'min_return_60min', 'target'])\n    y = data['target']\n\n    # 무한대 값을 NaN으로 대체\n    X.replace([np.inf, -np.inf], np.nan, inplace=True)\n\n    # NaN 값을 평균으로 대체\n    imputer = SimpleImputer(strategy='mean')\n    X_imputed = imputer.fit_transform(X)\n\n    # 데이터 정규화\n    scaler = MinMaxScaler()\n    X_scaled = scaler.fit_transform(X_imputed)\n\n    return X_scaled, y\n\n# 시계열 데이터 형태로 변환 함수\ndef create_sequences(data, target, sequence_length):\n    sequences = []\n    targets = []\n    for i in range(len(data) - sequence_length + 1):\n        seq = data[i:i + sequence_length]\n        label = target[i + sequence_length - 1]\n        sequences.append(seq)\n        targets.append(label)\n    return np.array(sequences), np.array(targets)\n\n# 데이터 전처리\nX_scaled, y = preprocess_data(data)\n\n# 시퀀스 길이 설정\nsequence_length = 60\n\n# 데이터 길이 체크\nif len(X_scaled) < sequence_length:\n    raise ValueError(f\"데이터 길이({len(X_scaled)})가 시퀀스 길이({sequence_length})보다 짧습니다.\")\n\n# 시퀀스 데이터 생성\ny_array = y.values  # pandas Series를 numpy array로 변환\nX_seq, y_seq = create_sequences(X_scaled, y_array, sequence_length)\n\n# 생성된 시퀀스 데이터의 형태 확인\nprint(f\"X_seq shape: {X_seq.shape}\")\nprint(f\"y_seq shape: {y_seq.shape}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-06T05:58:21.908303Z","iopub.execute_input":"2024-08-06T05:58:21.909011Z","iopub.status.idle":"2024-08-06T05:58:46.991805Z","shell.execute_reply.started":"2024-08-06T05:58:21.908973Z","shell.execute_reply":"2024-08-06T05:58:46.990842Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"X_seq shape: (618784, 60, 136)\ny_seq shape: (618784,)\n","output_type":"stream"}]},{"cell_type":"code","source":"# 데이터 전처리 함수 V2\ndef preprocess_data(data):\n    # 목표 변수 생성\n    data['target'] = (data['max_return_60min'] >= 1.1).astype(int)\n    \n    # 피처 열만 선택\n    feature_columns = ['ichimoku_conversion_9', 'ichimoku_conversion_200', 'supertrend_upper_14_2_10', \n                       'supertrend_upper_10_3_20', 'bollinger_hband_200', 'volume_ma_100', 'ROC_30', \n                       'open', 'high', 'supertrend_lower_10_3_20', 'obv', 'atr_50', 'volume_ma_200', \n                       'Accumulation_Distribution_Line', 'bollinger_lband_20', 'lowerband', 'volume_ma_20', \n                       'supertrend_lower_7_3_14', 'atr_14', 'disparity_index_100', 'price_ma_200', \n                       'bollinger_lband_50', 'ichimoku_conversion_52', 'upperband', 'atr_20', 'price_ma_20', \n                       'disparity_index_20', 'time', 'vwap', 'bollinger_lband_200', 'atr_10', 'MFI_40', \n                       'volume_ma_10', 'supertrend_in_uptrend_7_3_14', 'Momentum_30', 'Momentum_20', \n                       'supertrend_upper_20_4_50', 'bollinger_hband_100', 'MFI_50', 'CMO_50', 'close', \n                       'Momentum_50', 'stoch_%k_21_5', 'supertrend_upper_7_3_14', 'bollinger_hband_50', \n                       'Parabolic_SAR_0.02', 'bollinger_lband_100', 'stoch_%k_9_3', 'Williams_%R_30', 'CMO_40']\n    # 특성과 목표 변수 분리\n    X = data[feature_columns]\n    y = data['target']\n\n    # 무한대 값을 NaN으로 대체\n    X.replace([np.inf, -np.inf], np.nan, inplace=True)\n\n    # NaN 값을 평균으로 대체\n    imputer = SimpleImputer(strategy='mean')\n    X_imputed = imputer.fit_transform(X)\n\n    # 데이터 정규화\n    scaler = MinMaxScaler()\n    X_scaled = scaler.fit_transform(X_imputed)\n\n    return X_scaled, y\n\n# 시계열 데이터 형태로 변환 함수\ndef create_sequences(data, target, sequence_length):\n    sequences = []\n    targets = []\n    for i in range(len(data) - sequence_length + 1):\n        seq = data[i:i + sequence_length]\n        label = target[i + sequence_length - 1]\n        sequences.append(seq)\n        targets.append(label)\n    return np.array(sequences), np.array(targets)\n\n# 데이터 전처리\nX_scaled, y = preprocess_data(data)\n\n# 시퀀스 길이 설정\nsequence_length = 60\n\n# 데이터 길이 체크\nif len(X_scaled) < sequence_length:\n    raise ValueError(f\"데이터 길이({len(X_scaled)})가 시퀀스 길이({sequence_length})보다 짧습니다.\")\n\n# 시퀀스 데이터 생성\ny_array = y.values  # pandas Series를 numpy array로 변환\nX_seq, y_seq = create_sequences(X_scaled, y_array, sequence_length)\n\n# 생성된 시퀀스 데이터의 형태 확인\nprint(f\"X_seq shape: {X_seq.shape}\")\nprint(f\"y_seq shape: {y_seq.shape}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-06T02:54:29.647432Z","iopub.execute_input":"2024-08-06T02:54:29.648262Z","iopub.status.idle":"2024-08-06T02:54:58.959339Z","shell.execute_reply.started":"2024-08-06T02:54:29.648227Z","shell.execute_reply":"2024-08-06T02:54:58.958583Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_13/2832213542.py:23: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  X.replace([np.inf, -np.inf], np.nan, inplace=True)\n","output_type":"stream"},{"name":"stdout","text":"X_seq shape: (1856470, 60, 50)\ny_seq shape: (1856470,)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**테스트 데이터 처리**","metadata":{}},{"cell_type":"code","source":"data_test_tmp = pd.read_csv(\"/kaggle/input/indicator3-test-data/SOL_Data_Test_Indicator3.csv\")\n\n# Display the first few rows of the dataset to ensure it is loaded correctly\ndata_test_tmp.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-06T06:08:25.507901Z","iopub.execute_input":"2024-08-06T06:08:25.508645Z","iopub.status.idle":"2024-08-06T06:08:38.407191Z","shell.execute_reply.started":"2024-08-06T06:08:25.508607Z","shell.execute_reply":"2024-08-06T06:08:38.406421Z"},"trusted":true},"execution_count":45,"outputs":[{"execution_count":45,"output_type":"execute_result","data":{"text/plain":"   Unnamed: 0            open_time   open   high    low  close   volume  \\\n0           0  2023-07-26 15:00:00  24.49  24.53  24.49  24.53  4241.87   \n1           1  2023-07-26 15:01:00  24.53  24.57  24.53  24.55  5665.44   \n2           2  2023-07-26 15:02:00  24.55  24.59  24.54  24.57  3515.11   \n3           3  2023-07-26 15:03:00  24.58  24.58  24.53  24.53  2160.81   \n4           4  2023-07-26 15:04:00  24.53  24.55  24.52  24.53  2068.28   \n\n    time  atr_5  atr_10  ...  price_ma_20  volume_ma_20  price_ma_50  \\\n0  15:00  0.000     0.0  ...          NaN           NaN          NaN   \n1  15:01  0.000     0.0  ...          NaN           NaN          NaN   \n2  15:02  0.000     0.0  ...          NaN           NaN          NaN   \n3  15:03  0.000     0.0  ...          NaN           NaN          NaN   \n4  15:04  0.042     0.0  ...          NaN           NaN          NaN   \n\n   volume_ma_50  price_ma_100  volume_ma_100  price_ma_200  volume_ma_200  \\\n0           NaN           NaN            NaN           NaN            NaN   \n1           NaN           NaN            NaN           NaN            NaN   \n2           NaN           NaN            NaN           NaN            NaN   \n3           NaN           NaN            NaN           NaN            NaN   \n4           NaN           NaN            NaN           NaN            NaN   \n\n   max_return_60min  min_return_60min  \n0          1.916021         -0.122299  \n1          1.832994         -0.203666  \n2          1.750102         -0.284900  \n3          1.916021         -0.122299  \n4          1.916021         -0.122299  \n\n[5 rows x 140 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>open_time</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>time</th>\n      <th>atr_5</th>\n      <th>atr_10</th>\n      <th>...</th>\n      <th>price_ma_20</th>\n      <th>volume_ma_20</th>\n      <th>price_ma_50</th>\n      <th>volume_ma_50</th>\n      <th>price_ma_100</th>\n      <th>volume_ma_100</th>\n      <th>price_ma_200</th>\n      <th>volume_ma_200</th>\n      <th>max_return_60min</th>\n      <th>min_return_60min</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>2023-07-26 15:00:00</td>\n      <td>24.49</td>\n      <td>24.53</td>\n      <td>24.49</td>\n      <td>24.53</td>\n      <td>4241.87</td>\n      <td>15:00</td>\n      <td>0.000</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.916021</td>\n      <td>-0.122299</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2023-07-26 15:01:00</td>\n      <td>24.53</td>\n      <td>24.57</td>\n      <td>24.53</td>\n      <td>24.55</td>\n      <td>5665.44</td>\n      <td>15:01</td>\n      <td>0.000</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.832994</td>\n      <td>-0.203666</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>2023-07-26 15:02:00</td>\n      <td>24.55</td>\n      <td>24.59</td>\n      <td>24.54</td>\n      <td>24.57</td>\n      <td>3515.11</td>\n      <td>15:02</td>\n      <td>0.000</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.750102</td>\n      <td>-0.284900</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>2023-07-26 15:03:00</td>\n      <td>24.58</td>\n      <td>24.58</td>\n      <td>24.53</td>\n      <td>24.53</td>\n      <td>2160.81</td>\n      <td>15:03</td>\n      <td>0.000</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.916021</td>\n      <td>-0.122299</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>2023-07-26 15:04:00</td>\n      <td>24.53</td>\n      <td>24.55</td>\n      <td>24.52</td>\n      <td>24.53</td>\n      <td>2068.28</td>\n      <td>15:04</td>\n      <td>0.042</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.916021</td>\n      <td>-0.122299</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 140 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#원형\ndata_test = data_test_tmp","metadata":{"execution":{"iopub.status.busy":"2024-08-06T06:22:40.625263Z","iopub.execute_input":"2024-08-06T06:22:40.626162Z","iopub.status.idle":"2024-08-06T06:22:40.629366Z","shell.execute_reply.started":"2024-08-06T06:22:40.626124Z","shell.execute_reply":"2024-08-06T06:22:40.628795Z"},"trusted":true},"execution_count":114,"outputs":[]},{"cell_type":"code","source":"#12등분 => 1개월\ndef extract_last_twelfth(df):\n    num_rows = len(df)\n    twelfth_size = num_rows // 12\n    start_index = 11 * twelfth_size\n    end_index = num_rows\n    last_twelfth = df.iloc[start_index:end_index]\n    return last_twelfth\n\n# 데이터프레임 12등분하여 마지막 등분 추출\ndata_test = extract_last_twelfth(data_test_tmp)\ndata_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-06T06:01:13.714531Z","iopub.execute_input":"2024-08-06T06:01:13.714876Z","iopub.status.idle":"2024-08-06T06:01:13.735568Z","shell.execute_reply.started":"2024-08-06T06:01:13.714849Z","shell.execute_reply":"2024-08-06T06:01:13.734891Z"},"trusted":true},"execution_count":18,"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"        Unnamed: 0            open_time    open    high     low   close  \\\n483120      483120  2024-06-26 03:00:00  138.88  139.12  138.88  139.12   \n483121      483121  2024-06-26 03:01:00  139.13  139.28  139.12  139.21   \n483122      483122  2024-06-26 03:02:00  139.22  139.22  139.10  139.19   \n483123      483123  2024-06-26 03:03:00  139.18  139.26  138.90  138.91   \n483124      483124  2024-06-26 03:04:00  138.91  138.96  138.80  138.83   \n\n          volume   time     atr_5    atr_10  ...  price_ma_20  volume_ma_20  \\\n483120  2249.703  03:00  0.152236  0.156799  ...     138.9610    1363.81765   \n483121   910.810  03:01  0.153789  0.157119  ...     138.9765    1332.95975   \n483122   534.078  03:02  0.147031  0.153407  ...     138.9930    1318.04715   \n483123  2139.050  03:03  0.189625  0.174067  ...     139.0005    1395.89380   \n483124  2011.855  03:04  0.183700  0.172660  ...     139.0090    1446.83300   \n\n        price_ma_50  volume_ma_50  price_ma_100  volume_ma_100  price_ma_200  \\\n483120     139.2254    1925.32326      138.8242     2326.37461     137.74265   \n483121     139.2182    1909.30954      138.8375     2295.96989     137.75670   \n483122     139.2062    1905.31326      138.8513     2283.99669     137.77060   \n483123     139.1854    1905.11432      138.8635     2292.31803     137.78335   \n483124     139.1630    1889.52832      138.8753     2303.04817     137.79565   \n\n        volume_ma_200  max_return_60min  min_return_60min  \n483120    1780.108200          0.115009         -1.020702  \n483121    1780.754935          0.035917         -1.084692  \n483122    1781.998195          0.050291         -1.070479  \n483123    1788.059035          0.208768         -0.871068  \n483124    1797.307520          0.266513         -0.813945  \n\n[5 rows x 140 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>open_time</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>time</th>\n      <th>atr_5</th>\n      <th>atr_10</th>\n      <th>...</th>\n      <th>price_ma_20</th>\n      <th>volume_ma_20</th>\n      <th>price_ma_50</th>\n      <th>volume_ma_50</th>\n      <th>price_ma_100</th>\n      <th>volume_ma_100</th>\n      <th>price_ma_200</th>\n      <th>volume_ma_200</th>\n      <th>max_return_60min</th>\n      <th>min_return_60min</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>483120</th>\n      <td>483120</td>\n      <td>2024-06-26 03:00:00</td>\n      <td>138.88</td>\n      <td>139.12</td>\n      <td>138.88</td>\n      <td>139.12</td>\n      <td>2249.703</td>\n      <td>03:00</td>\n      <td>0.152236</td>\n      <td>0.156799</td>\n      <td>...</td>\n      <td>138.9610</td>\n      <td>1363.81765</td>\n      <td>139.2254</td>\n      <td>1925.32326</td>\n      <td>138.8242</td>\n      <td>2326.37461</td>\n      <td>137.74265</td>\n      <td>1780.108200</td>\n      <td>0.115009</td>\n      <td>-1.020702</td>\n    </tr>\n    <tr>\n      <th>483121</th>\n      <td>483121</td>\n      <td>2024-06-26 03:01:00</td>\n      <td>139.13</td>\n      <td>139.28</td>\n      <td>139.12</td>\n      <td>139.21</td>\n      <td>910.810</td>\n      <td>03:01</td>\n      <td>0.153789</td>\n      <td>0.157119</td>\n      <td>...</td>\n      <td>138.9765</td>\n      <td>1332.95975</td>\n      <td>139.2182</td>\n      <td>1909.30954</td>\n      <td>138.8375</td>\n      <td>2295.96989</td>\n      <td>137.75670</td>\n      <td>1780.754935</td>\n      <td>0.035917</td>\n      <td>-1.084692</td>\n    </tr>\n    <tr>\n      <th>483122</th>\n      <td>483122</td>\n      <td>2024-06-26 03:02:00</td>\n      <td>139.22</td>\n      <td>139.22</td>\n      <td>139.10</td>\n      <td>139.19</td>\n      <td>534.078</td>\n      <td>03:02</td>\n      <td>0.147031</td>\n      <td>0.153407</td>\n      <td>...</td>\n      <td>138.9930</td>\n      <td>1318.04715</td>\n      <td>139.2062</td>\n      <td>1905.31326</td>\n      <td>138.8513</td>\n      <td>2283.99669</td>\n      <td>137.77060</td>\n      <td>1781.998195</td>\n      <td>0.050291</td>\n      <td>-1.070479</td>\n    </tr>\n    <tr>\n      <th>483123</th>\n      <td>483123</td>\n      <td>2024-06-26 03:03:00</td>\n      <td>139.18</td>\n      <td>139.26</td>\n      <td>138.90</td>\n      <td>138.91</td>\n      <td>2139.050</td>\n      <td>03:03</td>\n      <td>0.189625</td>\n      <td>0.174067</td>\n      <td>...</td>\n      <td>139.0005</td>\n      <td>1395.89380</td>\n      <td>139.1854</td>\n      <td>1905.11432</td>\n      <td>138.8635</td>\n      <td>2292.31803</td>\n      <td>137.78335</td>\n      <td>1788.059035</td>\n      <td>0.208768</td>\n      <td>-0.871068</td>\n    </tr>\n    <tr>\n      <th>483124</th>\n      <td>483124</td>\n      <td>2024-06-26 03:04:00</td>\n      <td>138.91</td>\n      <td>138.96</td>\n      <td>138.80</td>\n      <td>138.83</td>\n      <td>2011.855</td>\n      <td>03:04</td>\n      <td>0.183700</td>\n      <td>0.172660</td>\n      <td>...</td>\n      <td>139.0090</td>\n      <td>1446.83300</td>\n      <td>139.1630</td>\n      <td>1889.52832</td>\n      <td>138.8753</td>\n      <td>2303.04817</td>\n      <td>137.79565</td>\n      <td>1797.307520</td>\n      <td>0.266513</td>\n      <td>-0.813945</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 140 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#6등분 => 2개월\ndef extract_last_sixth(df):\n    num_rows = len(df)\n    sixth_size = num_rows // 6\n    start_index = 5 * sixth_size\n    end_index = num_rows\n    last_sixth = df.iloc[start_index:end_index]\n    return last_sixth\n\n# 데이터프레임 6등분하여 마지막 등분 추출\ndata_test = extract_last_sixth(data_test_tmp)\ndata_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-06T06:08:38.408676Z","iopub.execute_input":"2024-08-06T06:08:38.408988Z","iopub.status.idle":"2024-08-06T06:08:38.429097Z","shell.execute_reply.started":"2024-08-06T06:08:38.408960Z","shell.execute_reply":"2024-08-06T06:08:38.428440Z"},"trusted":true},"execution_count":46,"outputs":[{"execution_count":46,"output_type":"execute_result","data":{"text/plain":"        Unnamed: 0            open_time    open    high     low   close  \\\n439200      439200  2024-05-26 15:00:00  165.25  165.67  165.24  165.58   \n439201      439201  2024-05-26 15:01:00  165.58  165.85  165.58  165.76   \n439202      439202  2024-05-26 15:02:00  165.75  165.81  165.61  165.74   \n439203      439203  2024-05-26 15:03:00  165.74  165.83  165.66  165.67   \n439204      439204  2024-05-26 15:04:00  165.66  165.67  165.40  165.61   \n\n           volume   time     atr_5    atr_10  ...  price_ma_20  volume_ma_20  \\\n439200  19989.379  15:00  0.232930  0.218977  ...     165.0920    4669.80140   \n439201   4521.116  15:01  0.240344  0.224079  ...     165.1490    4831.78020   \n439202   3887.307  15:02  0.232275  0.221671  ...     165.2085    4956.64680   \n439203   1417.673  15:03  0.219820  0.216504  ...     165.2595    4993.13380   \n439204   5283.926  15:04  0.229856  0.221854  ...     165.2980    5088.64485   \n\n        price_ma_50  volume_ma_50  price_ma_100  volume_ma_100  price_ma_200  \\\n439200     164.5898    2881.01174      164.3668     2558.35540     163.98620   \n439201     164.6148    2954.04122      164.3855     2583.09242     163.99535   \n439202     164.6358    3004.06188      164.4032     2579.85806     164.00445   \n439203     164.6534    3004.58490      164.4217     2574.17413     164.01325   \n439204     164.6694    3076.86214      164.4394     2619.27751     164.02230   \n\n        volume_ma_200  max_return_60min  min_return_60min  \n439200    2107.835950          0.163063         -1.938640  \n439201    2128.296605          0.042230         -2.045125  \n439202    2137.691945          0.054302         -2.033305  \n439203    2140.774015          0.000000         -1.991912  \n439204    2156.560390          0.024153         -1.956404  \n\n[5 rows x 140 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>open_time</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>time</th>\n      <th>atr_5</th>\n      <th>atr_10</th>\n      <th>...</th>\n      <th>price_ma_20</th>\n      <th>volume_ma_20</th>\n      <th>price_ma_50</th>\n      <th>volume_ma_50</th>\n      <th>price_ma_100</th>\n      <th>volume_ma_100</th>\n      <th>price_ma_200</th>\n      <th>volume_ma_200</th>\n      <th>max_return_60min</th>\n      <th>min_return_60min</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>439200</th>\n      <td>439200</td>\n      <td>2024-05-26 15:00:00</td>\n      <td>165.25</td>\n      <td>165.67</td>\n      <td>165.24</td>\n      <td>165.58</td>\n      <td>19989.379</td>\n      <td>15:00</td>\n      <td>0.232930</td>\n      <td>0.218977</td>\n      <td>...</td>\n      <td>165.0920</td>\n      <td>4669.80140</td>\n      <td>164.5898</td>\n      <td>2881.01174</td>\n      <td>164.3668</td>\n      <td>2558.35540</td>\n      <td>163.98620</td>\n      <td>2107.835950</td>\n      <td>0.163063</td>\n      <td>-1.938640</td>\n    </tr>\n    <tr>\n      <th>439201</th>\n      <td>439201</td>\n      <td>2024-05-26 15:01:00</td>\n      <td>165.58</td>\n      <td>165.85</td>\n      <td>165.58</td>\n      <td>165.76</td>\n      <td>4521.116</td>\n      <td>15:01</td>\n      <td>0.240344</td>\n      <td>0.224079</td>\n      <td>...</td>\n      <td>165.1490</td>\n      <td>4831.78020</td>\n      <td>164.6148</td>\n      <td>2954.04122</td>\n      <td>164.3855</td>\n      <td>2583.09242</td>\n      <td>163.99535</td>\n      <td>2128.296605</td>\n      <td>0.042230</td>\n      <td>-2.045125</td>\n    </tr>\n    <tr>\n      <th>439202</th>\n      <td>439202</td>\n      <td>2024-05-26 15:02:00</td>\n      <td>165.75</td>\n      <td>165.81</td>\n      <td>165.61</td>\n      <td>165.74</td>\n      <td>3887.307</td>\n      <td>15:02</td>\n      <td>0.232275</td>\n      <td>0.221671</td>\n      <td>...</td>\n      <td>165.2085</td>\n      <td>4956.64680</td>\n      <td>164.6358</td>\n      <td>3004.06188</td>\n      <td>164.4032</td>\n      <td>2579.85806</td>\n      <td>164.00445</td>\n      <td>2137.691945</td>\n      <td>0.054302</td>\n      <td>-2.033305</td>\n    </tr>\n    <tr>\n      <th>439203</th>\n      <td>439203</td>\n      <td>2024-05-26 15:03:00</td>\n      <td>165.74</td>\n      <td>165.83</td>\n      <td>165.66</td>\n      <td>165.67</td>\n      <td>1417.673</td>\n      <td>15:03</td>\n      <td>0.219820</td>\n      <td>0.216504</td>\n      <td>...</td>\n      <td>165.2595</td>\n      <td>4993.13380</td>\n      <td>164.6534</td>\n      <td>3004.58490</td>\n      <td>164.4217</td>\n      <td>2574.17413</td>\n      <td>164.01325</td>\n      <td>2140.774015</td>\n      <td>0.000000</td>\n      <td>-1.991912</td>\n    </tr>\n    <tr>\n      <th>439204</th>\n      <td>439204</td>\n      <td>2024-05-26 15:04:00</td>\n      <td>165.66</td>\n      <td>165.67</td>\n      <td>165.40</td>\n      <td>165.61</td>\n      <td>5283.926</td>\n      <td>15:04</td>\n      <td>0.229856</td>\n      <td>0.221854</td>\n      <td>...</td>\n      <td>165.2980</td>\n      <td>5088.64485</td>\n      <td>164.6694</td>\n      <td>3076.86214</td>\n      <td>164.4394</td>\n      <td>2619.27751</td>\n      <td>164.02230</td>\n      <td>2156.560390</td>\n      <td>0.024153</td>\n      <td>-1.956404</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 140 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#4등분 => 3개월\ndef extract_last_fourth(df):\n    num_rows = len(df)\n    fourth_size = num_rows // 4\n    start_index = 3 * fourth_size\n    end_index = num_rows\n    last_fourth = df.iloc[start_index:end_index]\n    return last_fourth\n\n# 데이터프레임 4등분하여 마지막 등분 추출\ndata_test = extract_last_fourth(data_test_tmp)\ndata_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-06T06:11:12.476665Z","iopub.execute_input":"2024-08-06T06:11:12.477526Z","iopub.status.idle":"2024-08-06T06:11:12.501436Z","shell.execute_reply.started":"2024-08-06T06:11:12.477486Z","shell.execute_reply":"2024-08-06T06:11:12.500671Z"},"trusted":true},"execution_count":61,"outputs":[{"execution_count":61,"output_type":"execute_result","data":{"text/plain":"        Unnamed: 0            open_time    open    high     low   close  \\\n395280      395280  2024-04-26 03:00:00  144.23  144.26  143.92  144.02   \n395281      395281  2024-04-26 03:01:00  144.03  144.17  143.91  143.92   \n395282      395282  2024-04-26 03:02:00  143.93  143.93  143.67  143.70   \n395283      395283  2024-04-26 03:03:00  143.69  143.74  143.58  143.68   \n395284      395284  2024-04-26 03:04:00  143.69  143.80  143.43  143.46   \n\n         volume   time     atr_5    atr_10  ...  price_ma_20  volume_ma_20  \\\n395280  4881.16  03:00  0.216954  0.209282  ...     144.1850     2170.1755   \n395281  2470.20  03:01  0.225564  0.214354  ...     144.1770     2274.3275   \n395282  3566.94  03:02  0.232451  0.218918  ...     144.1570     2374.7735   \n395283  4485.89  03:03  0.217961  0.213027  ...     144.1395     2537.1125   \n395284  2634.06  03:04  0.248369  0.228724  ...     144.1125     2636.8970   \n\n        price_ma_50  volume_ma_50  price_ma_100  volume_ma_100  price_ma_200  \\\n395280     144.2426     2523.6686      143.8057      3599.3961     143.69380   \n395281     144.2372     2493.0322      143.8250      3516.1086     143.68820   \n395282     144.2212     2447.1926      143.8383      3507.8192     143.68115   \n395283     144.2070     2484.9482      143.8510      3406.2091     143.67425   \n395284     144.1876     2463.3726      143.8625      3381.6344     143.66590   \n\n        volume_ma_200  max_return_60min  min_return_60min  \n395280      4214.6177          0.534648         -0.666574  \n395281      4216.1390          0.604503         -0.722624  \n395282      4227.3134          0.758525         -0.591510  \n395283      4245.6840          0.772550         -0.577673  \n395284      4253.1505          0.927088         -0.425206  \n\n[5 rows x 140 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>open_time</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>time</th>\n      <th>atr_5</th>\n      <th>atr_10</th>\n      <th>...</th>\n      <th>price_ma_20</th>\n      <th>volume_ma_20</th>\n      <th>price_ma_50</th>\n      <th>volume_ma_50</th>\n      <th>price_ma_100</th>\n      <th>volume_ma_100</th>\n      <th>price_ma_200</th>\n      <th>volume_ma_200</th>\n      <th>max_return_60min</th>\n      <th>min_return_60min</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>395280</th>\n      <td>395280</td>\n      <td>2024-04-26 03:00:00</td>\n      <td>144.23</td>\n      <td>144.26</td>\n      <td>143.92</td>\n      <td>144.02</td>\n      <td>4881.16</td>\n      <td>03:00</td>\n      <td>0.216954</td>\n      <td>0.209282</td>\n      <td>...</td>\n      <td>144.1850</td>\n      <td>2170.1755</td>\n      <td>144.2426</td>\n      <td>2523.6686</td>\n      <td>143.8057</td>\n      <td>3599.3961</td>\n      <td>143.69380</td>\n      <td>4214.6177</td>\n      <td>0.534648</td>\n      <td>-0.666574</td>\n    </tr>\n    <tr>\n      <th>395281</th>\n      <td>395281</td>\n      <td>2024-04-26 03:01:00</td>\n      <td>144.03</td>\n      <td>144.17</td>\n      <td>143.91</td>\n      <td>143.92</td>\n      <td>2470.20</td>\n      <td>03:01</td>\n      <td>0.225564</td>\n      <td>0.214354</td>\n      <td>...</td>\n      <td>144.1770</td>\n      <td>2274.3275</td>\n      <td>144.2372</td>\n      <td>2493.0322</td>\n      <td>143.8250</td>\n      <td>3516.1086</td>\n      <td>143.68820</td>\n      <td>4216.1390</td>\n      <td>0.604503</td>\n      <td>-0.722624</td>\n    </tr>\n    <tr>\n      <th>395282</th>\n      <td>395282</td>\n      <td>2024-04-26 03:02:00</td>\n      <td>143.93</td>\n      <td>143.93</td>\n      <td>143.67</td>\n      <td>143.70</td>\n      <td>3566.94</td>\n      <td>03:02</td>\n      <td>0.232451</td>\n      <td>0.218918</td>\n      <td>...</td>\n      <td>144.1570</td>\n      <td>2374.7735</td>\n      <td>144.2212</td>\n      <td>2447.1926</td>\n      <td>143.8383</td>\n      <td>3507.8192</td>\n      <td>143.68115</td>\n      <td>4227.3134</td>\n      <td>0.758525</td>\n      <td>-0.591510</td>\n    </tr>\n    <tr>\n      <th>395283</th>\n      <td>395283</td>\n      <td>2024-04-26 03:03:00</td>\n      <td>143.69</td>\n      <td>143.74</td>\n      <td>143.58</td>\n      <td>143.68</td>\n      <td>4485.89</td>\n      <td>03:03</td>\n      <td>0.217961</td>\n      <td>0.213027</td>\n      <td>...</td>\n      <td>144.1395</td>\n      <td>2537.1125</td>\n      <td>144.2070</td>\n      <td>2484.9482</td>\n      <td>143.8510</td>\n      <td>3406.2091</td>\n      <td>143.67425</td>\n      <td>4245.6840</td>\n      <td>0.772550</td>\n      <td>-0.577673</td>\n    </tr>\n    <tr>\n      <th>395284</th>\n      <td>395284</td>\n      <td>2024-04-26 03:04:00</td>\n      <td>143.69</td>\n      <td>143.80</td>\n      <td>143.43</td>\n      <td>143.46</td>\n      <td>2634.06</td>\n      <td>03:04</td>\n      <td>0.248369</td>\n      <td>0.228724</td>\n      <td>...</td>\n      <td>144.1125</td>\n      <td>2636.8970</td>\n      <td>144.1876</td>\n      <td>2463.3726</td>\n      <td>143.8625</td>\n      <td>3381.6344</td>\n      <td>143.66590</td>\n      <td>4253.1505</td>\n      <td>0.927088</td>\n      <td>-0.425206</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 140 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#3등분 => 4개월\ndef extract_last_third(df):\n    num_rows = len(df)\n    third_size = num_rows // 3\n    start_index = 2 * third_size\n    end_index = num_rows\n    last_third = df.iloc[start_index:end_index]\n    return last_third\n\n# 데이터프레임 3등분하여 마지막 등분 추출\ndata_test = extract_last_third(data_test_tmp)\ndata_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-06T06:13:19.852844Z","iopub.execute_input":"2024-08-06T06:13:19.853809Z","iopub.status.idle":"2024-08-06T06:13:19.878863Z","shell.execute_reply.started":"2024-08-06T06:13:19.853769Z","shell.execute_reply":"2024-08-06T06:13:19.877707Z"},"trusted":true},"execution_count":72,"outputs":[{"execution_count":72,"output_type":"execute_result","data":{"text/plain":"        Unnamed: 0            open_time    open    high     low   close  \\\n351360      351360  2024-03-26 15:00:00  191.94  192.00  191.44  191.49   \n351361      351361  2024-03-26 15:01:00  191.49  191.49  190.80  190.88   \n351362      351362  2024-03-26 15:02:00  190.88  191.00  190.50  190.77   \n351363      351363  2024-03-26 15:03:00  190.77  191.05  190.56  191.02   \n351364      351364  2024-03-26 15:04:00  191.02  191.03  190.44  190.55   \n\n          volume   time     atr_5    atr_10  ...  price_ma_20  volume_ma_20  \\\n351360   2331.91  15:00  0.390227  0.433311  ...     191.3240     5414.5330   \n351361  10394.48  15:01  0.450181  0.458980  ...     191.3380     5675.9775   \n351362   3798.77  15:02  0.460145  0.463082  ...     191.3640     5290.1520   \n351363   4784.67  15:03  0.466116  0.465774  ...     191.3935     5282.1255   \n351364  11318.59  15:04  0.490893  0.478196  ...     191.3845     5560.1250   \n\n        price_ma_50  volume_ma_50  price_ma_100  volume_ma_100  price_ma_200  \\\n351360     191.4378     6906.3326      192.2953      5703.1473     193.45640   \n351361     191.4000     7057.0426      192.2598      5795.1956     193.43490   \n351362     191.3590     7085.8940      192.2231      5823.9552     193.41285   \n351363     191.3212     7116.5478      192.1878      5856.4750     193.39265   \n351364     191.2764     7302.7626      192.1532      5953.0198     193.37050   \n\n        volume_ma_200  max_return_60min  min_return_60min  \n351360     4064.21155          0.000000         -0.992219  \n351361     4106.58005          0.267184         -0.675817  \n351362     4119.97125          0.382660         -0.618546  \n351363     4133.83935          0.251283         -0.748613  \n351364     4189.04490          0.498557         -0.503805  \n\n[5 rows x 140 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>open_time</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>time</th>\n      <th>atr_5</th>\n      <th>atr_10</th>\n      <th>...</th>\n      <th>price_ma_20</th>\n      <th>volume_ma_20</th>\n      <th>price_ma_50</th>\n      <th>volume_ma_50</th>\n      <th>price_ma_100</th>\n      <th>volume_ma_100</th>\n      <th>price_ma_200</th>\n      <th>volume_ma_200</th>\n      <th>max_return_60min</th>\n      <th>min_return_60min</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>351360</th>\n      <td>351360</td>\n      <td>2024-03-26 15:00:00</td>\n      <td>191.94</td>\n      <td>192.00</td>\n      <td>191.44</td>\n      <td>191.49</td>\n      <td>2331.91</td>\n      <td>15:00</td>\n      <td>0.390227</td>\n      <td>0.433311</td>\n      <td>...</td>\n      <td>191.3240</td>\n      <td>5414.5330</td>\n      <td>191.4378</td>\n      <td>6906.3326</td>\n      <td>192.2953</td>\n      <td>5703.1473</td>\n      <td>193.45640</td>\n      <td>4064.21155</td>\n      <td>0.000000</td>\n      <td>-0.992219</td>\n    </tr>\n    <tr>\n      <th>351361</th>\n      <td>351361</td>\n      <td>2024-03-26 15:01:00</td>\n      <td>191.49</td>\n      <td>191.49</td>\n      <td>190.80</td>\n      <td>190.88</td>\n      <td>10394.48</td>\n      <td>15:01</td>\n      <td>0.450181</td>\n      <td>0.458980</td>\n      <td>...</td>\n      <td>191.3380</td>\n      <td>5675.9775</td>\n      <td>191.4000</td>\n      <td>7057.0426</td>\n      <td>192.2598</td>\n      <td>5795.1956</td>\n      <td>193.43490</td>\n      <td>4106.58005</td>\n      <td>0.267184</td>\n      <td>-0.675817</td>\n    </tr>\n    <tr>\n      <th>351362</th>\n      <td>351362</td>\n      <td>2024-03-26 15:02:00</td>\n      <td>190.88</td>\n      <td>191.00</td>\n      <td>190.50</td>\n      <td>190.77</td>\n      <td>3798.77</td>\n      <td>15:02</td>\n      <td>0.460145</td>\n      <td>0.463082</td>\n      <td>...</td>\n      <td>191.3640</td>\n      <td>5290.1520</td>\n      <td>191.3590</td>\n      <td>7085.8940</td>\n      <td>192.2231</td>\n      <td>5823.9552</td>\n      <td>193.41285</td>\n      <td>4119.97125</td>\n      <td>0.382660</td>\n      <td>-0.618546</td>\n    </tr>\n    <tr>\n      <th>351363</th>\n      <td>351363</td>\n      <td>2024-03-26 15:03:00</td>\n      <td>190.77</td>\n      <td>191.05</td>\n      <td>190.56</td>\n      <td>191.02</td>\n      <td>4784.67</td>\n      <td>15:03</td>\n      <td>0.466116</td>\n      <td>0.465774</td>\n      <td>...</td>\n      <td>191.3935</td>\n      <td>5282.1255</td>\n      <td>191.3212</td>\n      <td>7116.5478</td>\n      <td>192.1878</td>\n      <td>5856.4750</td>\n      <td>193.39265</td>\n      <td>4133.83935</td>\n      <td>0.251283</td>\n      <td>-0.748613</td>\n    </tr>\n    <tr>\n      <th>351364</th>\n      <td>351364</td>\n      <td>2024-03-26 15:04:00</td>\n      <td>191.02</td>\n      <td>191.03</td>\n      <td>190.44</td>\n      <td>190.55</td>\n      <td>11318.59</td>\n      <td>15:04</td>\n      <td>0.490893</td>\n      <td>0.478196</td>\n      <td>...</td>\n      <td>191.3845</td>\n      <td>5560.1250</td>\n      <td>191.2764</td>\n      <td>7302.7626</td>\n      <td>192.1532</td>\n      <td>5953.0198</td>\n      <td>193.37050</td>\n      <td>4189.04490</td>\n      <td>0.498557</td>\n      <td>-0.503805</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 140 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"data_test_tmp.tail()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#12등분 => 5개월\ndef extract_last_five_parts(df):\n    num_rows = len(df)\n    part_size = num_rows // 12  # 각 등분의 크기 계산\n    start_index = part_size * 7  # 맨 뒤 7등분의 시작 인덱스\n    last_five_parts = df.iloc[start_index:num_rows]  # 시작 인덱스부터 끝까지 추출\n    return last_five_parts\n\n# 데이터프레임 2등분하여 마지막 등분 추출\ndata_test = extract_last_five_parts(data_test_tmp)\ndata_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-06T06:15:21.726613Z","iopub.execute_input":"2024-08-06T06:15:21.727654Z","iopub.status.idle":"2024-08-06T06:15:21.752919Z","shell.execute_reply.started":"2024-08-06T06:15:21.727611Z","shell.execute_reply":"2024-08-06T06:15:21.752114Z"},"trusted":true},"execution_count":83,"outputs":[{"execution_count":83,"output_type":"execute_result","data":{"text/plain":"        Unnamed: 0            open_time    open    high     low   close  \\\n307440      307440  2024-02-25 03:00:00  103.32  103.37  103.30  103.35   \n307441      307441  2024-02-25 03:01:00  103.34  103.35  103.26  103.26   \n307442      307442  2024-02-25 03:02:00  103.26  103.26  103.17  103.17   \n307443      307443  2024-02-25 03:03:00  103.17  103.17  102.93  103.01   \n307444      307444  2024-02-25 03:04:00  103.01  103.04  102.84  102.90   \n\n         volume   time     atr_5    atr_10  ...  price_ma_20  volume_ma_20  \\\n307440   826.11  03:00  0.111083  0.119229  ...     103.3835     1660.5970   \n307441  1265.71  03:01  0.106866  0.116306  ...     103.3760     1622.4000   \n307442   868.68  03:02  0.103493  0.113676  ...     103.3585     1635.1455   \n307443  7471.67  03:03  0.130794  0.126308  ...     103.3305     1894.4725   \n307444  2863.89  03:04  0.144636  0.133677  ...     103.3000     2000.5360   \n\n        price_ma_50  volume_ma_50  price_ma_100  volume_ma_100  price_ma_200  \\\n307440     103.6732     2222.3958      103.6512      1902.9894     103.69565   \n307441     103.6498     2214.6420      103.6483      1888.3668     103.69005   \n307442     103.6284     2119.8558      103.6449      1890.8251     103.68410   \n307443     103.6052     2228.6402      103.6403      1957.1435     103.67725   \n307444     103.5802     2269.7064      103.6342      1978.1594     103.66975   \n\n        volume_ma_200  max_return_60min  min_return_60min  \n307440     1537.21170          0.116110         -1.132075  \n307441     1537.94115          0.203370         -1.045904  \n307442     1541.28800          0.290782         -0.959581  \n307443     1577.51305          0.446559         -0.805747  \n307444     1589.96560          0.553936         -0.699708  \n\n[5 rows x 140 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>open_time</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>time</th>\n      <th>atr_5</th>\n      <th>atr_10</th>\n      <th>...</th>\n      <th>price_ma_20</th>\n      <th>volume_ma_20</th>\n      <th>price_ma_50</th>\n      <th>volume_ma_50</th>\n      <th>price_ma_100</th>\n      <th>volume_ma_100</th>\n      <th>price_ma_200</th>\n      <th>volume_ma_200</th>\n      <th>max_return_60min</th>\n      <th>min_return_60min</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>307440</th>\n      <td>307440</td>\n      <td>2024-02-25 03:00:00</td>\n      <td>103.32</td>\n      <td>103.37</td>\n      <td>103.30</td>\n      <td>103.35</td>\n      <td>826.11</td>\n      <td>03:00</td>\n      <td>0.111083</td>\n      <td>0.119229</td>\n      <td>...</td>\n      <td>103.3835</td>\n      <td>1660.5970</td>\n      <td>103.6732</td>\n      <td>2222.3958</td>\n      <td>103.6512</td>\n      <td>1902.9894</td>\n      <td>103.69565</td>\n      <td>1537.21170</td>\n      <td>0.116110</td>\n      <td>-1.132075</td>\n    </tr>\n    <tr>\n      <th>307441</th>\n      <td>307441</td>\n      <td>2024-02-25 03:01:00</td>\n      <td>103.34</td>\n      <td>103.35</td>\n      <td>103.26</td>\n      <td>103.26</td>\n      <td>1265.71</td>\n      <td>03:01</td>\n      <td>0.106866</td>\n      <td>0.116306</td>\n      <td>...</td>\n      <td>103.3760</td>\n      <td>1622.4000</td>\n      <td>103.6498</td>\n      <td>2214.6420</td>\n      <td>103.6483</td>\n      <td>1888.3668</td>\n      <td>103.69005</td>\n      <td>1537.94115</td>\n      <td>0.203370</td>\n      <td>-1.045904</td>\n    </tr>\n    <tr>\n      <th>307442</th>\n      <td>307442</td>\n      <td>2024-02-25 03:02:00</td>\n      <td>103.26</td>\n      <td>103.26</td>\n      <td>103.17</td>\n      <td>103.17</td>\n      <td>868.68</td>\n      <td>03:02</td>\n      <td>0.103493</td>\n      <td>0.113676</td>\n      <td>...</td>\n      <td>103.3585</td>\n      <td>1635.1455</td>\n      <td>103.6284</td>\n      <td>2119.8558</td>\n      <td>103.6449</td>\n      <td>1890.8251</td>\n      <td>103.68410</td>\n      <td>1541.28800</td>\n      <td>0.290782</td>\n      <td>-0.959581</td>\n    </tr>\n    <tr>\n      <th>307443</th>\n      <td>307443</td>\n      <td>2024-02-25 03:03:00</td>\n      <td>103.17</td>\n      <td>103.17</td>\n      <td>102.93</td>\n      <td>103.01</td>\n      <td>7471.67</td>\n      <td>03:03</td>\n      <td>0.130794</td>\n      <td>0.126308</td>\n      <td>...</td>\n      <td>103.3305</td>\n      <td>1894.4725</td>\n      <td>103.6052</td>\n      <td>2228.6402</td>\n      <td>103.6403</td>\n      <td>1957.1435</td>\n      <td>103.67725</td>\n      <td>1577.51305</td>\n      <td>0.446559</td>\n      <td>-0.805747</td>\n    </tr>\n    <tr>\n      <th>307444</th>\n      <td>307444</td>\n      <td>2024-02-25 03:04:00</td>\n      <td>103.01</td>\n      <td>103.04</td>\n      <td>102.84</td>\n      <td>102.90</td>\n      <td>2863.89</td>\n      <td>03:04</td>\n      <td>0.144636</td>\n      <td>0.133677</td>\n      <td>...</td>\n      <td>103.3000</td>\n      <td>2000.5360</td>\n      <td>103.5802</td>\n      <td>2269.7064</td>\n      <td>103.6342</td>\n      <td>1978.1594</td>\n      <td>103.66975</td>\n      <td>1589.96560</td>\n      <td>0.553936</td>\n      <td>-0.699708</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 140 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#2등분 => 6개월\ndef extract_last_half(df):\n    num_rows = len(df)\n    half_size = num_rows // 2\n    start_index = half_size\n    end_index = num_rows\n    last_half = df.iloc[start_index:end_index]\n    return last_half\n\n# 데이터프레임 2등분하여 마지막 등분 추출\ndata_test = extract_last_half(data_test_tmp)\ndata_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-06T06:18:20.295328Z","iopub.execute_input":"2024-08-06T06:18:20.296369Z","iopub.status.idle":"2024-08-06T06:18:20.319203Z","shell.execute_reply.started":"2024-08-06T06:18:20.296326Z","shell.execute_reply":"2024-08-06T06:18:20.318370Z"},"trusted":true},"execution_count":93,"outputs":[{"execution_count":93,"output_type":"execute_result","data":{"text/plain":"        Unnamed: 0            open_time   open   high    low  close   volume  \\\n263520      263520  2024-01-25 15:00:00  88.11  88.15  87.94  87.97  2017.70   \n263521      263521  2024-01-25 15:01:00  87.97  88.00  87.91  87.96  1008.67   \n263522      263522  2024-01-25 15:02:00  87.96  87.98  87.79  87.98  2024.03   \n263523      263523  2024-01-25 15:03:00  87.97  87.99  87.83  87.96  1316.58   \n263524      263524  2024-01-25 15:04:00  87.96  87.98  87.90  87.93  1289.23   \n\n         time     atr_5    atr_10  ...  price_ma_20  volume_ma_20  \\\n263520  15:00  0.144542  0.160086  ...      87.9655     3160.3005   \n263521  15:01  0.133634  0.153077  ...      87.9605     3101.7150   \n263522  15:02  0.144907  0.156769  ...      87.9610     3146.3240   \n263523  15:03  0.147926  0.157093  ...      87.9710     2950.2410   \n263524  15:04  0.134341  0.149383  ...      87.9775     2914.4370   \n\n        price_ma_50  volume_ma_50  price_ma_100  volume_ma_100  price_ma_200  \\\n263520      87.7258     3528.4290       87.3411      3186.7504      87.62340   \n263521      87.7476     3504.9106       87.3521      3156.8546      87.61890   \n263522      87.7656     3497.6938       87.3627      3163.4374      87.61405   \n263523      87.7842     3498.2466       87.3743      3157.2376      87.60940   \n263524      87.8006     3492.0626       87.3859      3154.8248      87.60420   \n\n        volume_ma_200  max_return_60min  min_return_60min  \n263520     3535.04375          0.113675         -2.228032  \n263521     3501.91645          0.125057         -2.216917  \n263522     3474.18800          0.102296         -2.239145  \n263523     3462.65055          0.125057         -2.216917  \n263524     3425.90585          0.159218         -2.183555  \n\n[5 rows x 140 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>open_time</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>time</th>\n      <th>atr_5</th>\n      <th>atr_10</th>\n      <th>...</th>\n      <th>price_ma_20</th>\n      <th>volume_ma_20</th>\n      <th>price_ma_50</th>\n      <th>volume_ma_50</th>\n      <th>price_ma_100</th>\n      <th>volume_ma_100</th>\n      <th>price_ma_200</th>\n      <th>volume_ma_200</th>\n      <th>max_return_60min</th>\n      <th>min_return_60min</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>263520</th>\n      <td>263520</td>\n      <td>2024-01-25 15:00:00</td>\n      <td>88.11</td>\n      <td>88.15</td>\n      <td>87.94</td>\n      <td>87.97</td>\n      <td>2017.70</td>\n      <td>15:00</td>\n      <td>0.144542</td>\n      <td>0.160086</td>\n      <td>...</td>\n      <td>87.9655</td>\n      <td>3160.3005</td>\n      <td>87.7258</td>\n      <td>3528.4290</td>\n      <td>87.3411</td>\n      <td>3186.7504</td>\n      <td>87.62340</td>\n      <td>3535.04375</td>\n      <td>0.113675</td>\n      <td>-2.228032</td>\n    </tr>\n    <tr>\n      <th>263521</th>\n      <td>263521</td>\n      <td>2024-01-25 15:01:00</td>\n      <td>87.97</td>\n      <td>88.00</td>\n      <td>87.91</td>\n      <td>87.96</td>\n      <td>1008.67</td>\n      <td>15:01</td>\n      <td>0.133634</td>\n      <td>0.153077</td>\n      <td>...</td>\n      <td>87.9605</td>\n      <td>3101.7150</td>\n      <td>87.7476</td>\n      <td>3504.9106</td>\n      <td>87.3521</td>\n      <td>3156.8546</td>\n      <td>87.61890</td>\n      <td>3501.91645</td>\n      <td>0.125057</td>\n      <td>-2.216917</td>\n    </tr>\n    <tr>\n      <th>263522</th>\n      <td>263522</td>\n      <td>2024-01-25 15:02:00</td>\n      <td>87.96</td>\n      <td>87.98</td>\n      <td>87.79</td>\n      <td>87.98</td>\n      <td>2024.03</td>\n      <td>15:02</td>\n      <td>0.144907</td>\n      <td>0.156769</td>\n      <td>...</td>\n      <td>87.9610</td>\n      <td>3146.3240</td>\n      <td>87.7656</td>\n      <td>3497.6938</td>\n      <td>87.3627</td>\n      <td>3163.4374</td>\n      <td>87.61405</td>\n      <td>3474.18800</td>\n      <td>0.102296</td>\n      <td>-2.239145</td>\n    </tr>\n    <tr>\n      <th>263523</th>\n      <td>263523</td>\n      <td>2024-01-25 15:03:00</td>\n      <td>87.97</td>\n      <td>87.99</td>\n      <td>87.83</td>\n      <td>87.96</td>\n      <td>1316.58</td>\n      <td>15:03</td>\n      <td>0.147926</td>\n      <td>0.157093</td>\n      <td>...</td>\n      <td>87.9710</td>\n      <td>2950.2410</td>\n      <td>87.7842</td>\n      <td>3498.2466</td>\n      <td>87.3743</td>\n      <td>3157.2376</td>\n      <td>87.60940</td>\n      <td>3462.65055</td>\n      <td>0.125057</td>\n      <td>-2.216917</td>\n    </tr>\n    <tr>\n      <th>263524</th>\n      <td>263524</td>\n      <td>2024-01-25 15:04:00</td>\n      <td>87.96</td>\n      <td>87.98</td>\n      <td>87.90</td>\n      <td>87.93</td>\n      <td>1289.23</td>\n      <td>15:04</td>\n      <td>0.134341</td>\n      <td>0.149383</td>\n      <td>...</td>\n      <td>87.9775</td>\n      <td>2914.4370</td>\n      <td>87.8006</td>\n      <td>3492.0626</td>\n      <td>87.3859</td>\n      <td>3154.8248</td>\n      <td>87.60420</td>\n      <td>3425.90585</td>\n      <td>0.159218</td>\n      <td>-2.183555</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 140 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#12등분 => 7개월\ndef extract_last_five_parts(df):\n    num_rows = len(df)\n    part_size = num_rows // 12  # 각 등분의 크기 계산\n    start_index = part_size * 5  # 맨 뒤 5등분의 시작 인덱스\n    last_five_parts = df.iloc[start_index:num_rows]  # 시작 인덱스부터 끝까지 추출\n    return last_five_parts\n\n# 데이터프레임 2등분하여 마지막 등분 추출\ndata_test = extract_last_five_parts(data_test_tmp)\ndata_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-06T06:20:34.406959Z","iopub.execute_input":"2024-08-06T06:20:34.407401Z","iopub.status.idle":"2024-08-06T06:20:34.429804Z","shell.execute_reply.started":"2024-08-06T06:20:34.407367Z","shell.execute_reply":"2024-08-06T06:20:34.429121Z"},"trusted":true},"execution_count":104,"outputs":[{"execution_count":104,"output_type":"execute_result","data":{"text/plain":"        Unnamed: 0            open_time    open    high     low   close  \\\n219600      219600  2023-12-26 03:00:00  117.26  117.32  116.69  116.78   \n219601      219601  2023-12-26 03:01:00  116.78  117.62  116.78  117.47   \n219602      219602  2023-12-26 03:02:00  117.47  117.87  117.47  117.76   \n219603      219603  2023-12-26 03:03:00  117.77  117.97  117.67  117.74   \n219604      219604  2023-12-26 03:04:00  117.73  117.84  117.59  117.84   \n\n          volume   time     atr_5    atr_10  ...  price_ma_20  volume_ma_20  \\\n219600  30093.82  03:00  0.351372  0.330137  ...     118.2735     8327.7045   \n219601  13954.63  03:01  0.449097  0.381123  ...     118.2210     8795.1820   \n219602   7633.69  03:02  0.439278  0.383011  ...     118.1630     8867.1435   \n219603   4552.74  03:03  0.411422  0.374710  ...     118.0970     8695.4425   \n219604   5810.26  03:04  0.379138  0.362239  ...     118.0270     8739.9435   \n\n        price_ma_50  volume_ma_50  price_ma_100  volume_ma_100  price_ma_200  \\\n219600     118.4726     6641.2694      119.2068      5145.7542     119.66905   \n219601     118.4328     6894.1848      119.1763      5222.7961     119.65115   \n219602     118.4086     6974.4952      119.1493      5266.9242     119.63495   \n219603     118.3838     6995.7706      119.1231      5286.7675     119.62000   \n219604     118.3616     7059.6534      119.0968      5331.1395     119.60630   \n\n        volume_ma_200  max_return_60min  min_return_60min  \n219600     5205.36745          2.320603          0.000000  \n219601     5237.42255          1.719588          0.000000  \n219602     5237.36690          1.469090         -0.144361  \n219603     5237.00550          1.486326         -0.127399  \n219604     5235.11080          1.400204         -0.178208  \n\n[5 rows x 140 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>open_time</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>time</th>\n      <th>atr_5</th>\n      <th>atr_10</th>\n      <th>...</th>\n      <th>price_ma_20</th>\n      <th>volume_ma_20</th>\n      <th>price_ma_50</th>\n      <th>volume_ma_50</th>\n      <th>price_ma_100</th>\n      <th>volume_ma_100</th>\n      <th>price_ma_200</th>\n      <th>volume_ma_200</th>\n      <th>max_return_60min</th>\n      <th>min_return_60min</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>219600</th>\n      <td>219600</td>\n      <td>2023-12-26 03:00:00</td>\n      <td>117.26</td>\n      <td>117.32</td>\n      <td>116.69</td>\n      <td>116.78</td>\n      <td>30093.82</td>\n      <td>03:00</td>\n      <td>0.351372</td>\n      <td>0.330137</td>\n      <td>...</td>\n      <td>118.2735</td>\n      <td>8327.7045</td>\n      <td>118.4726</td>\n      <td>6641.2694</td>\n      <td>119.2068</td>\n      <td>5145.7542</td>\n      <td>119.66905</td>\n      <td>5205.36745</td>\n      <td>2.320603</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>219601</th>\n      <td>219601</td>\n      <td>2023-12-26 03:01:00</td>\n      <td>116.78</td>\n      <td>117.62</td>\n      <td>116.78</td>\n      <td>117.47</td>\n      <td>13954.63</td>\n      <td>03:01</td>\n      <td>0.449097</td>\n      <td>0.381123</td>\n      <td>...</td>\n      <td>118.2210</td>\n      <td>8795.1820</td>\n      <td>118.4328</td>\n      <td>6894.1848</td>\n      <td>119.1763</td>\n      <td>5222.7961</td>\n      <td>119.65115</td>\n      <td>5237.42255</td>\n      <td>1.719588</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>219602</th>\n      <td>219602</td>\n      <td>2023-12-26 03:02:00</td>\n      <td>117.47</td>\n      <td>117.87</td>\n      <td>117.47</td>\n      <td>117.76</td>\n      <td>7633.69</td>\n      <td>03:02</td>\n      <td>0.439278</td>\n      <td>0.383011</td>\n      <td>...</td>\n      <td>118.1630</td>\n      <td>8867.1435</td>\n      <td>118.4086</td>\n      <td>6974.4952</td>\n      <td>119.1493</td>\n      <td>5266.9242</td>\n      <td>119.63495</td>\n      <td>5237.36690</td>\n      <td>1.469090</td>\n      <td>-0.144361</td>\n    </tr>\n    <tr>\n      <th>219603</th>\n      <td>219603</td>\n      <td>2023-12-26 03:03:00</td>\n      <td>117.77</td>\n      <td>117.97</td>\n      <td>117.67</td>\n      <td>117.74</td>\n      <td>4552.74</td>\n      <td>03:03</td>\n      <td>0.411422</td>\n      <td>0.374710</td>\n      <td>...</td>\n      <td>118.0970</td>\n      <td>8695.4425</td>\n      <td>118.3838</td>\n      <td>6995.7706</td>\n      <td>119.1231</td>\n      <td>5286.7675</td>\n      <td>119.62000</td>\n      <td>5237.00550</td>\n      <td>1.486326</td>\n      <td>-0.127399</td>\n    </tr>\n    <tr>\n      <th>219604</th>\n      <td>219604</td>\n      <td>2023-12-26 03:04:00</td>\n      <td>117.73</td>\n      <td>117.84</td>\n      <td>117.59</td>\n      <td>117.84</td>\n      <td>5810.26</td>\n      <td>03:04</td>\n      <td>0.379138</td>\n      <td>0.362239</td>\n      <td>...</td>\n      <td>118.0270</td>\n      <td>8739.9435</td>\n      <td>118.3616</td>\n      <td>7059.6534</td>\n      <td>119.0968</td>\n      <td>5331.1395</td>\n      <td>119.60630</td>\n      <td>5235.11080</td>\n      <td>1.400204</td>\n      <td>-0.178208</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 140 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"data_test.tail()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"len(data_test)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_test = pd.read_csv(\"/kaggle/input/indicator3-full/SOL60_INDICATOR3\")\n\n# Display the first few rows of the dataset to ensure it is loaded correctly\ndata_test.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#3등분 한 것의 마지막 등분\n# 데이터프레임의 길이 계산\ntotal_length = len(data_test)\n\n# 마지막 1/3 데이터 분리\ndata_test = data_test.iloc[-(total_length // 3):]\ndata_test.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#3등분 한 것의 두번째\n# 데이터프레임의 길이 계산\ntotal_length = len(data_test)\n\n# 3등분으로 나눈 길이 계산\nsplit_length = total_length // 3\n\n# 중간 부분 데이터 분리\ndata_test = data_test.iloc[split_length:split_length*2]\ndata_test.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# open_time 열을 datetime 형식으로 변환\nif not np.issubdtype(data_test['open_time'].dtype, np.datetime64):\n    data_test['open_time'] = pd.to_datetime(data_test['open_time'])\n\n# time 열을 분 단위로 변환\ndata_test['time'] = data_test['open_time'].dt.hour * 60 + data_test['open_time'].dt.minute","metadata":{"execution":{"iopub.status.busy":"2024-08-06T06:22:50.352313Z","iopub.execute_input":"2024-08-06T06:22:50.353023Z","iopub.status.idle":"2024-08-06T06:22:50.505006Z","shell.execute_reply.started":"2024-08-06T06:22:50.352984Z","shell.execute_reply":"2024-08-06T06:22:50.504139Z"},"trusted":true},"execution_count":115,"outputs":[]},{"cell_type":"code","source":"data_test.columns","metadata":{"execution":{"iopub.status.busy":"2024-08-06T06:13:27.078012Z","iopub.execute_input":"2024-08-06T06:13:27.078914Z","iopub.status.idle":"2024-08-06T06:13:27.084341Z","shell.execute_reply.started":"2024-08-06T06:13:27.078875Z","shell.execute_reply":"2024-08-06T06:13:27.083686Z"},"trusted":true},"execution_count":74,"outputs":[{"execution_count":74,"output_type":"execute_result","data":{"text/plain":"Index(['Unnamed: 0', 'open_time', 'open', 'high', 'low', 'close', 'volume',\n       'time', 'atr_5', 'atr_10',\n       ...\n       'price_ma_20', 'volume_ma_20', 'price_ma_50', 'volume_ma_50',\n       'price_ma_100', 'volume_ma_100', 'price_ma_200', 'volume_ma_200',\n       'max_return_60min', 'min_return_60min'],\n      dtype='object', length=140)"},"metadata":{}}]},{"cell_type":"code","source":"data_test = data_test.drop(columns=['Unnamed: 0'])","metadata":{"execution":{"iopub.status.busy":"2024-08-06T06:22:53.573837Z","iopub.execute_input":"2024-08-06T06:22:53.574268Z","iopub.status.idle":"2024-08-06T06:22:53.741512Z","shell.execute_reply.started":"2024-08-06T06:22:53.574235Z","shell.execute_reply":"2024-08-06T06:22:53.740615Z"},"trusted":true},"execution_count":116,"outputs":[]},{"cell_type":"code","source":"data_test = data_test.drop(columns=['Unnamed: 0.1'])","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 사용하지 않을 열 제외\ndata_test_predict = data_test.drop(columns=['open_time', 'max_return_60min', 'min_return_60min'])","metadata":{"execution":{"iopub.status.busy":"2024-08-06T06:22:55.793047Z","iopub.execute_input":"2024-08-06T06:22:55.794024Z","iopub.status.idle":"2024-08-06T06:22:55.960010Z","shell.execute_reply.started":"2024-08-06T06:22:55.793986Z","shell.execute_reply":"2024-08-06T06:22:55.959043Z"},"trusted":true},"execution_count":117,"outputs":[]},{"cell_type":"code","source":"# 사용하지 않을 열 제외 v2\n# 피처 목록\nfeatures_to_keep = ['ichimoku_conversion_9', 'ichimoku_conversion_200', 'supertrend_upper_14_2_10', \n                    'supertrend_upper_10_3_20', 'bollinger_hband_200', 'volume_ma_100', 'ROC_30', \n                    'open', 'high', 'supertrend_lower_10_3_20', 'obv', 'atr_50', 'volume_ma_200', \n                    'Accumulation_Distribution_Line', 'bollinger_lband_20', 'lowerband', 'volume_ma_20', \n                    'supertrend_lower_7_3_14', 'atr_14', 'disparity_index_100', 'price_ma_200', \n                    'bollinger_lband_50', 'ichimoku_conversion_52', 'upperband', 'atr_20', 'price_ma_20', \n                    'disparity_index_20', 'time', 'vwap', 'bollinger_lband_200', 'atr_10', 'MFI_40', \n                    'volume_ma_10', 'supertrend_in_uptrend_7_3_14', 'Momentum_30', 'Momentum_20', \n                    'supertrend_upper_20_4_50', 'bollinger_hband_100', 'MFI_50', 'CMO_50', 'close', \n                    'Momentum_50', 'stoch_%k_21_5', 'supertrend_upper_7_3_14', 'bollinger_hband_50', \n                    'Parabolic_SAR_0.02', 'bollinger_lband_100', 'stoch_%k_9_3', 'Williams_%R_30', 'CMO_40']\n\n# 피처들만 남기기\ndata_test_predict = data_test[features_to_keep]","metadata":{"execution":{"iopub.status.busy":"2024-08-06T04:01:50.666315Z","iopub.execute_input":"2024-08-06T04:01:50.667185Z","iopub.status.idle":"2024-08-06T04:01:50.712428Z","shell.execute_reply.started":"2024-08-06T04:01:50.667133Z","shell.execute_reply":"2024-08-06T04:01:50.711479Z"},"trusted":true},"execution_count":109,"outputs":[]},{"cell_type":"code","source":"# 무한대 값을 NaN으로 대체\ndata_test_predict.replace([np.inf, -np.inf], np.nan, inplace=True)\n\n# NaN 값을 평균으로 대체\nimputer = SimpleImputer(strategy='mean')\ndata_test_predict_imputed = imputer.fit_transform(data_test_predict)  # 같은 imputer 사용\n\n# 데이터 정규화\nscaler = MinMaxScaler()\ndata_test_predict_scaled = scaler.fit_transform(data_test_predict_imputed)  # 같은 scaler 사용\n\n# 예측 데이터를 시퀀스 형태로 변환 (LSTM용)\ndef create_sequences_for_prediction(data, sequence_length):\n    sequences = []\n    for i in range(len(data) - sequence_length + 1):\n        seq = data[i:i + sequence_length]\n        sequences.append(seq)\n    return np.array(sequences)\n\n# 시퀀스 길이 설정\nsequence_length = 60\n\n# 예측용 시퀀스 데이터 생성\nX_test_seq = create_sequences_for_prediction(data_test_predict_scaled, sequence_length)","metadata":{"execution":{"iopub.status.busy":"2024-08-06T06:22:58.491897Z","iopub.execute_input":"2024-08-06T06:22:58.492879Z","iopub.status.idle":"2024-08-06T06:23:19.531219Z","shell.execute_reply.started":"2024-08-06T06:22:58.492837Z","shell.execute_reply":"2024-08-06T06:23:19.530234Z"},"trusted":true},"execution_count":118,"outputs":[]},{"cell_type":"markdown","source":"**TCN(시계열)**","metadata":{}},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader, TensorDataset","metadata":{"execution":{"iopub.status.busy":"2024-08-06T02:54:58.960698Z","iopub.execute_input":"2024-08-06T02:54:58.960946Z","iopub.status.idle":"2024-08-06T02:55:18.090580Z","shell.execute_reply.started":"2024-08-06T02:54:58.960922Z","shell.execute_reply":"2024-08-06T02:55:18.089559Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"# 학습 데이터와 검증 데이터 분리\nX_train, X_test, y_train, y_test = train_test_split(X_seq, y_seq, test_size=0.2, random_state=42)\n\n# 데이터를 텐서로 변환\nX_train_tensor = torch.tensor(X_train, dtype=torch.float32)\ny_train_tensor = torch.tensor(y_train, dtype=torch.float32).unsqueeze(1)\nX_test_tensor = torch.tensor(X_test, dtype=torch.float32)\ny_test_tensor = torch.tensor(y_test, dtype=torch.float32).unsqueeze(1)\n\n# 데이터 로더 생성\ntrain_dataset = TensorDataset(X_train_tensor, y_train_tensor)\ntest_dataset = TensorDataset(X_test_tensor, y_test_tensor)\ntrain_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)\ntest_loader = DataLoader(test_dataset, batch_size=64, shuffle=False)","metadata":{"execution":{"iopub.status.busy":"2024-08-06T02:55:18.091722Z","iopub.execute_input":"2024-08-06T02:55:18.091999Z","iopub.status.idle":"2024-08-06T02:55:35.065226Z","shell.execute_reply.started":"2024-08-06T02:55:18.091973Z","shell.execute_reply":"2024-08-06T02:55:35.064113Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"# TCN 모델 정의\nclass TCNModel(nn.Module):\n    def __init__(self, input_size, num_channels, kernel_size=2, dropout=0.2):\n        super(TCNModel, self).__init__()\n        self.tcn = nn.Conv1d(input_size, num_channels, kernel_size, padding=kernel_size//2)\n        self.relu = nn.ReLU()\n        self.dropout = nn.Dropout(dropout)\n        self.fc = nn.Linear(num_channels, 1)\n\n    def forward(self, x):\n        x = x.transpose(1, 2)  # (batch_size, seq_len, input_size) -> (batch_size, input_size, seq_len)\n        y1 = self.tcn(x)\n        y1 = self.relu(y1)\n        y1 = self.dropout(y1)\n        y1 = y1[:, :, -1]\n        o = self.fc(y1)\n        return o\n\n# 모델 설정\ninput_size = X_train.shape[2]\nnum_channels = 64\nmodel = TCNModel(input_size, num_channels)\n\n# 손실 함수 및 옵티마이저 설정\ncriterion = nn.BCEWithLogitsLoss()\noptimizer = optim.Adam(model.parameters(), lr=0.001)\n\n# 조기 종료 설정\npatience = 5\nbest_loss = float('inf')\npatience_counter = 0\n\n# 학습 및 검증 손실을 저장할 리스트\ntrain_losses = []\nval_losses = []\n\n# 추가 학습\nnum_epochs = 100  # 최대 에포크 수\nfor epoch in range(num_epochs):\n    # 학습 단계\n    model.train()\n    running_loss = 0.0\n    for X_batch, y_batch in train_loader:\n        optimizer.zero_grad()\n        output = model(X_batch)\n        loss = criterion(output, y_batch)\n        loss.backward()\n        optimizer.step()\n        running_loss += loss.item()\n\n    avg_train_loss = running_loss / len(train_loader)\n    train_losses.append(avg_train_loss)\n\n    # 검증 단계\n    model.eval()\n    val_loss = 0.0\n    with torch.no_grad():\n        for X_batch, y_batch in test_loader:\n            output = model(X_batch)\n            loss = criterion(output, y_batch)\n            val_loss += loss.item()\n\n    avg_val_loss = val_loss / len(test_loader)\n    val_losses.append(avg_val_loss)\n\n    print(f'Epoch [{epoch+1}/{num_epochs}], Train Loss: {avg_train_loss:.4f}, Val Loss: {avg_val_loss:.4f}')\n\n    # 조기 종료 조건 체크\n    if avg_val_loss < best_loss:\n        best_loss = avg_val_loss\n        patience_counter = 0\n    else:\n        patience_counter += 1\n\n    if patience_counter >= patience:\n        print(\"조기 종료 조건 충족. 학습을 중지합니다.\")\n        break\n\n# 학습 및 검증 손실 시각화\nplt.plot(train_losses, label='Train Loss')\nplt.plot(val_losses, label='Validation Loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()\n\n# 모델 평가\nmodel.eval()\nwith torch.no_grad():\n    y_true = []\n    y_pred = []\n    for X_batch, y_batch in test_loader:\n        output = model(X_batch)\n        y_true.extend(y_batch.tolist())\n        y_pred.extend(torch.sigmoid(output).squeeze().tolist())\n\n# 이진 분류 결과를 위한 평가 지표 계산\ny_pred = np.array(y_pred) > 0.5\ny_true = y_test_tensor.numpy()\n\naccuracy = accuracy_score(y_true, y_pred)\nprecision = precision_score(y_true, y_pred)\nrecall = recall_score(y_true, y_pred)\nf1 = f1_score(y_true, y_pred)\n\nprint(f'Accuracy: {accuracy:.4f}')\nprint(f'Precision: {precision:.4f}')\nprint(f'Recall: {recall:.4f}')\nprint(f'F1 Score: {f1:.4f}')","metadata":{"execution":{"iopub.status.busy":"2024-08-06T02:55:35.067365Z","iopub.execute_input":"2024-08-06T02:55:35.067743Z","iopub.status.idle":"2024-08-06T03:38:06.415038Z","shell.execute_reply.started":"2024-08-06T02:55:35.067702Z","shell.execute_reply":"2024-08-06T03:38:06.414221Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm\n","output_type":"stream"},{"name":"stdout","text":"Epoch [1/100], Train Loss: 0.5094, Val Loss: 0.5015\nEpoch [2/100], Train Loss: 0.5041, Val Loss: 0.5019\nEpoch [3/100], Train Loss: 0.5031, Val Loss: 0.4993\nEpoch [4/100], Train Loss: 0.5024, Val Loss: 0.4985\nEpoch [5/100], Train Loss: 0.5021, Val Loss: 0.4990\nEpoch [6/100], Train Loss: 0.5017, Val Loss: 0.4982\nEpoch [7/100], Train Loss: 0.5014, Val Loss: 0.4982\nEpoch [8/100], Train Loss: 0.5013, Val Loss: 0.4993\nEpoch [9/100], Train Loss: 0.5011, Val Loss: 0.5016\nEpoch [10/100], Train Loss: 0.5010, Val Loss: 0.4986\nEpoch [11/100], Train Loss: 0.5009, Val Loss: 0.4980\nEpoch [12/100], Train Loss: 0.5006, Val Loss: 0.4996\nEpoch [13/100], Train Loss: 0.5005, Val Loss: 0.4972\nEpoch [14/100], Train Loss: 0.5004, Val Loss: 0.4992\nEpoch [15/100], Train Loss: 0.5004, Val Loss: 0.4967\nEpoch [16/100], Train Loss: 0.5004, Val Loss: 0.4971\nEpoch [17/100], Train Loss: 0.5003, Val Loss: 0.4967\nEpoch [18/100], Train Loss: 0.5003, Val Loss: 0.4964\nEpoch [19/100], Train Loss: 0.5000, Val Loss: 0.4967\nEpoch [20/100], Train Loss: 0.5001, Val Loss: 0.4966\nEpoch [21/100], Train Loss: 0.5000, Val Loss: 0.4968\nEpoch [22/100], Train Loss: 0.5000, Val Loss: 0.4964\nEpoch [23/100], Train Loss: 0.5000, Val Loss: 0.4970\n조기 종료 조건 충족. 학습을 중지합니다.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"Accuracy: 0.7593\nPrecision: 0.6227\nRecall: 0.2648\nF1 Score: 0.3716\n","output_type":"stream"}]},{"cell_type":"code","source":"pip install xgboost","metadata":{"execution":{"iopub.status.busy":"2024-08-05T12:50:15.550843Z","iopub.execute_input":"2024-08-05T12:50:15.551615Z","iopub.status.idle":"2024-08-05T12:50:23.218356Z","shell.execute_reply.started":"2024-08-05T12:50:15.551580Z","shell.execute_reply":"2024-08-05T12:50:23.217305Z"},"trusted":true},"execution_count":52,"outputs":[{"name":"stdout","text":"Collecting xgboost\n  Downloading xgboost-2.1.1-py3-none-manylinux_2_28_x86_64.whl.metadata (2.1 kB)\nRequirement already satisfied: numpy in /usr/local/lib/python3.10/site-packages (from xgboost) (1.26.4)\nRequirement already satisfied: nvidia-nccl-cu12 in /usr/local/lib/python3.10/site-packages (from xgboost) (2.20.5)\nRequirement already satisfied: scipy in /usr/local/lib/python3.10/site-packages (from xgboost) (1.14.0)\nDownloading xgboost-2.1.1-py3-none-manylinux_2_28_x86_64.whl (153.9 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m153.9/153.9 MB\u001b[0m \u001b[31m60.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hInstalling collected packages: xgboost\nSuccessfully installed xgboost-2.1.1\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.\u001b[0m\u001b[33m\n\u001b[0mNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}]},{"cell_type":"code","source":"from xgboost import XGBClassifier","metadata":{"execution":{"iopub.status.busy":"2024-08-05T12:50:23.220303Z","iopub.execute_input":"2024-08-05T12:50:23.220637Z","iopub.status.idle":"2024-08-05T12:50:24.446539Z","shell.execute_reply.started":"2024-08-05T12:50:23.220596Z","shell.execute_reply":"2024-08-05T12:50:24.445768Z"},"trusted":true},"execution_count":53,"outputs":[]},{"cell_type":"code","source":"# 학습 데이터와 검증 데이터 분리\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)\n\n# XGBoost 모델 학습\nmodel = XGBClassifier()\nmodel.fit(X_train, y_train)\n\n# 피처 중요도 평가\nfeature_importances = model.feature_importances_\nfeature_names = data.drop(columns=['max_return_60min', 'min_return_60min', 'target']).columns","metadata":{"execution":{"iopub.status.busy":"2024-08-05T12:50:24.447714Z","iopub.execute_input":"2024-08-05T12:50:24.448016Z","iopub.status.idle":"2024-08-05T12:50:26.103970Z","shell.execute_reply.started":"2024-08-05T12:50:24.447986Z","shell.execute_reply":"2024-08-05T12:50:26.103117Z"},"trusted":true},"execution_count":54,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# 피처 중요도를 데이터프레임으로 변환\nfeature_importance_df = pd.DataFrame({\n    'Feature': feature_names,\n    'Importance': feature_importances\n})\n\n# 중요도에 따라 정렬\nfeature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False).reset_index(drop=True)\n\n# 피처 중요도 표 출력\nfeature_importance_df.head(50)","metadata":{"execution":{"iopub.status.busy":"2024-08-05T12:53:29.650178Z","iopub.execute_input":"2024-08-05T12:53:29.650516Z","iopub.status.idle":"2024-08-05T12:53:29.663290Z","shell.execute_reply.started":"2024-08-05T12:53:29.650487Z","shell.execute_reply":"2024-08-05T12:53:29.662580Z"},"trusted":true},"execution_count":58,"outputs":[{"execution_count":58,"output_type":"execute_result","data":{"text/plain":"                           Feature  Importance\n0            ichimoku_conversion_9    0.064387\n1          ichimoku_conversion_200    0.062628\n2         supertrend_upper_14_2_10    0.040425\n3         supertrend_upper_10_3_20    0.038875\n4              bollinger_hband_200    0.033272\n5                    volume_ma_100    0.029397\n6                           ROC_30    0.028038\n7                             open    0.027418\n8                             high    0.025340\n9         supertrend_lower_10_3_20    0.024563\n10                             obv    0.021678\n11                          atr_50    0.021120\n12                   volume_ma_200    0.019458\n13  Accumulation_Distribution_Line    0.018891\n14              bollinger_lband_20    0.017974\n15                       lowerband    0.017351\n16                    volume_ma_20    0.017064\n17         supertrend_lower_7_3_14    0.015961\n18                          atr_14    0.015484\n19             disparity_index_100    0.015333\n20                    price_ma_200    0.014968\n21              bollinger_lband_50    0.014822\n22          ichimoku_conversion_52    0.014187\n23                       upperband    0.014021\n24                          atr_20    0.013851\n25                     price_ma_20    0.013798\n26              disparity_index_20    0.013718\n27                            time    0.013586\n28                            vwap    0.012002\n29             bollinger_lband_200    0.011917\n30                          atr_10    0.010910\n31                          MFI_40    0.010792\n32                    volume_ma_10    0.010569\n33    supertrend_in_uptrend_7_3_14    0.009411\n34                     Momentum_30    0.008915\n35                     Momentum_20    0.008877\n36        supertrend_upper_20_4_50    0.008804\n37             bollinger_hband_100    0.008021\n38                          MFI_50    0.007475\n39                          CMO_50    0.007194\n40                           close    0.007055\n41                     Momentum_50    0.006975\n42                   stoch_%k_21_5    0.006221\n43         supertrend_upper_7_3_14    0.006174\n44              bollinger_hband_50    0.006015\n45              Parabolic_SAR_0.02    0.005861\n46             bollinger_lband_100    0.005624\n47                    stoch_%k_9_3    0.005608\n48                  Williams_%R_30    0.005412\n49                          CMO_40    0.005348","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Feature</th>\n      <th>Importance</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ichimoku_conversion_9</td>\n      <td>0.064387</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ichimoku_conversion_200</td>\n      <td>0.062628</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>supertrend_upper_14_2_10</td>\n      <td>0.040425</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>supertrend_upper_10_3_20</td>\n      <td>0.038875</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>bollinger_hband_200</td>\n      <td>0.033272</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>volume_ma_100</td>\n      <td>0.029397</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>ROC_30</td>\n      <td>0.028038</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>open</td>\n      <td>0.027418</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>high</td>\n      <td>0.025340</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>supertrend_lower_10_3_20</td>\n      <td>0.024563</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>obv</td>\n      <td>0.021678</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>atr_50</td>\n      <td>0.021120</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>volume_ma_200</td>\n      <td>0.019458</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Accumulation_Distribution_Line</td>\n      <td>0.018891</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>bollinger_lband_20</td>\n      <td>0.017974</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>lowerband</td>\n      <td>0.017351</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>volume_ma_20</td>\n      <td>0.017064</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>supertrend_lower_7_3_14</td>\n      <td>0.015961</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>atr_14</td>\n      <td>0.015484</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>disparity_index_100</td>\n      <td>0.015333</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>price_ma_200</td>\n      <td>0.014968</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>bollinger_lband_50</td>\n      <td>0.014822</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>ichimoku_conversion_52</td>\n      <td>0.014187</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>upperband</td>\n      <td>0.014021</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>atr_20</td>\n      <td>0.013851</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>price_ma_20</td>\n      <td>0.013798</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>disparity_index_20</td>\n      <td>0.013718</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>time</td>\n      <td>0.013586</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>vwap</td>\n      <td>0.012002</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>bollinger_lband_200</td>\n      <td>0.011917</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>atr_10</td>\n      <td>0.010910</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>MFI_40</td>\n      <td>0.010792</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>volume_ma_10</td>\n      <td>0.010569</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>supertrend_in_uptrend_7_3_14</td>\n      <td>0.009411</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>Momentum_30</td>\n      <td>0.008915</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>Momentum_20</td>\n      <td>0.008877</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>supertrend_upper_20_4_50</td>\n      <td>0.008804</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>bollinger_hband_100</td>\n      <td>0.008021</td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>MFI_50</td>\n      <td>0.007475</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>CMO_50</td>\n      <td>0.007194</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>close</td>\n      <td>0.007055</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>Momentum_50</td>\n      <td>0.006975</td>\n    </tr>\n    <tr>\n      <th>42</th>\n      <td>stoch_%k_21_5</td>\n      <td>0.006221</td>\n    </tr>\n    <tr>\n      <th>43</th>\n      <td>supertrend_upper_7_3_14</td>\n      <td>0.006174</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>bollinger_hband_50</td>\n      <td>0.006015</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>Parabolic_SAR_0.02</td>\n      <td>0.005861</td>\n    </tr>\n    <tr>\n      <th>46</th>\n      <td>bollinger_lband_100</td>\n      <td>0.005624</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>stoch_%k_9_3</td>\n      <td>0.005608</td>\n    </tr>\n    <tr>\n      <th>48</th>\n      <td>Williams_%R_30</td>\n      <td>0.005412</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>CMO_40</td>\n      <td>0.005348</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_selection import SequentialFeatureSelector","metadata":{"execution":{"iopub.status.busy":"2024-08-05T12:54:11.898240Z","iopub.execute_input":"2024-08-05T12:54:11.899135Z","iopub.status.idle":"2024-08-05T12:54:11.914415Z","shell.execute_reply.started":"2024-08-05T12:54:11.899098Z","shell.execute_reply":"2024-08-05T12:54:11.913746Z"},"trusted":true},"execution_count":61,"outputs":[]},{"cell_type":"code","source":"# 학습 데이터와 검증 데이터 분리\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)\n\n# 순차적 전진 선택\nmodel = LogisticRegression(max_iter=10000)\nsfs = SequentialFeatureSelector(model, n_features_to_select='auto', direction='forward')\nsfs.fit(X_train, y_train)\n\n# 선택된 피처\nselected_features = sfs.get_support(indices=True)\nselected_feature_names = data.drop(columns=['max_return_60min', 'min_return_60min', 'target']).columns[selected_features]\n\n# 선택된 피처 중요도 (일반적으로 Logistic Regression에서는 coef_ 속성을 사용하여 피처 중요도를 평가할 수 있습니다)\nmodel.fit(sfs.transform(X_train), y_train)\nfeature_importances = model.coef_[0]\n\n# 선택된 피처 중요도를 데이터프레임으로 변환\nfeature_importance_df = pd.DataFrame({\n    'Feature': selected_feature_names,\n    'Importance': feature_importances\n})\n\n# 중요도에 따라 정렬\nfeature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False).reset_index(drop=True)\n\n# 피처 중요도 표 출력\nprint(feature_importance_df)\n\n# 모델 성능 평가\naccuracy = model.score(sfs.transform(X_test), y_test)\nprint('Model accuracy with selected features:', accuracy)","metadata":{"execution":{"iopub.status.busy":"2024-08-05T12:57:29.278293Z","iopub.execute_input":"2024-08-05T12:57:29.279277Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 모델 저장 경로\nmodel_path = '/kaggle/working/SOL60_SMALLL_INDICATOR3_TCN_v5.pth'\n\n# 모델 상태 저장\ntorch.save(model.state_dict(), model_path)\nprint(f\"Model saved to {model_path}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-06T03:38:06.416480Z","iopub.execute_input":"2024-08-06T03:38:06.417400Z","iopub.status.idle":"2024-08-06T03:38:06.424350Z","shell.execute_reply.started":"2024-08-06T03:38:06.417337Z","shell.execute_reply":"2024-08-06T03:38:06.423632Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"Model saved to /kaggle/working/SOL60_SMALLL_INDICATOR3_TCN_v5.pth\n","output_type":"stream"}]},{"cell_type":"code","source":"#모델 로드\nclass TCNModel(nn.Module):\n    def __init__(self, input_channels, num_channels, kernel_size=2, dropout=0.2):\n        super(TCNModel, self).__init__()\n        self.tcn = nn.Conv1d(input_channels, num_channels, kernel_size, padding=kernel_size//2)\n        self.relu = nn.ReLU()\n        self.dropout = nn.Dropout(dropout)\n        self.fc = nn.Linear(num_channels, 1)\n\n    def forward(self, x):\n        x = x.transpose(1, 2)  # (batch_size, seq_len, input_channels) -> (batch_size, input_channels, seq_len)\n        y1 = self.tcn(x)\n        y1 = self.relu(y1)\n        y1 = self.dropout(y1)\n        y1 = y1[:, :, -1]\n        o = self.fc(y1)\n        return o\n\n# 테스트 데이터 텐서로 변환\nX_test_tensor = torch.tensor(X_seq, dtype=torch.float32)\n\n# 입력 차원 확인 및 설정\ninput_channels = X_seq.shape[2]\nprint(f\"Input channels: {input_channels}\")\n\n# 모델 설정\nnum_channels = 64\nmodel = TCNModel(input_channels, num_channels)\n\n# 모델 로드\nmodel_path = '/kaggle/input/lstm_indiactor3/pytorch/tcn_transformer/3/SOL60_SMALLL_INDICATOR3_TCN_v2.pth'\nmodel.load_state_dict(torch.load(model_path))\nmodel.train()  # 모델을 학습 모드로 설정\nprint(f\"Model loaded from {model_path}\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#추가 학습\n# 학습 데이터와 검증 데이터 분리\nX_train, X_test, y_train, y_test = train_test_split(X_seq, y_seq, test_size=0.2, random_state=42)\n\n# 데이터를 텐서로 변환\nX_train_tensor = torch.tensor(X_train, dtype=torch.float32)\ny_train_tensor = torch.tensor(y_train, dtype=torch.float32).unsqueeze(1)\nX_test_tensor = torch.tensor(X_test, dtype=torch.float32)\ny_test_tensor = torch.tensor(y_test, dtype=torch.float32).unsqueeze(1)\n\n# 데이터 로더 생성\ntrain_dataset = TensorDataset(X_train_tensor, y_train_tensor)\ntest_dataset = TensorDataset(X_test_tensor, y_test_tensor)\ntrain_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)\ntest_loader = DataLoader(test_dataset, batch_size=64, shuffle=False)\n\n# 손실 함수 및 옵티마이저 설정\ncriterion = nn.BCEWithLogitsLoss()\noptimizer = optim.Adam(model.parameters(), lr=0.001)\n\n# 조기 종료 설정\npatience = 5\nbest_loss = float('inf')\npatience_counter = 0\n\n# 학습 및 검증 손실을 저장할 리스트\ntrain_losses = []\nval_losses = []\n\n# 추가 학습\nnum_epochs = 100  # 최대 에포크 수\nfor epoch in range(num_epochs):\n    # 학습 단계\n    model.train()\n    running_loss = 0.0\n    for X_batch, y_batch in train_loader:\n        optimizer.zero_grad()\n        output = model(X_batch)\n        loss = criterion(output, y_batch)\n        loss.backward()\n        optimizer.step()\n        running_loss += loss.item()\n\n    avg_train_loss = running_loss / len(train_loader)\n    train_losses.append(avg_train_loss)\n\n    # 검증 단계\n    model.eval()\n    val_loss = 0.0\n    with torch.no_grad():\n        for X_batch, y_batch in test_loader:\n            output = model(X_batch)\n            loss = criterion(output, y_batch)\n            val_loss += loss.item()\n\n    avg_val_loss = val_loss / len(test_loader)\n    val_losses.append(avg_val_loss)\n\n    print(f'Epoch [{epoch+1}/{num_epochs}], Train Loss: {avg_train_loss:.4f}, Val Loss: {avg_val_loss:.4f}')\n\n    # 조기 종료 조건 체크\n    if avg_val_loss < best_loss:\n        best_loss = avg_val_loss\n        patience_counter = 0\n    else:\n        patience_counter += 1\n\n    if patience_counter >= patience:\n        print(\"조기 종료 조건 충족. 학습을 중지합니다.\")\n        break\n\n# 학습 및 검증 손실 시각화\nplt.plot(train_losses, label='Train Loss')\nplt.plot(val_losses, label='Validation Loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()\n\n# 모델 평가\nmodel.eval()\nwith torch.no_grad():\n    y_true = []\n    y_pred = []\n    for X_batch, y_batch in test_loader:\n        output = model(X_batch)\n        y_true.extend(y_batch.tolist())\n        y_pred.extend(torch.sigmoid(output).squeeze().tolist())\n\n# 이진 분류 결과를 위한 평가 지표 계산\ny_pred = np.array(y_pred) > 0.5\ny_true = y_test_tensor.numpy()\n\naccuracy = accuracy_score(y_true, y_pred)\nprecision = precision_score(y_true, y_pred)\nrecall = recall_score(y_true, y_pred)\nf1 = f1_score(y_true, y_pred)\n\nprint(f'Accuracy: {accuracy:.4f}')\nprint(f'Precision: {precision:.4f}')\nprint(f'Recall: {recall:.4f}')\nprint(f'F1 Score: {f1:.4f}')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 추가 학습 모델 저장 경로\nmodel_path = '/kaggle/working/SOL60_SMALLL_INDICATOR3_TCN_v3.pth'\n\n# 모델 상태 저장\ntorch.save(model.state_dict(), model_path)\nprint(f\"Model saved to {model_path}\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#모델 로드\nclass TCNModel(nn.Module):\n    def __init__(self, input_channels, num_channels, kernel_size=2, dropout=0.2):\n        super(TCNModel, self).__init__()\n        self.tcn = nn.Conv1d(input_channels, num_channels, kernel_size, padding=kernel_size//2)\n        self.relu = nn.ReLU()\n        self.dropout = nn.Dropout(dropout)\n        self.fc = nn.Linear(num_channels, 1)\n\n    def forward(self, x):\n        x = x.transpose(1, 2)  # (batch_size, seq_len, input_channels) -> (batch_size, input_channels, seq_len)\n        y1 = self.tcn(x)\n        y1 = self.relu(y1)\n        y1 = self.dropout(y1)\n        y1 = y1[:, :, -1]\n        o = self.fc(y1)\n        return o\n\n# 테스트 데이터 텐서로 변환\nX_test_tensor = torch.tensor(X_test_seq, dtype=torch.float32)\n\n# 입력 차원 확인 및 설정\ninput_channels = X_test_seq.shape[2]\nprint(f\"Input channels: {input_channels}\")\n\n# 모델 설정\nnum_channels = 64\nmodel = TCNModel(input_channels, num_channels)\n\n# 모델 로드\nmodel_path = '/kaggle/input/lstm_indiactor3/pytorch/tcn_transformer/5/SOL60_SMALLL_INDICATOR3_TCN_v4.pth'\nmodel.load_state_dict(torch.load(model_path))\nmodel.eval()\nprint(f\"Model loaded from {model_path}\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# sequence_length를 사용하여 X_test_seq의 shape를 맞춤\nX_test_tensor = torch.tensor(X_test_seq, dtype=torch.float32)\n\n# 예측 수행\nmodel.eval()\nwith torch.no_grad():\n    predictions = torch.sigmoid(model(X_test_tensor)).squeeze().numpy()\n\n# 예측 결과를 이진 분류로 변환 (0 또는 1)\npredictions = (predictions > 0.5).astype(int)\n\n# 예측 결과를 데이터프레임에 추가\ndata_test['prediction_Transformer'] = np.nan  # 예측 결과를 담을 열을 초기화\ndata_test.iloc[sequence_length - 1:sequence_length - 1 + len(predictions), data_test.columns.get_loc('prediction_Transformer')] = predictions\n\n# 결과 확인\nprint(data_test[['open_time', 'prediction_Transformer']].head())","metadata":{"execution":{"iopub.status.busy":"2024-08-06T04:02:04.208115Z","iopub.execute_input":"2024-08-06T04:02:04.208515Z","iopub.status.idle":"2024-08-06T04:02:08.612401Z","shell.execute_reply.started":"2024-08-06T04:02:04.208482Z","shell.execute_reply":"2024-08-06T04:02:08.611238Z"},"trusted":true},"execution_count":111,"outputs":[{"name":"stdout","text":"                 open_time  prediction_Transformer\n219600 2023-12-26 03:00:00                     NaN\n219601 2023-12-26 03:01:00                     NaN\n219602 2023-12-26 03:02:00                     NaN\n219603 2023-12-26 03:03:00                     NaN\n219604 2023-12-26 03:04:00                     NaN\n","output_type":"stream"}]},{"cell_type":"code","source":"data_test = data_test.dropna(subset=['prediction_Transformer'])\n# 결과 출력\ndata_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-06T04:02:08.614782Z","iopub.execute_input":"2024-08-06T04:02:08.615398Z","iopub.status.idle":"2024-08-06T04:02:08.758632Z","shell.execute_reply.started":"2024-08-06T04:02:08.615354Z","shell.execute_reply":"2024-08-06T04:02:08.757680Z"},"trusted":true},"execution_count":112,"outputs":[{"execution_count":112,"output_type":"execute_result","data":{"text/plain":"                 open_time    open    high     low   close   volume  time  \\\n219659 2023-12-26 03:59:00  119.39  119.40  119.21  119.37  2205.60   239   \n219660 2023-12-26 04:00:00  119.37  119.49  119.18  119.30  2670.35   240   \n219661 2023-12-26 04:01:00  119.30  119.38  119.12  119.22  3434.90   241   \n219662 2023-12-26 04:02:00  119.22  119.26  119.10  119.24  4044.31   242   \n219663 2023-12-26 04:03:00  119.23  119.25  119.12  119.20  3278.43   243   \n\n           atr_5    atr_10    atr_14  ...  volume_ma_20  price_ma_50  \\\n219659  0.255096  0.264981  0.268530  ...     3544.0050     118.5698   \n219660  0.266077  0.269483  0.271492  ...     3443.6540     118.5884   \n219661  0.264861  0.268535  0.270671  ...     3351.7990     118.6040   \n219662  0.243889  0.257681  0.262766  ...     3162.5455     118.6220   \n219663  0.221111  0.244913  0.253283  ...     3124.9565     118.6420   \n\n        volume_ma_50  price_ma_100  volume_ma_100  price_ma_200  \\\n219659     3688.0316      118.4187      5355.7672     119.01815   \n219660     3639.1390      118.4247      5321.0672     119.01600   \n219661     3600.5692      118.4286      5310.7998     119.01325   \n219662     3598.2706      118.4314      5314.5459     119.01080   \n219663     3576.6430      118.4355      5327.2440     119.00860   \n\n        volume_ma_200  max_return_60min  min_return_60min  \\\n219659     4939.48595          1.105805         -0.226187   \n219660     4894.57285          1.165130         -0.167645   \n219661     4879.47190          1.233015         -0.100654   \n219662     4874.29330          1.216035         -0.100637   \n219663     4857.90700          1.250000         -0.050336   \n\n        prediction_Transformer  \n219659                     1.0  \n219660                     1.0  \n219661                     1.0  \n219662                     1.0  \n219663                     1.0  \n\n[5 rows x 140 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open_time</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>time</th>\n      <th>atr_5</th>\n      <th>atr_10</th>\n      <th>atr_14</th>\n      <th>...</th>\n      <th>volume_ma_20</th>\n      <th>price_ma_50</th>\n      <th>volume_ma_50</th>\n      <th>price_ma_100</th>\n      <th>volume_ma_100</th>\n      <th>price_ma_200</th>\n      <th>volume_ma_200</th>\n      <th>max_return_60min</th>\n      <th>min_return_60min</th>\n      <th>prediction_Transformer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>219659</th>\n      <td>2023-12-26 03:59:00</td>\n      <td>119.39</td>\n      <td>119.40</td>\n      <td>119.21</td>\n      <td>119.37</td>\n      <td>2205.60</td>\n      <td>239</td>\n      <td>0.255096</td>\n      <td>0.264981</td>\n      <td>0.268530</td>\n      <td>...</td>\n      <td>3544.0050</td>\n      <td>118.5698</td>\n      <td>3688.0316</td>\n      <td>118.4187</td>\n      <td>5355.7672</td>\n      <td>119.01815</td>\n      <td>4939.48595</td>\n      <td>1.105805</td>\n      <td>-0.226187</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>219660</th>\n      <td>2023-12-26 04:00:00</td>\n      <td>119.37</td>\n      <td>119.49</td>\n      <td>119.18</td>\n      <td>119.30</td>\n      <td>2670.35</td>\n      <td>240</td>\n      <td>0.266077</td>\n      <td>0.269483</td>\n      <td>0.271492</td>\n      <td>...</td>\n      <td>3443.6540</td>\n      <td>118.5884</td>\n      <td>3639.1390</td>\n      <td>118.4247</td>\n      <td>5321.0672</td>\n      <td>119.01600</td>\n      <td>4894.57285</td>\n      <td>1.165130</td>\n      <td>-0.167645</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>219661</th>\n      <td>2023-12-26 04:01:00</td>\n      <td>119.30</td>\n      <td>119.38</td>\n      <td>119.12</td>\n      <td>119.22</td>\n      <td>3434.90</td>\n      <td>241</td>\n      <td>0.264861</td>\n      <td>0.268535</td>\n      <td>0.270671</td>\n      <td>...</td>\n      <td>3351.7990</td>\n      <td>118.6040</td>\n      <td>3600.5692</td>\n      <td>118.4286</td>\n      <td>5310.7998</td>\n      <td>119.01325</td>\n      <td>4879.47190</td>\n      <td>1.233015</td>\n      <td>-0.100654</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>219662</th>\n      <td>2023-12-26 04:02:00</td>\n      <td>119.22</td>\n      <td>119.26</td>\n      <td>119.10</td>\n      <td>119.24</td>\n      <td>4044.31</td>\n      <td>242</td>\n      <td>0.243889</td>\n      <td>0.257681</td>\n      <td>0.262766</td>\n      <td>...</td>\n      <td>3162.5455</td>\n      <td>118.6220</td>\n      <td>3598.2706</td>\n      <td>118.4314</td>\n      <td>5314.5459</td>\n      <td>119.01080</td>\n      <td>4874.29330</td>\n      <td>1.216035</td>\n      <td>-0.100637</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>219663</th>\n      <td>2023-12-26 04:03:00</td>\n      <td>119.23</td>\n      <td>119.25</td>\n      <td>119.12</td>\n      <td>119.20</td>\n      <td>3278.43</td>\n      <td>243</td>\n      <td>0.221111</td>\n      <td>0.244913</td>\n      <td>0.253283</td>\n      <td>...</td>\n      <td>3124.9565</td>\n      <td>118.6420</td>\n      <td>3576.6430</td>\n      <td>118.4355</td>\n      <td>5327.2440</td>\n      <td>119.00860</td>\n      <td>4857.90700</td>\n      <td>1.250000</td>\n      <td>-0.050336</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 140 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#2등분\ndef extract_last_half(df):\n    num_rows = len(df)\n    half_size = num_rows // 2\n    start_index = half_size\n    end_index = num_rows\n    last_half = df.iloc[start_index:end_index]\n    return last_half\n\n# 데이터프레임 2등분하여 마지막 등분 추출\ndata_test = extract_last_half(data_test)\ndata_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-06T06:04:15.892642Z","iopub.execute_input":"2024-08-06T06:04:15.893102Z","iopub.status.idle":"2024-08-06T06:04:15.916650Z","shell.execute_reply.started":"2024-08-06T06:04:15.893043Z","shell.execute_reply":"2024-08-06T06:04:15.915818Z"},"trusted":true},"execution_count":35,"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"                 open_time    open    high     low   close    volume  time  \\\n483120 2024-06-26 03:00:00  138.88  139.12  138.88  139.12  2249.703   180   \n483121 2024-06-26 03:01:00  139.13  139.28  139.12  139.21   910.810   181   \n483122 2024-06-26 03:02:00  139.22  139.22  139.10  139.19   534.078   182   \n483123 2024-06-26 03:03:00  139.18  139.26  138.90  138.91  2139.050   183   \n483124 2024-06-26 03:04:00  138.91  138.96  138.80  138.83  2011.855   184   \n\n           atr_5    atr_10    atr_14  ...  volume_ma_20  price_ma_50  \\\n483120  0.152236  0.156799  0.164093  ...    1363.81765     139.2254   \n483121  0.153789  0.157119  0.163801  ...    1332.95975     139.2182   \n483122  0.147031  0.153407  0.160672  ...    1318.04715     139.2062   \n483123  0.189625  0.174067  0.174910  ...    1395.89380     139.1854   \n483124  0.183700  0.172660  0.173845  ...    1446.83300     139.1630   \n\n        volume_ma_50  price_ma_100  volume_ma_100  price_ma_200  \\\n483120    1925.32326      138.8242     2326.37461     137.74265   \n483121    1909.30954      138.8375     2295.96989     137.75670   \n483122    1905.31326      138.8513     2283.99669     137.77060   \n483123    1905.11432      138.8635     2292.31803     137.78335   \n483124    1889.52832      138.8753     2303.04817     137.79565   \n\n        volume_ma_200  max_return_60min  min_return_60min  \\\n483120    1780.108200          0.115009         -1.020702   \n483121    1780.754935          0.035917         -1.084692   \n483122    1781.998195          0.050291         -1.070479   \n483123    1788.059035          0.208768         -0.871068   \n483124    1797.307520          0.266513         -0.813945   \n\n        prediction_Transformer  \n483120                     1.0  \n483121                     1.0  \n483122                     1.0  \n483123                     1.0  \n483124                     1.0  \n\n[5 rows x 140 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open_time</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>time</th>\n      <th>atr_5</th>\n      <th>atr_10</th>\n      <th>atr_14</th>\n      <th>...</th>\n      <th>volume_ma_20</th>\n      <th>price_ma_50</th>\n      <th>volume_ma_50</th>\n      <th>price_ma_100</th>\n      <th>volume_ma_100</th>\n      <th>price_ma_200</th>\n      <th>volume_ma_200</th>\n      <th>max_return_60min</th>\n      <th>min_return_60min</th>\n      <th>prediction_Transformer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>483120</th>\n      <td>2024-06-26 03:00:00</td>\n      <td>138.88</td>\n      <td>139.12</td>\n      <td>138.88</td>\n      <td>139.12</td>\n      <td>2249.703</td>\n      <td>180</td>\n      <td>0.152236</td>\n      <td>0.156799</td>\n      <td>0.164093</td>\n      <td>...</td>\n      <td>1363.81765</td>\n      <td>139.2254</td>\n      <td>1925.32326</td>\n      <td>138.8242</td>\n      <td>2326.37461</td>\n      <td>137.74265</td>\n      <td>1780.108200</td>\n      <td>0.115009</td>\n      <td>-1.020702</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>483121</th>\n      <td>2024-06-26 03:01:00</td>\n      <td>139.13</td>\n      <td>139.28</td>\n      <td>139.12</td>\n      <td>139.21</td>\n      <td>910.810</td>\n      <td>181</td>\n      <td>0.153789</td>\n      <td>0.157119</td>\n      <td>0.163801</td>\n      <td>...</td>\n      <td>1332.95975</td>\n      <td>139.2182</td>\n      <td>1909.30954</td>\n      <td>138.8375</td>\n      <td>2295.96989</td>\n      <td>137.75670</td>\n      <td>1780.754935</td>\n      <td>0.035917</td>\n      <td>-1.084692</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>483122</th>\n      <td>2024-06-26 03:02:00</td>\n      <td>139.22</td>\n      <td>139.22</td>\n      <td>139.10</td>\n      <td>139.19</td>\n      <td>534.078</td>\n      <td>182</td>\n      <td>0.147031</td>\n      <td>0.153407</td>\n      <td>0.160672</td>\n      <td>...</td>\n      <td>1318.04715</td>\n      <td>139.2062</td>\n      <td>1905.31326</td>\n      <td>138.8513</td>\n      <td>2283.99669</td>\n      <td>137.77060</td>\n      <td>1781.998195</td>\n      <td>0.050291</td>\n      <td>-1.070479</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>483123</th>\n      <td>2024-06-26 03:03:00</td>\n      <td>139.18</td>\n      <td>139.26</td>\n      <td>138.90</td>\n      <td>138.91</td>\n      <td>2139.050</td>\n      <td>183</td>\n      <td>0.189625</td>\n      <td>0.174067</td>\n      <td>0.174910</td>\n      <td>...</td>\n      <td>1395.89380</td>\n      <td>139.1854</td>\n      <td>1905.11432</td>\n      <td>138.8635</td>\n      <td>2292.31803</td>\n      <td>137.78335</td>\n      <td>1788.059035</td>\n      <td>0.208768</td>\n      <td>-0.871068</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>483124</th>\n      <td>2024-06-26 03:04:00</td>\n      <td>138.91</td>\n      <td>138.96</td>\n      <td>138.80</td>\n      <td>138.83</td>\n      <td>2011.855</td>\n      <td>184</td>\n      <td>0.183700</td>\n      <td>0.172660</td>\n      <td>0.173845</td>\n      <td>...</td>\n      <td>1446.83300</td>\n      <td>139.1630</td>\n      <td>1889.52832</td>\n      <td>138.8753</td>\n      <td>2303.04817</td>\n      <td>137.79565</td>\n      <td>1797.307520</td>\n      <td>0.266513</td>\n      <td>-0.813945</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 140 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#3등분\ndef extract_last_third(df):\n    num_rows = len(df)\n    third_size = num_rows // 3\n    start_index = 2 * third_size\n    end_index = num_rows\n    last_third = df.iloc[start_index:end_index]\n    return last_third\n\n# 데이터프레임 3등분하여 마지막 등분 추출\ndata_test = extract_last_third(data_test)\ndata_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-06T03:49:00.767647Z","iopub.execute_input":"2024-08-06T03:49:00.768045Z","iopub.status.idle":"2024-08-06T03:49:00.791852Z","shell.execute_reply.started":"2024-08-06T03:49:00.768010Z","shell.execute_reply":"2024-08-06T03:49:00.790986Z"},"trusted":true},"execution_count":46,"outputs":[{"execution_count":46,"output_type":"execute_result","data":{"text/plain":"                 open_time    open    high     low   close    volume  time  \\\n483139 2024-06-26 03:19:00  138.95  138.95  138.71  138.74  2719.202   199   \n483140 2024-06-26 03:20:00  138.74  138.78  138.67  138.71  1846.202   200   \n483141 2024-06-26 03:21:00  138.71  138.72  138.52  138.57  2041.675   201   \n483142 2024-06-26 03:22:00  138.57  138.59  138.47  138.47  1599.139   202   \n483143 2024-06-26 03:23:00  138.48  138.63  138.47  138.55  1222.658   203   \n\n           atr_5    atr_10    atr_14  ...  volume_ma_20  price_ma_50  \\\n483139  0.151657  0.151748  0.155117  ...    1511.48415     139.0120   \n483140  0.143325  0.147573  0.151895  ...    1491.30910     139.0056   \n483141  0.154660  0.152816  0.155331  ...    1547.85235     138.9920   \n483142  0.147728  0.149534  0.152807  ...    1601.10540     138.9740   \n483143  0.150183  0.150581  0.153321  ...    1555.28580     138.9618   \n\n        volume_ma_50  price_ma_100  volume_ma_100  price_ma_200  \\\n483139    1425.68180      139.0481     2052.40292     137.98065   \n483140    1411.63308      139.0540     2055.09375     137.99105   \n483141    1430.21264      139.0573     2040.37537     138.00145   \n483142    1420.61552      139.0590     2035.12914     138.01200   \n483143    1422.11902      139.0610     2027.93361     138.02250   \n\n        volume_ma_200  max_return_60min  min_return_60min  \\\n483139    1825.188800          0.043246         -0.965835   \n483140    1830.676935          0.064884         -0.944416   \n483141    1832.707110          0.165981         -0.844339   \n483142    1837.669590          0.238319         -0.772731   \n483143    1840.550630          0.180440         -0.830025   \n\n        prediction_Transformer  \n483139                     1.0  \n483140                     1.0  \n483141                     1.0  \n483142                     1.0  \n483143                     1.0  \n\n[5 rows x 140 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open_time</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>time</th>\n      <th>atr_5</th>\n      <th>atr_10</th>\n      <th>atr_14</th>\n      <th>...</th>\n      <th>volume_ma_20</th>\n      <th>price_ma_50</th>\n      <th>volume_ma_50</th>\n      <th>price_ma_100</th>\n      <th>volume_ma_100</th>\n      <th>price_ma_200</th>\n      <th>volume_ma_200</th>\n      <th>max_return_60min</th>\n      <th>min_return_60min</th>\n      <th>prediction_Transformer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>483139</th>\n      <td>2024-06-26 03:19:00</td>\n      <td>138.95</td>\n      <td>138.95</td>\n      <td>138.71</td>\n      <td>138.74</td>\n      <td>2719.202</td>\n      <td>199</td>\n      <td>0.151657</td>\n      <td>0.151748</td>\n      <td>0.155117</td>\n      <td>...</td>\n      <td>1511.48415</td>\n      <td>139.0120</td>\n      <td>1425.68180</td>\n      <td>139.0481</td>\n      <td>2052.40292</td>\n      <td>137.98065</td>\n      <td>1825.188800</td>\n      <td>0.043246</td>\n      <td>-0.965835</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>483140</th>\n      <td>2024-06-26 03:20:00</td>\n      <td>138.74</td>\n      <td>138.78</td>\n      <td>138.67</td>\n      <td>138.71</td>\n      <td>1846.202</td>\n      <td>200</td>\n      <td>0.143325</td>\n      <td>0.147573</td>\n      <td>0.151895</td>\n      <td>...</td>\n      <td>1491.30910</td>\n      <td>139.0056</td>\n      <td>1411.63308</td>\n      <td>139.0540</td>\n      <td>2055.09375</td>\n      <td>137.99105</td>\n      <td>1830.676935</td>\n      <td>0.064884</td>\n      <td>-0.944416</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>483141</th>\n      <td>2024-06-26 03:21:00</td>\n      <td>138.71</td>\n      <td>138.72</td>\n      <td>138.52</td>\n      <td>138.57</td>\n      <td>2041.675</td>\n      <td>201</td>\n      <td>0.154660</td>\n      <td>0.152816</td>\n      <td>0.155331</td>\n      <td>...</td>\n      <td>1547.85235</td>\n      <td>138.9920</td>\n      <td>1430.21264</td>\n      <td>139.0573</td>\n      <td>2040.37537</td>\n      <td>138.00145</td>\n      <td>1832.707110</td>\n      <td>0.165981</td>\n      <td>-0.844339</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>483142</th>\n      <td>2024-06-26 03:22:00</td>\n      <td>138.57</td>\n      <td>138.59</td>\n      <td>138.47</td>\n      <td>138.47</td>\n      <td>1599.139</td>\n      <td>202</td>\n      <td>0.147728</td>\n      <td>0.149534</td>\n      <td>0.152807</td>\n      <td>...</td>\n      <td>1601.10540</td>\n      <td>138.9740</td>\n      <td>1420.61552</td>\n      <td>139.0590</td>\n      <td>2035.12914</td>\n      <td>138.01200</td>\n      <td>1837.669590</td>\n      <td>0.238319</td>\n      <td>-0.772731</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>483143</th>\n      <td>2024-06-26 03:23:00</td>\n      <td>138.48</td>\n      <td>138.63</td>\n      <td>138.47</td>\n      <td>138.55</td>\n      <td>1222.658</td>\n      <td>203</td>\n      <td>0.150183</td>\n      <td>0.150581</td>\n      <td>0.153321</td>\n      <td>...</td>\n      <td>1555.28580</td>\n      <td>138.9618</td>\n      <td>1422.11902</td>\n      <td>139.0610</td>\n      <td>2027.93361</td>\n      <td>138.02250</td>\n      <td>1840.550630</td>\n      <td>0.180440</td>\n      <td>-0.830025</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 140 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# 4등분하여 마지막 등분을 추출하는 함수\ndef extract_last_quarter(df):\n    num_rows = len(df)\n    quarter_size = num_rows // 4\n    start_index = 3 * quarter_size\n    end_index = num_rows\n    last_quarter = df.iloc[start_index:end_index]\n    return last_quarter\n\n# 데이터프레임 4등분하여 마지막 등분 추출\ndata_test = extract_last_quarter(data_test)\ndata_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-06T03:51:12.125076Z","iopub.execute_input":"2024-08-06T03:51:12.125524Z","iopub.status.idle":"2024-08-06T03:51:12.149331Z","shell.execute_reply.started":"2024-08-06T03:51:12.125486Z","shell.execute_reply":"2024-08-06T03:51:12.148594Z"},"trusted":true},"execution_count":57,"outputs":[{"execution_count":57,"output_type":"execute_result","data":{"text/plain":"                 open_time    open    high     low   close    volume  time  \\\n483134 2024-06-26 03:14:00  139.07  139.19  139.06  139.11   787.883   194   \n483135 2024-06-26 03:15:00  139.10  139.20  139.07  139.12  2271.696   195   \n483136 2024-06-26 03:16:00  139.12  139.15  139.09  139.09   521.951   196   \n483137 2024-06-26 03:17:00  139.09  139.20  139.06  139.06   913.991   197   \n483138 2024-06-26 03:18:00  139.07  139.07  138.95  138.96  1514.901   198   \n\n           atr_5    atr_10    atr_14  ...  volume_ma_20  price_ma_50  \\\n483134  0.145700  0.155303  0.159834  ...    1380.78415     139.0218   \n483135  0.142560  0.152772  0.157703  ...    1442.50610     139.0272   \n483136  0.126048  0.143495  0.150725  ...    1405.13840     139.0282   \n483137  0.128838  0.143146  0.149958  ...    1368.73300     139.0260   \n483138  0.127071  0.140831  0.147819  ...    1407.33635     139.0194   \n\n        volume_ma_50  price_ma_100  volume_ma_100  price_ma_200  \\\n483134    1467.86050      139.0051     2128.10890     137.92030   \n483135    1428.01562      139.0171     2128.94605     137.93290   \n483136    1391.54232      139.0266     2102.59753     137.94545   \n483137    1385.12526      139.0350     2078.59059     137.95795   \n483138    1396.52946      139.0428     2056.14437     137.96985   \n\n        volume_ma_200  max_return_60min  min_return_60min  \\\n483134    1803.909785          0.064697         -1.135792   \n483135    1806.277380          0.057504         -1.142898   \n483136    1806.303700          0.079085         -1.215041   \n483137    1810.017230          0.007191         -1.193729   \n483138    1815.880925         -0.007196         -1.122625   \n\n        prediction_Transformer  \n483134                     0.0  \n483135                     0.0  \n483136                     0.0  \n483137                     0.0  \n483138                     0.0  \n\n[5 rows x 140 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open_time</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>time</th>\n      <th>atr_5</th>\n      <th>atr_10</th>\n      <th>atr_14</th>\n      <th>...</th>\n      <th>volume_ma_20</th>\n      <th>price_ma_50</th>\n      <th>volume_ma_50</th>\n      <th>price_ma_100</th>\n      <th>volume_ma_100</th>\n      <th>price_ma_200</th>\n      <th>volume_ma_200</th>\n      <th>max_return_60min</th>\n      <th>min_return_60min</th>\n      <th>prediction_Transformer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>483134</th>\n      <td>2024-06-26 03:14:00</td>\n      <td>139.07</td>\n      <td>139.19</td>\n      <td>139.06</td>\n      <td>139.11</td>\n      <td>787.883</td>\n      <td>194</td>\n      <td>0.145700</td>\n      <td>0.155303</td>\n      <td>0.159834</td>\n      <td>...</td>\n      <td>1380.78415</td>\n      <td>139.0218</td>\n      <td>1467.86050</td>\n      <td>139.0051</td>\n      <td>2128.10890</td>\n      <td>137.92030</td>\n      <td>1803.909785</td>\n      <td>0.064697</td>\n      <td>-1.135792</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483135</th>\n      <td>2024-06-26 03:15:00</td>\n      <td>139.10</td>\n      <td>139.20</td>\n      <td>139.07</td>\n      <td>139.12</td>\n      <td>2271.696</td>\n      <td>195</td>\n      <td>0.142560</td>\n      <td>0.152772</td>\n      <td>0.157703</td>\n      <td>...</td>\n      <td>1442.50610</td>\n      <td>139.0272</td>\n      <td>1428.01562</td>\n      <td>139.0171</td>\n      <td>2128.94605</td>\n      <td>137.93290</td>\n      <td>1806.277380</td>\n      <td>0.057504</td>\n      <td>-1.142898</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483136</th>\n      <td>2024-06-26 03:16:00</td>\n      <td>139.12</td>\n      <td>139.15</td>\n      <td>139.09</td>\n      <td>139.09</td>\n      <td>521.951</td>\n      <td>196</td>\n      <td>0.126048</td>\n      <td>0.143495</td>\n      <td>0.150725</td>\n      <td>...</td>\n      <td>1405.13840</td>\n      <td>139.0282</td>\n      <td>1391.54232</td>\n      <td>139.0266</td>\n      <td>2102.59753</td>\n      <td>137.94545</td>\n      <td>1806.303700</td>\n      <td>0.079085</td>\n      <td>-1.215041</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483137</th>\n      <td>2024-06-26 03:17:00</td>\n      <td>139.09</td>\n      <td>139.20</td>\n      <td>139.06</td>\n      <td>139.06</td>\n      <td>913.991</td>\n      <td>197</td>\n      <td>0.128838</td>\n      <td>0.143146</td>\n      <td>0.149958</td>\n      <td>...</td>\n      <td>1368.73300</td>\n      <td>139.0260</td>\n      <td>1385.12526</td>\n      <td>139.0350</td>\n      <td>2078.59059</td>\n      <td>137.95795</td>\n      <td>1810.017230</td>\n      <td>0.007191</td>\n      <td>-1.193729</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483138</th>\n      <td>2024-06-26 03:18:00</td>\n      <td>139.07</td>\n      <td>139.07</td>\n      <td>138.95</td>\n      <td>138.96</td>\n      <td>1514.901</td>\n      <td>198</td>\n      <td>0.127071</td>\n      <td>0.140831</td>\n      <td>0.147819</td>\n      <td>...</td>\n      <td>1407.33635</td>\n      <td>139.0194</td>\n      <td>1396.52946</td>\n      <td>139.0428</td>\n      <td>2056.14437</td>\n      <td>137.96985</td>\n      <td>1815.880925</td>\n      <td>-0.007196</td>\n      <td>-1.122625</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 140 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# 5등분하여 마지막 등분을 추출하는 함수\ndef extract_last_sixth(df):\n    num_rows = len(df)\n    fifth_size = num_rows // 5\n    start_index = 4 * fifth_size\n    end_index = num_rows\n    last_sixth = df.iloc[start_index:end_index]\n    return last_sixth\n\n# 데이터프레임 5등분하여 마지막 등분 추출\ndata_test = extract_last_sixth(data_test)\ndata_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-06T04:01:09.479120Z","iopub.execute_input":"2024-08-06T04:01:09.480053Z","iopub.status.idle":"2024-08-06T04:01:09.504149Z","shell.execute_reply.started":"2024-08-06T04:01:09.480006Z","shell.execute_reply":"2024-08-06T04:01:09.503162Z"},"trusted":true},"execution_count":104,"outputs":[{"execution_count":104,"output_type":"execute_result","data":{"text/plain":"                 open_time    open    high     low   close    volume  time  \\\n483131 2024-06-26 03:11:00  139.05  139.13  138.93  138.95  1416.722   191   \n483132 2024-06-26 03:12:00  138.95  139.00  138.93  138.99   681.457   192   \n483133 2024-06-26 03:13:00  139.00  139.10  139.00  139.06  1298.523   193   \n483134 2024-06-26 03:14:00  139.07  139.19  139.06  139.11   787.883   194   \n483135 2024-06-26 03:15:00  139.10  139.20  139.07  139.12  2271.696   195   \n\n           atr_5    atr_10    atr_14  ...  volume_ma_20  price_ma_50  \\\n483131  0.181914  0.173844  0.173535  ...    1335.52865     139.0306   \n483132  0.159531  0.163460  0.166139  ...    1341.56935     139.0232   \n483133  0.149625  0.158114  0.162129  ...    1395.76860     139.0202   \n483134  0.145700  0.155303  0.159834  ...    1380.78415     139.0218   \n483135  0.142560  0.152772  0.157703  ...    1442.50610     139.0272   \n\n        volume_ma_50  price_ma_100  volume_ma_100  price_ma_200  \\\n483131    1538.64206      138.9660     2316.22953     137.88215   \n483132    1479.77166      138.9813     2307.37870     137.89455   \n483133    1495.37404      138.9931     2137.86435     137.90740   \n483134    1467.86050      139.0051     2128.10890     137.92030   \n483135    1428.01562      139.0171     2128.94605     137.93290   \n\n        volume_ma_200  max_return_60min  min_return_60min  \\\n483131    1803.644715          0.179921         -1.021950   \n483132    1803.530610          0.151090         -1.050435   \n483133    1805.054650          0.100676         -1.100244   \n483134    1803.909785          0.064697         -1.135792   \n483135    1806.277380          0.057504         -1.142898   \n\n        prediction_Transformer  \n483131                     0.0  \n483132                     0.0  \n483133                     0.0  \n483134                     0.0  \n483135                     0.0  \n\n[5 rows x 140 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open_time</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>time</th>\n      <th>atr_5</th>\n      <th>atr_10</th>\n      <th>atr_14</th>\n      <th>...</th>\n      <th>volume_ma_20</th>\n      <th>price_ma_50</th>\n      <th>volume_ma_50</th>\n      <th>price_ma_100</th>\n      <th>volume_ma_100</th>\n      <th>price_ma_200</th>\n      <th>volume_ma_200</th>\n      <th>max_return_60min</th>\n      <th>min_return_60min</th>\n      <th>prediction_Transformer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>483131</th>\n      <td>2024-06-26 03:11:00</td>\n      <td>139.05</td>\n      <td>139.13</td>\n      <td>138.93</td>\n      <td>138.95</td>\n      <td>1416.722</td>\n      <td>191</td>\n      <td>0.181914</td>\n      <td>0.173844</td>\n      <td>0.173535</td>\n      <td>...</td>\n      <td>1335.52865</td>\n      <td>139.0306</td>\n      <td>1538.64206</td>\n      <td>138.9660</td>\n      <td>2316.22953</td>\n      <td>137.88215</td>\n      <td>1803.644715</td>\n      <td>0.179921</td>\n      <td>-1.021950</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483132</th>\n      <td>2024-06-26 03:12:00</td>\n      <td>138.95</td>\n      <td>139.00</td>\n      <td>138.93</td>\n      <td>138.99</td>\n      <td>681.457</td>\n      <td>192</td>\n      <td>0.159531</td>\n      <td>0.163460</td>\n      <td>0.166139</td>\n      <td>...</td>\n      <td>1341.56935</td>\n      <td>139.0232</td>\n      <td>1479.77166</td>\n      <td>138.9813</td>\n      <td>2307.37870</td>\n      <td>137.89455</td>\n      <td>1803.530610</td>\n      <td>0.151090</td>\n      <td>-1.050435</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483133</th>\n      <td>2024-06-26 03:13:00</td>\n      <td>139.00</td>\n      <td>139.10</td>\n      <td>139.00</td>\n      <td>139.06</td>\n      <td>1298.523</td>\n      <td>193</td>\n      <td>0.149625</td>\n      <td>0.158114</td>\n      <td>0.162129</td>\n      <td>...</td>\n      <td>1395.76860</td>\n      <td>139.0202</td>\n      <td>1495.37404</td>\n      <td>138.9931</td>\n      <td>2137.86435</td>\n      <td>137.90740</td>\n      <td>1805.054650</td>\n      <td>0.100676</td>\n      <td>-1.100244</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483134</th>\n      <td>2024-06-26 03:14:00</td>\n      <td>139.07</td>\n      <td>139.19</td>\n      <td>139.06</td>\n      <td>139.11</td>\n      <td>787.883</td>\n      <td>194</td>\n      <td>0.145700</td>\n      <td>0.155303</td>\n      <td>0.159834</td>\n      <td>...</td>\n      <td>1380.78415</td>\n      <td>139.0218</td>\n      <td>1467.86050</td>\n      <td>139.0051</td>\n      <td>2128.10890</td>\n      <td>137.92030</td>\n      <td>1803.909785</td>\n      <td>0.064697</td>\n      <td>-1.135792</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483135</th>\n      <td>2024-06-26 03:15:00</td>\n      <td>139.10</td>\n      <td>139.20</td>\n      <td>139.07</td>\n      <td>139.12</td>\n      <td>2271.696</td>\n      <td>195</td>\n      <td>0.142560</td>\n      <td>0.152772</td>\n      <td>0.157703</td>\n      <td>...</td>\n      <td>1442.50610</td>\n      <td>139.0272</td>\n      <td>1428.01562</td>\n      <td>139.0171</td>\n      <td>2128.94605</td>\n      <td>137.93290</td>\n      <td>1806.277380</td>\n      <td>0.057504</td>\n      <td>-1.142898</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 140 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# 6등분하여 마지막 등분을 추출하는 함수\ndef extract_last_sixth(df):\n    num_rows = len(df)\n    sixth_size = num_rows // 6\n    start_index = 5 * sixth_size\n    end_index = num_rows\n    last_sixth = df.iloc[start_index:end_index]\n    return last_sixth\n\n# 데이터프레임 6등분하여 마지막 등분 추출\ndata_test = extract_last_sixth(data_test)\ndata_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-06T03:54:40.024078Z","iopub.execute_input":"2024-08-06T03:54:40.024540Z","iopub.status.idle":"2024-08-06T03:54:40.049899Z","shell.execute_reply.started":"2024-08-06T03:54:40.024492Z","shell.execute_reply":"2024-08-06T03:54:40.048989Z"},"trusted":true},"execution_count":80,"outputs":[{"execution_count":80,"output_type":"execute_result","data":{"text/plain":"                 open_time    open    high     low   close    volume  time  \\\n483129 2024-06-26 03:09:00  138.96  139.03  138.81  138.98  1950.582   189   \n483130 2024-06-26 03:10:00  138.99  139.14  138.94  139.04  1982.475   190   \n483131 2024-06-26 03:11:00  139.05  139.13  138.93  138.95  1416.722   191   \n483132 2024-06-26 03:12:00  138.95  139.00  138.93  138.99   681.457   192   \n483133 2024-06-26 03:13:00  139.00  139.10  139.00  139.06  1298.523   193   \n\n           atr_5    atr_10    atr_14  ...  volume_ma_20  price_ma_50  \\\n483129  0.171740  0.167709  0.169306  ...    1303.42895     139.0496   \n483130  0.177392  0.170938  0.171499  ...    1341.89890     139.0388   \n483131  0.181914  0.173844  0.173535  ...    1335.52865     139.0306   \n483132  0.159531  0.163460  0.166139  ...    1341.56935     139.0232   \n483133  0.149625  0.158114  0.162129  ...    1395.76860     139.0202   \n\n        volume_ma_50  price_ma_100  volume_ma_100  price_ma_200  \\\n483129    1553.94752      138.9373     2314.60438     137.85655   \n483130    1549.86578      138.9512     2311.96982     137.86955   \n483131    1538.64206      138.9660     2316.22953     137.88215   \n483132    1479.77166      138.9813     2307.37870     137.89455   \n483133    1495.37404      138.9931     2137.86435     137.90740   \n\n        volume_ma_200  max_return_60min  min_return_60min  \\\n483129    1792.737895          0.158296         -0.985753   \n483130    1799.513395          0.115075         -1.086018   \n483131    1803.644715          0.179921         -1.021950   \n483132    1803.530610          0.151090         -1.050435   \n483133    1805.054650          0.100676         -1.100244   \n\n        prediction_Transformer  \n483129                     0.0  \n483130                     0.0  \n483131                     0.0  \n483132                     0.0  \n483133                     0.0  \n\n[5 rows x 140 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open_time</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>time</th>\n      <th>atr_5</th>\n      <th>atr_10</th>\n      <th>atr_14</th>\n      <th>...</th>\n      <th>volume_ma_20</th>\n      <th>price_ma_50</th>\n      <th>volume_ma_50</th>\n      <th>price_ma_100</th>\n      <th>volume_ma_100</th>\n      <th>price_ma_200</th>\n      <th>volume_ma_200</th>\n      <th>max_return_60min</th>\n      <th>min_return_60min</th>\n      <th>prediction_Transformer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>483129</th>\n      <td>2024-06-26 03:09:00</td>\n      <td>138.96</td>\n      <td>139.03</td>\n      <td>138.81</td>\n      <td>138.98</td>\n      <td>1950.582</td>\n      <td>189</td>\n      <td>0.171740</td>\n      <td>0.167709</td>\n      <td>0.169306</td>\n      <td>...</td>\n      <td>1303.42895</td>\n      <td>139.0496</td>\n      <td>1553.94752</td>\n      <td>138.9373</td>\n      <td>2314.60438</td>\n      <td>137.85655</td>\n      <td>1792.737895</td>\n      <td>0.158296</td>\n      <td>-0.985753</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483130</th>\n      <td>2024-06-26 03:10:00</td>\n      <td>138.99</td>\n      <td>139.14</td>\n      <td>138.94</td>\n      <td>139.04</td>\n      <td>1982.475</td>\n      <td>190</td>\n      <td>0.177392</td>\n      <td>0.170938</td>\n      <td>0.171499</td>\n      <td>...</td>\n      <td>1341.89890</td>\n      <td>139.0388</td>\n      <td>1549.86578</td>\n      <td>138.9512</td>\n      <td>2311.96982</td>\n      <td>137.86955</td>\n      <td>1799.513395</td>\n      <td>0.115075</td>\n      <td>-1.086018</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483131</th>\n      <td>2024-06-26 03:11:00</td>\n      <td>139.05</td>\n      <td>139.13</td>\n      <td>138.93</td>\n      <td>138.95</td>\n      <td>1416.722</td>\n      <td>191</td>\n      <td>0.181914</td>\n      <td>0.173844</td>\n      <td>0.173535</td>\n      <td>...</td>\n      <td>1335.52865</td>\n      <td>139.0306</td>\n      <td>1538.64206</td>\n      <td>138.9660</td>\n      <td>2316.22953</td>\n      <td>137.88215</td>\n      <td>1803.644715</td>\n      <td>0.179921</td>\n      <td>-1.021950</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483132</th>\n      <td>2024-06-26 03:12:00</td>\n      <td>138.95</td>\n      <td>139.00</td>\n      <td>138.93</td>\n      <td>138.99</td>\n      <td>681.457</td>\n      <td>192</td>\n      <td>0.159531</td>\n      <td>0.163460</td>\n      <td>0.166139</td>\n      <td>...</td>\n      <td>1341.56935</td>\n      <td>139.0232</td>\n      <td>1479.77166</td>\n      <td>138.9813</td>\n      <td>2307.37870</td>\n      <td>137.89455</td>\n      <td>1803.530610</td>\n      <td>0.151090</td>\n      <td>-1.050435</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483133</th>\n      <td>2024-06-26 03:13:00</td>\n      <td>139.00</td>\n      <td>139.10</td>\n      <td>139.00</td>\n      <td>139.06</td>\n      <td>1298.523</td>\n      <td>193</td>\n      <td>0.149625</td>\n      <td>0.158114</td>\n      <td>0.162129</td>\n      <td>...</td>\n      <td>1395.76860</td>\n      <td>139.0202</td>\n      <td>1495.37404</td>\n      <td>138.9931</td>\n      <td>2137.86435</td>\n      <td>137.90740</td>\n      <td>1805.054650</td>\n      <td>0.100676</td>\n      <td>-1.100244</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 140 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# 7등분하여 마지막 등분을 추출하는 함수\ndef extract_last_sixth(df):\n    num_rows = len(df)\n    sixth_size = num_rows // 7\n    start_index = 6 * sixth_size\n    end_index = num_rows\n    last_sixth = df.iloc[start_index:end_index]\n    return last_sixth\n\n# 데이터프레임 6등분하여 마지막 등분 추출\ndata_test = extract_last_sixth(data_test)\ndata_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-06T04:02:37.115390Z","iopub.execute_input":"2024-08-06T04:02:37.115825Z","iopub.status.idle":"2024-08-06T04:02:37.143558Z","shell.execute_reply.started":"2024-08-06T04:02:37.115787Z","shell.execute_reply":"2024-08-06T04:02:37.142399Z"},"trusted":true},"execution_count":114,"outputs":[{"execution_count":114,"output_type":"execute_result","data":{"text/plain":"                 open_time    open    high     low   close    volume  time  \\\n483125 2024-06-26 03:05:00  138.83  138.89  138.76  138.85  1813.918   185   \n483126 2024-06-26 03:06:00  138.85  138.91  138.77  138.86  1403.495   186   \n483127 2024-06-26 03:07:00  138.86  138.98  138.86  138.97   581.795   187   \n483128 2024-06-26 03:08:00  138.98  139.13  138.96  138.96  2525.596   188   \n483129 2024-06-26 03:09:00  138.96  139.03  138.81  138.98  1950.582   189   \n\n           atr_5    atr_10    atr_14  ...  volume_ma_20  price_ma_50  \\\n483125  0.172960  0.168394  0.170713  ...    1398.02205     139.1354   \n483126  0.166368  0.165555  0.168519  ...    1278.59125     139.1104   \n483127  0.157094  0.160999  0.165054  ...    1232.89275     139.0852   \n483128  0.159676  0.161899  0.165407  ...    1326.04545     139.0614   \n483129  0.171740  0.167709  0.169306  ...    1303.42895     139.0496   \n\n        volume_ma_50  price_ma_100  volume_ma_100  price_ma_200  \\\n483125    1732.27458      138.8868     2296.70916     137.80790   \n483126    1701.78430      138.8980     2301.88296     137.81975   \n483127    1616.46422      138.9111     2297.50881     137.83140   \n483128    1602.36816      138.9242     2304.10313     137.84375   \n483129    1553.94752      138.9373     2314.60438     137.85655   \n\n        volume_ma_200  max_return_60min  min_return_60min  \\\n483125    1804.578980          0.252071         -0.828232   \n483126    1782.116840          0.244851         -0.835374   \n483127    1776.786675          0.165503         -0.913866   \n483128    1787.504355          0.172712         -0.971503   \n483129    1792.737895          0.158296         -0.985753   \n\n        prediction_Transformer  \n483125                     0.0  \n483126                     0.0  \n483127                     0.0  \n483128                     0.0  \n483129                     0.0  \n\n[5 rows x 140 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open_time</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>time</th>\n      <th>atr_5</th>\n      <th>atr_10</th>\n      <th>atr_14</th>\n      <th>...</th>\n      <th>volume_ma_20</th>\n      <th>price_ma_50</th>\n      <th>volume_ma_50</th>\n      <th>price_ma_100</th>\n      <th>volume_ma_100</th>\n      <th>price_ma_200</th>\n      <th>volume_ma_200</th>\n      <th>max_return_60min</th>\n      <th>min_return_60min</th>\n      <th>prediction_Transformer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>483125</th>\n      <td>2024-06-26 03:05:00</td>\n      <td>138.83</td>\n      <td>138.89</td>\n      <td>138.76</td>\n      <td>138.85</td>\n      <td>1813.918</td>\n      <td>185</td>\n      <td>0.172960</td>\n      <td>0.168394</td>\n      <td>0.170713</td>\n      <td>...</td>\n      <td>1398.02205</td>\n      <td>139.1354</td>\n      <td>1732.27458</td>\n      <td>138.8868</td>\n      <td>2296.70916</td>\n      <td>137.80790</td>\n      <td>1804.578980</td>\n      <td>0.252071</td>\n      <td>-0.828232</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483126</th>\n      <td>2024-06-26 03:06:00</td>\n      <td>138.85</td>\n      <td>138.91</td>\n      <td>138.77</td>\n      <td>138.86</td>\n      <td>1403.495</td>\n      <td>186</td>\n      <td>0.166368</td>\n      <td>0.165555</td>\n      <td>0.168519</td>\n      <td>...</td>\n      <td>1278.59125</td>\n      <td>139.1104</td>\n      <td>1701.78430</td>\n      <td>138.8980</td>\n      <td>2301.88296</td>\n      <td>137.81975</td>\n      <td>1782.116840</td>\n      <td>0.244851</td>\n      <td>-0.835374</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483127</th>\n      <td>2024-06-26 03:07:00</td>\n      <td>138.86</td>\n      <td>138.98</td>\n      <td>138.86</td>\n      <td>138.97</td>\n      <td>581.795</td>\n      <td>187</td>\n      <td>0.157094</td>\n      <td>0.160999</td>\n      <td>0.165054</td>\n      <td>...</td>\n      <td>1232.89275</td>\n      <td>139.0852</td>\n      <td>1616.46422</td>\n      <td>138.9111</td>\n      <td>2297.50881</td>\n      <td>137.83140</td>\n      <td>1776.786675</td>\n      <td>0.165503</td>\n      <td>-0.913866</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483128</th>\n      <td>2024-06-26 03:08:00</td>\n      <td>138.98</td>\n      <td>139.13</td>\n      <td>138.96</td>\n      <td>138.96</td>\n      <td>2525.596</td>\n      <td>188</td>\n      <td>0.159676</td>\n      <td>0.161899</td>\n      <td>0.165407</td>\n      <td>...</td>\n      <td>1326.04545</td>\n      <td>139.0614</td>\n      <td>1602.36816</td>\n      <td>138.9242</td>\n      <td>2304.10313</td>\n      <td>137.84375</td>\n      <td>1787.504355</td>\n      <td>0.172712</td>\n      <td>-0.971503</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483129</th>\n      <td>2024-06-26 03:09:00</td>\n      <td>138.96</td>\n      <td>139.03</td>\n      <td>138.81</td>\n      <td>138.98</td>\n      <td>1950.582</td>\n      <td>189</td>\n      <td>0.171740</td>\n      <td>0.167709</td>\n      <td>0.169306</td>\n      <td>...</td>\n      <td>1303.42895</td>\n      <td>139.0496</td>\n      <td>1553.94752</td>\n      <td>138.9373</td>\n      <td>2314.60438</td>\n      <td>137.85655</td>\n      <td>1792.737895</td>\n      <td>0.158296</td>\n      <td>-0.985753</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 140 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#12등분 => 1개월\ndef extract_last_twelfth(df):\n    num_rows = len(df)\n    twelfth_size = num_rows // 12\n    start_index = 11 * twelfth_size\n    end_index = num_rows\n    last_twelfth = df.iloc[start_index:end_index]\n    return last_twelfth\n\n# 데이터프레임 12등분하여 마지막 등분 추출\ndata_test = extract_last_twelfth(data_test)\ndata_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-06T03:57:31.117911Z","iopub.execute_input":"2024-08-06T03:57:31.118351Z","iopub.status.idle":"2024-08-06T03:57:31.141102Z","shell.execute_reply.started":"2024-08-06T03:57:31.118315Z","shell.execute_reply":"2024-08-06T03:57:31.140425Z"},"trusted":true},"execution_count":94,"outputs":[{"execution_count":94,"output_type":"execute_result","data":{"text/plain":"                 open_time    open    high     low   close    volume  time  \\\n483124 2024-06-26 03:04:00  138.91  138.96  138.80  138.83  2011.855   184   \n483125 2024-06-26 03:05:00  138.83  138.89  138.76  138.85  1813.918   185   \n483126 2024-06-26 03:06:00  138.85  138.91  138.77  138.86  1403.495   186   \n483127 2024-06-26 03:07:00  138.86  138.98  138.86  138.97   581.795   187   \n483128 2024-06-26 03:08:00  138.98  139.13  138.96  138.96  2525.596   188   \n\n           atr_5    atr_10    atr_14  ...  volume_ma_20  price_ma_50  \\\n483124  0.183700  0.172660  0.173845  ...    1446.83300     139.1630   \n483125  0.172960  0.168394  0.170713  ...    1398.02205     139.1354   \n483126  0.166368  0.165555  0.168519  ...    1278.59125     139.1104   \n483127  0.157094  0.160999  0.165054  ...    1232.89275     139.0852   \n483128  0.159676  0.161899  0.165407  ...    1326.04545     139.0614   \n\n        volume_ma_50  price_ma_100  volume_ma_100  price_ma_200  \\\n483124    1889.52832      138.8753     2303.04817     137.79565   \n483125    1732.27458      138.8868     2296.70916     137.80790   \n483126    1701.78430      138.8980     2301.88296     137.81975   \n483127    1616.46422      138.9111     2297.50881     137.83140   \n483128    1602.36816      138.9242     2304.10313     137.84375   \n\n        volume_ma_200  max_return_60min  min_return_60min  \\\n483124    1797.307520          0.266513         -0.813945   \n483125    1804.578980          0.252071         -0.828232   \n483126    1782.116840          0.244851         -0.835374   \n483127    1776.786675          0.165503         -0.913866   \n483128    1787.504355          0.172712         -0.971503   \n\n        prediction_Transformer  \n483124                     0.0  \n483125                     0.0  \n483126                     0.0  \n483127                     0.0  \n483128                     0.0  \n\n[5 rows x 140 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open_time</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>time</th>\n      <th>atr_5</th>\n      <th>atr_10</th>\n      <th>atr_14</th>\n      <th>...</th>\n      <th>volume_ma_20</th>\n      <th>price_ma_50</th>\n      <th>volume_ma_50</th>\n      <th>price_ma_100</th>\n      <th>volume_ma_100</th>\n      <th>price_ma_200</th>\n      <th>volume_ma_200</th>\n      <th>max_return_60min</th>\n      <th>min_return_60min</th>\n      <th>prediction_Transformer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>483124</th>\n      <td>2024-06-26 03:04:00</td>\n      <td>138.91</td>\n      <td>138.96</td>\n      <td>138.80</td>\n      <td>138.83</td>\n      <td>2011.855</td>\n      <td>184</td>\n      <td>0.183700</td>\n      <td>0.172660</td>\n      <td>0.173845</td>\n      <td>...</td>\n      <td>1446.83300</td>\n      <td>139.1630</td>\n      <td>1889.52832</td>\n      <td>138.8753</td>\n      <td>2303.04817</td>\n      <td>137.79565</td>\n      <td>1797.307520</td>\n      <td>0.266513</td>\n      <td>-0.813945</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483125</th>\n      <td>2024-06-26 03:05:00</td>\n      <td>138.83</td>\n      <td>138.89</td>\n      <td>138.76</td>\n      <td>138.85</td>\n      <td>1813.918</td>\n      <td>185</td>\n      <td>0.172960</td>\n      <td>0.168394</td>\n      <td>0.170713</td>\n      <td>...</td>\n      <td>1398.02205</td>\n      <td>139.1354</td>\n      <td>1732.27458</td>\n      <td>138.8868</td>\n      <td>2296.70916</td>\n      <td>137.80790</td>\n      <td>1804.578980</td>\n      <td>0.252071</td>\n      <td>-0.828232</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483126</th>\n      <td>2024-06-26 03:06:00</td>\n      <td>138.85</td>\n      <td>138.91</td>\n      <td>138.77</td>\n      <td>138.86</td>\n      <td>1403.495</td>\n      <td>186</td>\n      <td>0.166368</td>\n      <td>0.165555</td>\n      <td>0.168519</td>\n      <td>...</td>\n      <td>1278.59125</td>\n      <td>139.1104</td>\n      <td>1701.78430</td>\n      <td>138.8980</td>\n      <td>2301.88296</td>\n      <td>137.81975</td>\n      <td>1782.116840</td>\n      <td>0.244851</td>\n      <td>-0.835374</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483127</th>\n      <td>2024-06-26 03:07:00</td>\n      <td>138.86</td>\n      <td>138.98</td>\n      <td>138.86</td>\n      <td>138.97</td>\n      <td>581.795</td>\n      <td>187</td>\n      <td>0.157094</td>\n      <td>0.160999</td>\n      <td>0.165054</td>\n      <td>...</td>\n      <td>1232.89275</td>\n      <td>139.0852</td>\n      <td>1616.46422</td>\n      <td>138.9111</td>\n      <td>2297.50881</td>\n      <td>137.83140</td>\n      <td>1776.786675</td>\n      <td>0.165503</td>\n      <td>-0.913866</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483128</th>\n      <td>2024-06-26 03:08:00</td>\n      <td>138.98</td>\n      <td>139.13</td>\n      <td>138.96</td>\n      <td>138.96</td>\n      <td>2525.596</td>\n      <td>188</td>\n      <td>0.159676</td>\n      <td>0.161899</td>\n      <td>0.165407</td>\n      <td>...</td>\n      <td>1326.04545</td>\n      <td>139.0614</td>\n      <td>1602.36816</td>\n      <td>138.9242</td>\n      <td>2304.10313</td>\n      <td>137.84375</td>\n      <td>1787.504355</td>\n      <td>0.172712</td>\n      <td>-0.971503</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 140 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# 'max_return_60min' 값이 1 이상이고 'prediction' 값이 0인 데이터의 개수\ncount_max_return_ge_1_prediction_0 = len(data_test[(data_test['max_return_60min'] >= 1.1) & (data_test['prediction_Transformer'] == 1)])\n\n# 'max_return_60min' 값이 1 미만이고 'prediction' 값이 1인 데이터의 개수\ncount_max_return_lt_1_prediction_1 = len(data_test[(data_test['max_return_60min'] < 1.1) & (data_test['prediction_Transformer'] == 0)])\n\nprint(f\"max_return_60min이 1 이상인데 prediction이 0인 데이터의 비율: {count_max_return_ge_1_prediction_0/len(data_test)*100}\")\nprint(f\"max_return_60min이 1 미만인데 prediction이 1인 데이터의 비율: {count_max_return_lt_1_prediction_1/len(data_test)*100}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-06T04:02:40.337048Z","iopub.execute_input":"2024-08-06T04:02:40.337969Z","iopub.status.idle":"2024-08-06T04:02:40.357945Z","shell.execute_reply.started":"2024-08-06T04:02:40.337924Z","shell.execute_reply":"2024-08-06T04:02:40.357041Z"},"trusted":true},"execution_count":115,"outputs":[{"name":"stdout","text":"max_return_60min이 1 이상인데 prediction이 0인 데이터의 비율: 4.044084160670371\nmax_return_60min이 1 미만인데 prediction이 1인 데이터의 비율: 77.37726568904272\n","output_type":"stream"}]},{"cell_type":"code","source":"# 조건을 만족하는 데이터 필터링\nfiltered_data = data_test[(data_test['max_return_60min'] >= 1.1) & (data_test['prediction_Transformer'] == 0)]\n\n# min_return_60min 값의 분포를 히스토그램으로 시각화\nplt.figure(figsize=(10, 6))\nplt.hist(filtered_data['min_return_60min'], bins=20, color='skyblue', edgecolor='black')\nplt.title('Distribution of min_return_60min for max_return_60min >= 1.1 and prediction_Transformer == 0')\nplt.xlabel('min_return_60min')\nplt.ylabel('Frequency')\nplt.grid(True)\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 함수 정의: 각 행에 대해 60행 이내의 high와 low 값을 비교하여 시각을 찾는 함수\ndef find_high_low_times(df, window=60):\n    max_high_times = []\n    min_low_times = []\n\n    for i in range(len(df)):\n        # 현재 행부터 60행 이내의 데이터를 선택\n        subset = df.iloc[i:i+window]\n\n        # 최대 high와 최소 low 값을 찾음\n        max_high_idx = subset['high'].idxmax()\n        min_low_idx = subset['low'].idxmin()\n\n        # 해당 인덱스의 시간을 저장\n        max_high_time = df.at[max_high_idx, 'open_time']\n        min_low_time = df.at[min_low_idx, 'open_time']\n\n        max_high_times.append(max_high_time)\n        min_low_times.append(min_low_time)\n\n    df['max_high_time'] = max_high_times\n    df['min_low_time'] = min_low_times\n\n    return df\n\n# 함수 호출\ndata_test = find_high_low_times(data_test)\ndata_test","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 조건에 맞는 새로운 열 추가\ndef add_condition_column(df):\n    # 'max_high_time'과 'min_low_time'이 datetime 형식인지 확인하고 변환\n    df['max_high_time'] = pd.to_datetime(df['max_high_time'])\n    df['min_low_time'] = pd.to_datetime(df['min_low_time'])\n    \n    # 조건에 맞는 행 필터링 (max_return_60min >= 1.1 및 prediction_Transformer == 1)\n    filtered_df = df[(df['max_return_60min'] >= 1.1) & (df['prediction_Transformer'] == 1)].copy()\n    \n    # 새로운 열 추가 및 초기화\n    filtered_df['condition'] = 0\n    \n    # 조건을 만족하는 경우 condition 값을 설정\n    condition_indices = filtered_df.index[filtered_df['max_high_time'] < filtered_df['min_low_time']]\n    \n    filtered_df.loc[condition_indices, 'condition'] = 1\n    \n    return filtered_df\n\n# 데이터 타입 변환\ndata_test['max_high_time'] = pd.to_datetime(data_test['max_high_time'])\ndata_test['min_low_time'] = pd.to_datetime(data_test['min_low_time'])\n\n# 조건 열 추가\nfiltered_data_test = add_condition_column(data_test)\n\n# 결과 확인\nfiltered_data_test","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"condition_1_data = filtered_data_test[filtered_data_test['condition'] == 0]\ncondition_1_data","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# max_high_time과 min_low_time의 차이를 분으로 계산하여 새로운 열 추가\ncondition_1_data['time_difference_minutes'] = (condition_1_data['max_high_time'] - condition_1_data['min_low_time']).dt.total_seconds() / 60\ncondition_1_data","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#min_low_time과 open_time의 차이를 분으로 계산하여 새로운 열 추가\ncondition_1_data['min_low_open_difference_minutes'] = (condition_1_data['max_high_time'] - condition_1_data['open_time']).dt.total_seconds() / 60\ncondition_1_data","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# time_difference_minutes의 최대, 최소, 최빈, 평균값 계산\ntime_difference_max = condition_1_data['min_low_open_difference_minutes'].max()\ntime_difference_min = condition_1_data['min_low_open_difference_minutes'].min()\ntime_difference_mode = condition_1_data['min_low_open_difference_minutes'].mode()[0]  # 최빈값이 여러 개일 경우 첫 번째 값 선택\ntime_difference_mean = condition_1_data['min_low_open_difference_minutes'].mean()\n\n# 결과 출력\ntime_difference_stats = {\n    'max': time_difference_max,\n    'min': time_difference_min,\n    'mode': time_difference_mode, #최빈\n    'mean': time_difference_mean # 평균\n}\n\ntime_difference_stats","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# min_return_60min이 -1 이하인 행들 필터링\nnegative_return_data = condition_1_data[condition_1_data['min_return_60min'] <= -1]\n\n# time_difference_minutes의 최대, 최소, 최빈, 평균값 계산\ntime_difference_max = negative_return_data['time_difference_minutes'].max()\ntime_difference_min = negative_return_data['time_difference_minutes'].min()\ntime_difference_mode = negative_return_data['time_difference_minutes'].mode()[0]  # 최빈값이 여러 개일 경우 첫 번째 값 선택\ntime_difference_mean = negative_return_data['time_difference_minutes'].mean()\n\n# 결과 출력\ntime_difference_stats = {\n    'max': time_difference_max,\n    'min': time_difference_min,\n    'mode': time_difference_mode,  # 최빈값\n    'mean': time_difference_mean   # 평균값\n}\n\ntime_difference_stats","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Transformer","metadata":{}},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader, TensorDataset","metadata":{"execution":{"iopub.status.busy":"2024-08-06T05:58:46.993366Z","iopub.execute_input":"2024-08-06T05:58:46.993663Z","iopub.status.idle":"2024-08-06T05:59:06.097799Z","shell.execute_reply.started":"2024-08-06T05:58:46.993636Z","shell.execute_reply":"2024-08-06T05:59:06.096957Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"# 학습 데이터와 검증 데이터 분리\nX_train, X_test, y_train, y_test = train_test_split(X_seq, y_seq, test_size=0.2, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-08-06T05:59:06.099143Z","iopub.execute_input":"2024-08-06T05:59:06.099397Z","iopub.status.idle":"2024-08-06T05:59:19.401982Z","shell.execute_reply.started":"2024-08-06T05:59:06.099371Z","shell.execute_reply":"2024-08-06T05:59:19.401135Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"# 데이터를 텐서로 변환\nX_train_tensor = torch.tensor(X_train, dtype=torch.float32)\ny_train_tensor = torch.tensor(y_train, dtype=torch.float32).unsqueeze(1)\nX_test_tensor = torch.tensor(X_test, dtype=torch.float32)\ny_test_tensor = torch.tensor(y_test, dtype=torch.float32).unsqueeze(1)\n\n# 데이터 로더 생성\ntrain_dataset = TensorDataset(X_train_tensor, y_train_tensor)\ntest_dataset = TensorDataset(X_test_tensor, y_test_tensor)\ntrain_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)\ntest_loader = DataLoader(test_dataset, batch_size=64, shuffle=False)","metadata":{"execution":{"iopub.status.busy":"2024-08-06T05:59:19.403124Z","iopub.execute_input":"2024-08-06T05:59:19.403377Z","iopub.status.idle":"2024-08-06T05:59:20.953633Z","shell.execute_reply.started":"2024-08-06T05:59:19.403352Z","shell.execute_reply":"2024-08-06T05:59:20.952754Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"# TransformerEncoder 모델 정의\nclass TransformerEncoderModel(nn.Module):\n    def __init__(self, input_dim, nhead, num_layers, dim_feedforward, output_dim):\n        super(TransformerEncoderModel, self).__init__()\n        self.embedding = nn.Linear(input_dim, input_dim)\n        encoder_layer = nn.TransformerEncoderLayer(d_model=input_dim, nhead=nhead, dim_feedforward=dim_feedforward, batch_first=True)\n        self.transformer_encoder = nn.TransformerEncoder(encoder_layer, num_layers=num_layers)\n        self.fc = nn.Linear(input_dim, output_dim)\n\n    def forward(self, src):\n        src = self.embedding(src)\n        output = self.transformer_encoder(src)\n        output = self.fc(output[:, -1, :])  # Use the output from the last time step\n        return output\n\n# 모델 설정\ninput_dim = X_train.shape[2]\nnhead = 2\nnum_layers = 2\ndim_feedforward = 64\noutput_dim = 1\n\nmodel = TransformerEncoderModel(input_dim, nhead, num_layers, dim_feedforward, output_dim)\n\n# 손실 함수 및 옵티마이저 설정\ncriterion = nn.BCEWithLogitsLoss()\noptimizer = optim.Adam(model.parameters(), lr=0.001)\n\n# 학습률 감소 스케줄러 설정\nscheduler = optim.lr_scheduler.StepLR(optimizer, step_size=10, gamma=0.1)\n\n# 조기 종료 설정\npatience = 5\nbest_val_loss = float('inf')\npatience_counter = 0\n\n# 학습 및 검증 손실을 저장할 리스트\ntrain_losses = []\nval_losses = []\n\n# 모델 저장 경로\nbest_model_path = \"best_transformer_model.pth\"\n\n# 모델 학습\nnum_epochs = 20  # 최대 에포크 수\nfor epoch in range(num_epochs):\n    start_time = time.time()\n    model.train()\n    running_loss = 0.0\n    for X_batch, y_batch in train_loader:\n        optimizer.zero_grad()\n        output = model(X_batch)\n        loss = criterion(output, y_batch)\n        loss.backward()\n        optimizer.step()\n        running_loss += loss.item()\n\n    avg_train_loss = running_loss / len(train_loader)\n    train_losses.append(avg_train_loss)\n\n    # 검증 단계\n    model.eval()\n    val_loss = 0.0\n    with torch.no_grad():\n        for X_batch, y_batch in test_loader:\n            output = model(X_batch)\n            loss = criterion(output, y_batch)\n            val_loss += loss.item()\n\n    avg_val_loss = val_loss / len(test_loader)\n    val_losses.append(avg_val_loss)\n\n    end_time = time.time()\n    epoch_duration = end_time - start_time\n\n    print(f'Epoch [{epoch+1}/{num_epochs}], Train Loss: {avg_train_loss:.4f}, Val Loss: {avg_val_loss:.4f}, Duration: {epoch_duration:.2f}s')\n\n    # 최적의 모델 저장 및 조기 종료 조건 체크\n    if avg_val_loss < best_val_loss:\n        best_val_loss = avg_val_loss\n        patience_counter = 0\n        torch.save(model.state_dict(), best_model_path)\n        print(f\"Best model saved with val loss: {best_val_loss:.4f}\")\n    else:\n        patience_counter += 1\n\n    if patience_counter >= patience:\n        print(\"조기 종료 조건 충족. 학습을 중지합니다.\")\n        break\n\n    # 학습률 감소\n    scheduler.step()\n\n# 학습 및 검증 손실 시각화\nplt.plot(train_losses, label='Train Loss')\nplt.plot(val_losses, label='Validation Loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()\n\n# 최적의 모델 로드\nmodel.load_state_dict(torch.load(best_model_path))\n\n# 모델 평가\nmodel.eval()\nwith torch.no_grad():\n    y_true = []\n    y_pred = []\n    for X_batch, y_batch in test_loader:\n        output = model(X_batch)\n        y_true.extend(y_batch.tolist())\n        y_pred.extend(torch.sigmoid(output).squeeze().tolist())\n\n# 이진 분류 결과를 위한 평가 지표 계산\ny_pred = np.array(y_pred) > 0.5\ny_true = y_test_tensor.numpy()\n\naccuracy = accuracy_score(y_true, y_pred)\nprecision = precision_score(y_true, y_pred)\nrecall = recall_score(y_true, y_pred)\nf1 = f1_score(y_true, y_pred)\n\nprint(f'Accuracy: {accuracy:.4f}')\nprint(f'Precision: {precision:.4f}')\nprint(f'Recall: {recall:.4f}')\nprint(f'F1 Score: {f1:.4f}')","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#2nd Account\n# 모델 저장 경로\nmodel_path = '/kaggle/working/SOL60_SMALLL_INDICATOR3_Transformer.pth'\n\n# 모델 상태 저장\ntorch.save(model.state_dict(), model_path)\nprint(f\"Model saved to {model_path}\")","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pip install ipywidgets","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from tqdm.notebook import tqdm","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# TransformerEncoder 모델 정의\nclass TransformerEncoderModel(nn.Module):\n    def __init__(self, input_dim, nhead, num_layers, dim_feedforward, output_dim):\n        super(TransformerEncoderModel, self).__init__()\n        self.embedding = nn.Linear(input_dim, input_dim)\n        encoder_layer = nn.TransformerEncoderLayer(d_model=input_dim, nhead=nhead, dim_feedforward=dim_feedforward, batch_first=True)\n        self.transformer_encoder = nn.TransformerEncoder(encoder_layer, num_layers=num_layers)\n        self.fc = nn.Linear(input_dim, output_dim)\n\n    def forward(self, src):\n        src = self.embedding(src)\n        output = self.transformer_encoder(src)\n        output = self.fc(output[:, -1, :])  # Use the output from the last time step\n        return output\n\n# 입력 차원 확인 및 설정\ninput_dim = X_train.shape[2]\nprint(f\"Input dimension: {input_dim}\")\n\n# 모델 설정 (로드할 때 필요)\nnhead = 2\nnum_layers = 2\ndim_feedforward = 64\noutput_dim = 1\n\nmodel = TransformerEncoderModel(input_dim, nhead, num_layers, dim_feedforward, output_dim)\n\n# 모델 로드\nmodel_path = '/kaggle/input/lstm_indiactor3/pytorch/tcn_transformer/6/SOL60_SMALLL_INDICATOR3_Transformer_v3.pth'\nmodel.load_state_dict(torch.load(model_path))\nmodel.train()  # 추가 학습을 위해 학습 모드로 전환\nprint(f\"Model loaded from {model_path}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-06T05:59:50.358907Z","iopub.execute_input":"2024-08-06T05:59:50.359266Z","iopub.status.idle":"2024-08-06T05:59:50.409909Z","shell.execute_reply.started":"2024-08-06T05:59:50.359238Z","shell.execute_reply":"2024-08-06T05:59:50.409073Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"Input dimension: 136\nModel loaded from /kaggle/input/lstm_indiactor3/pytorch/tcn_transformer/6/SOL60_SMALLL_INDICATOR3_Transformer_v3.pth\n","output_type":"stream"}]},{"cell_type":"code","source":"#추가학습\n\n# 손실 함수 및 옵티마이저 설정\ncriterion = nn.BCEWithLogitsLoss()\noptimizer = optim.Adam(model.parameters(), lr=0.001)\n\n# 조기 종료 설정\npatience = 5\nbest_loss = float('inf')\npatience_counter = 0\n\n# 학습 및 검증 손실을 저장할 리스트\ntrain_losses = []\nval_losses = []\n\n# 추가 학습\nnum_epochs = 100  # 최대 에포크 수\nfor epoch in range(num_epochs):\n    # 학습 단계\n    model.train()\n    running_loss = 0.0\n    for X_batch, y_batch in train_loader:\n        optimizer.zero_grad()\n        output = model(X_batch)\n        loss = criterion(output, y_batch)\n        loss.backward()\n        optimizer.step()\n        running_loss += loss.item()\n\n    avg_train_loss = running_loss / len(train_loader)\n    train_losses.append(avg_train_loss)\n\n    # 검증 단계\n    model.eval()\n    val_loss = 0.0\n    with torch.no_grad():\n        for X_batch, y_batch in test_loader:\n            output = model(X_batch)\n            loss = criterion(output, y_batch)\n            val_loss += loss.item()\n\n    avg_val_loss = val_loss / len(test_loader)\n    val_losses.append(avg_val_loss)\n\n    print(f'Epoch [{epoch+1}/{num_epochs}], Train Loss: {avg_train_loss:.4f}, Val Loss: {avg_val_loss:.4f}')\n\n    # 조기 종료 조건 체크\n    if avg_val_loss < best_loss:\n        best_loss = avg_val_loss\n        patience_counter = 0\n    else:\n        patience_counter += 1\n\n    if patience_counter >= patience:\n        print(\"조기 종료 조건 충족. 학습을 중지합니다.\")\n        break\n\n# 학습 및 검증 손실 시각화\nimport matplotlib.pyplot as plt\n\nplt.plot(train_losses, label='Train Loss')\nplt.plot(val_losses, label='Validation Loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()\n\n# 모델 평가\nmodel.eval()\nwith torch.no_grad():\n    y_true = []\n    y_pred = []\n    for X_batch, y_batch in test_loader:\n        output = model(X_batch)\n        y_true.extend(y_batch.tolist())\n        y_pred.extend(torch.sigmoid(output).squeeze().tolist())\n\n# 이진 분류 결과를 위한 평가 지표 계산\ny_pred = np.array(y_pred) > 0.5\ny_true = y_test_tensor.numpy()\n\naccuracy = accuracy_score(y_true, y_pred)\nprecision = precision_score(y_true, y_pred)\nrecall = recall_score(y_true, y_pred)\nf1 = f1_score(y_true, y_pred)\n\nprint(f'Accuracy: {accuracy:.4f}')\nprint(f'Precision: {precision:.4f}')\nprint(f'Recall: {recall:.4f}')\nprint(f'F1 Score: {f1:.4f}')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#2nd Account\n# 모델 저장 경로\nmodel_path = '/kaggle/working/SOL60_SMALLL_INDICATOR3_Transformer_v2.pth'\n\n# 모델 상태 저장\ntorch.save(model.state_dict(), model_path)\nprint(f\"Model saved to {model_path}\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 모델 평가\nmodel.eval()\nwith torch.no_grad():\n    y_true = []\n    y_pred = []\n    for X_batch, y_batch in test_loader:\n        output = model(X_batch)\n        y_true.extend(y_batch.tolist())\n        y_pred.extend(torch.sigmoid(output).squeeze().tolist())\n\n# 이진 분류 결과를 위한 평가 지표 계산\ny_pred = np.array(y_pred) > 0.5\ny_true = y_test_tensor.numpy()\n\naccuracy = accuracy_score(y_true, y_pred)\nprecision = precision_score(y_true, y_pred)\nrecall = recall_score(y_true, y_pred)\nf1 = f1_score(y_true, y_pred)\n\nprint(f'Accuracy: {accuracy:.4f}')\nprint(f'Precision: {precision:.4f}')\nprint(f'Recall: {recall:.4f}')\nprint(f'F1 Score: {f1:.4f}')","metadata":{"execution":{"iopub.status.busy":"2024-08-06T06:00:01.183644Z","iopub.execute_input":"2024-08-06T06:00:01.184000Z","iopub.status.idle":"2024-08-06T06:00:14.161396Z","shell.execute_reply.started":"2024-08-06T06:00:01.183968Z","shell.execute_reply":"2024-08-06T06:00:14.160651Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"Accuracy: 0.8111\nPrecision: 0.5636\nRecall: 0.1614\nF1 Score: 0.2509\n","output_type":"stream"}]},{"cell_type":"code","source":"X_test_tensor = torch.tensor(X_test_seq, dtype=torch.float32)\n\n# 모델 정의 (로드할 때 필요)\nclass TransformerEncoderModel(nn.Module):\n    def __init__(self, input_dim, nhead, num_layers, dim_feedforward, output_dim):\n        super(TransformerEncoderModel, self).__init__()\n        self.embedding = nn.Linear(input_dim, input_dim)\n        encoder_layer = nn.TransformerEncoderLayer(d_model=input_dim, nhead=nhead, dim_feedforward=dim_feedforward, batch_first=True)\n        self.transformer_encoder = nn.TransformerEncoder(encoder_layer, num_layers=num_layers)\n        self.fc = nn.Linear(input_dim, output_dim)\n\n    def forward(self, src):\n        src = self.embedding(src)\n        output = self.transformer_encoder(src)\n        output = self.fc(output[:, -1, :])  # Use the output from the last time step\n        return output\n\n# 입력 차원 확인 및 설정\ninput_dim = X_test_seq.shape[2]\nprint(f\"Input dimension: {input_dim}\")\n\n# 모델 설정 (로드할 때 필요)\nnhead = 2\nnum_layers = 2\ndim_feedforward = 64\noutput_dim = 1\n\nmodel = TransformerEncoderModel(input_dim, nhead, num_layers, dim_feedforward, output_dim)\n\n# 모델 로드\nmodel_path = '/kaggle/input/lstm_indiactor3/pytorch/tcn_transformer/5/SOL60_SMALLL_INDICATOR3_Transformer_v2.pth'\nmodel.load_state_dict(torch.load(model_path))\nmodel.eval()\nprint(f\"Model loaded from {model_path}\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# sequence_length를 사용하여 X_test_seq의 shape를 맞춤\nsequence_length = X_test_seq.shape[1]\nX_test_tensor = torch.tensor(X_test_seq, dtype=torch.float32).view(-1, sequence_length, input_dim)\n\n# 예측 수행\nwith torch.no_grad():\n    predictions = torch.sigmoid(model(X_test_tensor)).squeeze().numpy()\n\n# 예측 결과를 이진 분류로 변환 (0 또는 1)\npredictions = (predictions > 0.5).astype(int)\n\n# 예측 결과를 데이터프레임에 추가\ndata_test['prediction_Transformer'] = np.nan  # 예측 결과를 담을 열을 초기화\ndata_test.iloc[sequence_length - 1:sequence_length - 1 + len(predictions), data_test.columns.get_loc('prediction_Transformer')] = predictions\n\n# 결과 확인\nprint(data_test[['open_time', 'prediction_Transformer']].head())","metadata":{"execution":{"iopub.status.busy":"2024-08-06T06:23:19.532798Z","iopub.execute_input":"2024-08-06T06:23:19.533117Z","iopub.status.idle":"2024-08-06T06:24:44.642200Z","shell.execute_reply.started":"2024-08-06T06:23:19.533071Z","shell.execute_reply":"2024-08-06T06:24:44.641302Z"},"trusted":true},"execution_count":119,"outputs":[{"name":"stdout","text":"            open_time  prediction_Transformer\n0 2023-07-26 15:00:00                     NaN\n1 2023-07-26 15:01:00                     NaN\n2 2023-07-26 15:02:00                     NaN\n3 2023-07-26 15:03:00                     NaN\n4 2023-07-26 15:04:00                     NaN\n","output_type":"stream"}]},{"cell_type":"code","source":"data_test_non_nan = data_test.dropna(subset=['prediction_Transformer'])\n\n# max_return_60min 기준으로 내림차순 정렬\ndata_test_sorted = data_test_non_nan.sort_values(by='max_return_60min', ascending=False)\n\n# 결과 출력\ndata_test_sorted","metadata":{"execution":{"iopub.status.busy":"2024-08-06T06:21:49.617065Z","iopub.execute_input":"2024-08-06T06:21:49.617388Z","iopub.status.idle":"2024-08-06T06:21:50.112234Z","shell.execute_reply.started":"2024-08-06T06:21:49.617357Z","shell.execute_reply":"2024-08-06T06:21:50.111441Z"},"trusted":true},"execution_count":110,"outputs":[{"execution_count":110,"output_type":"execute_result","data":{"text/plain":"                 open_time    open    high     low   close     volume  time  \\\n231669 2024-01-03 12:09:00   92.17   92.94   85.27   85.53  109929.43   729   \n321416 2024-03-05 19:56:00  117.25  119.00  109.00  109.34  110021.08  1196   \n231670 2024-01-03 12:10:00   85.53   90.22   85.00   89.87   80984.66   730   \n377693 2024-04-13 21:53:00  127.64  128.12  127.57  128.06    8397.33  1313   \n377692 2024-04-13 21:52:00  127.14  127.71  127.07  127.64    7966.32  1312   \n...                    ...     ...     ...     ...     ...        ...   ...   \n251544 2024-01-17 07:24:00   98.65   98.68   98.52   98.56    1950.14   444   \n247186 2024-01-14 06:46:00   98.32   98.48   98.32   98.48    1913.41   406   \n277406 2024-02-04 06:26:00   97.54   97.57   97.49   97.49     724.00   386   \n263528 2024-01-25 15:08:00   87.81   88.07   87.80   87.98    1551.08   908   \n262263 2024-01-24 18:03:00   86.93   87.10   86.84   87.04    2382.60  1083   \n\n           atr_5    atr_10    atr_14  ...  volume_ma_20  price_ma_50  \\\n231669  3.526993  2.391708  1.946489  ...    42466.8325     103.1152   \n321416  4.499693  3.000784  2.468256  ...    48219.6985     128.5142   \n231670  3.865595  2.674537  2.180311  ...    45653.9050     102.8010   \n377693  0.663720  0.776110  0.860010  ...    11663.0650     127.2224   \n377692  0.692150  0.801233  0.883857  ...    11943.2635     127.2300   \n...          ...       ...       ...  ...           ...          ...   \n251544  0.148926  0.142635  0.141156  ...     1720.9105      98.5432   \n247186  0.147321  0.160725  0.166650  ...     2688.1105      98.1554   \n277406  0.091431  0.086178  0.085420  ...     1355.2445      97.6740   \n263528  0.156002  0.154296  0.158920  ...     1965.9305      87.8384   \n262263  0.168408  0.157038  0.153093  ...     3031.4470      87.2396   \n\n        volume_ma_50  price_ma_100  volume_ma_100  price_ma_200  \\\n231669    24053.5672      105.1005     17516.8163     106.96175   \n321416    27685.3074      130.6020     17862.9860     131.59270   \n231670    25584.9910      104.9152     18212.1532     106.87145   \n377693    20182.7966      126.7163     32449.9798     132.82135   \n377692    20663.1456      126.6829     33001.1616     132.87555   \n...              ...           ...            ...           ...   \n251544     1464.6530       98.4454      2681.7894      98.96390   \n247186     3053.7618       97.8324      3546.5437      97.09395   \n277406     1107.0864       97.6508      1506.8362      97.84440   \n263528     3387.1136       87.4378      2952.7823      87.58225   \n262263     3074.1806       87.2796      3611.4438      86.90705   \n\n        volume_ma_200  max_return_60min  min_return_60min  \\\n231669    11423.87535         17.701391         -0.619666   \n321416    17659.76055         12.996159         -3.969270   \n231670    11821.10850         12.017358         -0.389451   \n377693    28034.81340         10.885522          0.015618   \n377692    28145.95815         10.466938         -0.054842   \n...               ...               ...               ...   \n251544     2542.07645         -0.030438         -2.090097   \n247186     3426.97175         -0.030463         -1.198213   \n277406     1415.76480         -0.030772         -1.210381   \n263528     3361.44375         -0.034099         -2.239145   \n262263     3937.01185         -0.034467         -1.723346   \n\n        prediction_Transformer  \n231669                     1.0  \n321416                     1.0  \n231670                     1.0  \n377693                     1.0  \n377692                     1.0  \n...                        ...  \n251544                     0.0  \n247186                     0.0  \n277406                     0.0  \n263528                     0.0  \n262263                     1.0  \n\n[307382 rows x 140 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open_time</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>time</th>\n      <th>atr_5</th>\n      <th>atr_10</th>\n      <th>atr_14</th>\n      <th>...</th>\n      <th>volume_ma_20</th>\n      <th>price_ma_50</th>\n      <th>volume_ma_50</th>\n      <th>price_ma_100</th>\n      <th>volume_ma_100</th>\n      <th>price_ma_200</th>\n      <th>volume_ma_200</th>\n      <th>max_return_60min</th>\n      <th>min_return_60min</th>\n      <th>prediction_Transformer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>231669</th>\n      <td>2024-01-03 12:09:00</td>\n      <td>92.17</td>\n      <td>92.94</td>\n      <td>85.27</td>\n      <td>85.53</td>\n      <td>109929.43</td>\n      <td>729</td>\n      <td>3.526993</td>\n      <td>2.391708</td>\n      <td>1.946489</td>\n      <td>...</td>\n      <td>42466.8325</td>\n      <td>103.1152</td>\n      <td>24053.5672</td>\n      <td>105.1005</td>\n      <td>17516.8163</td>\n      <td>106.96175</td>\n      <td>11423.87535</td>\n      <td>17.701391</td>\n      <td>-0.619666</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>321416</th>\n      <td>2024-03-05 19:56:00</td>\n      <td>117.25</td>\n      <td>119.00</td>\n      <td>109.00</td>\n      <td>109.34</td>\n      <td>110021.08</td>\n      <td>1196</td>\n      <td>4.499693</td>\n      <td>3.000784</td>\n      <td>2.468256</td>\n      <td>...</td>\n      <td>48219.6985</td>\n      <td>128.5142</td>\n      <td>27685.3074</td>\n      <td>130.6020</td>\n      <td>17862.9860</td>\n      <td>131.59270</td>\n      <td>17659.76055</td>\n      <td>12.996159</td>\n      <td>-3.969270</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>231670</th>\n      <td>2024-01-03 12:10:00</td>\n      <td>85.53</td>\n      <td>90.22</td>\n      <td>85.00</td>\n      <td>89.87</td>\n      <td>80984.66</td>\n      <td>730</td>\n      <td>3.865595</td>\n      <td>2.674537</td>\n      <td>2.180311</td>\n      <td>...</td>\n      <td>45653.9050</td>\n      <td>102.8010</td>\n      <td>25584.9910</td>\n      <td>104.9152</td>\n      <td>18212.1532</td>\n      <td>106.87145</td>\n      <td>11821.10850</td>\n      <td>12.017358</td>\n      <td>-0.389451</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>377693</th>\n      <td>2024-04-13 21:53:00</td>\n      <td>127.64</td>\n      <td>128.12</td>\n      <td>127.57</td>\n      <td>128.06</td>\n      <td>8397.33</td>\n      <td>1313</td>\n      <td>0.663720</td>\n      <td>0.776110</td>\n      <td>0.860010</td>\n      <td>...</td>\n      <td>11663.0650</td>\n      <td>127.2224</td>\n      <td>20182.7966</td>\n      <td>126.7163</td>\n      <td>32449.9798</td>\n      <td>132.82135</td>\n      <td>28034.81340</td>\n      <td>10.885522</td>\n      <td>0.015618</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>377692</th>\n      <td>2024-04-13 21:52:00</td>\n      <td>127.14</td>\n      <td>127.71</td>\n      <td>127.07</td>\n      <td>127.64</td>\n      <td>7966.32</td>\n      <td>1312</td>\n      <td>0.692150</td>\n      <td>0.801233</td>\n      <td>0.883857</td>\n      <td>...</td>\n      <td>11943.2635</td>\n      <td>127.2300</td>\n      <td>20663.1456</td>\n      <td>126.6829</td>\n      <td>33001.1616</td>\n      <td>132.87555</td>\n      <td>28145.95815</td>\n      <td>10.466938</td>\n      <td>-0.054842</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>251544</th>\n      <td>2024-01-17 07:24:00</td>\n      <td>98.65</td>\n      <td>98.68</td>\n      <td>98.52</td>\n      <td>98.56</td>\n      <td>1950.14</td>\n      <td>444</td>\n      <td>0.148926</td>\n      <td>0.142635</td>\n      <td>0.141156</td>\n      <td>...</td>\n      <td>1720.9105</td>\n      <td>98.5432</td>\n      <td>1464.6530</td>\n      <td>98.4454</td>\n      <td>2681.7894</td>\n      <td>98.96390</td>\n      <td>2542.07645</td>\n      <td>-0.030438</td>\n      <td>-2.090097</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>247186</th>\n      <td>2024-01-14 06:46:00</td>\n      <td>98.32</td>\n      <td>98.48</td>\n      <td>98.32</td>\n      <td>98.48</td>\n      <td>1913.41</td>\n      <td>406</td>\n      <td>0.147321</td>\n      <td>0.160725</td>\n      <td>0.166650</td>\n      <td>...</td>\n      <td>2688.1105</td>\n      <td>98.1554</td>\n      <td>3053.7618</td>\n      <td>97.8324</td>\n      <td>3546.5437</td>\n      <td>97.09395</td>\n      <td>3426.97175</td>\n      <td>-0.030463</td>\n      <td>-1.198213</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>277406</th>\n      <td>2024-02-04 06:26:00</td>\n      <td>97.54</td>\n      <td>97.57</td>\n      <td>97.49</td>\n      <td>97.49</td>\n      <td>724.00</td>\n      <td>386</td>\n      <td>0.091431</td>\n      <td>0.086178</td>\n      <td>0.085420</td>\n      <td>...</td>\n      <td>1355.2445</td>\n      <td>97.6740</td>\n      <td>1107.0864</td>\n      <td>97.6508</td>\n      <td>1506.8362</td>\n      <td>97.84440</td>\n      <td>1415.76480</td>\n      <td>-0.030772</td>\n      <td>-1.210381</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>263528</th>\n      <td>2024-01-25 15:08:00</td>\n      <td>87.81</td>\n      <td>88.07</td>\n      <td>87.80</td>\n      <td>87.98</td>\n      <td>1551.08</td>\n      <td>908</td>\n      <td>0.156002</td>\n      <td>0.154296</td>\n      <td>0.158920</td>\n      <td>...</td>\n      <td>1965.9305</td>\n      <td>87.8384</td>\n      <td>3387.1136</td>\n      <td>87.4378</td>\n      <td>2952.7823</td>\n      <td>87.58225</td>\n      <td>3361.44375</td>\n      <td>-0.034099</td>\n      <td>-2.239145</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>262263</th>\n      <td>2024-01-24 18:03:00</td>\n      <td>86.93</td>\n      <td>87.10</td>\n      <td>86.84</td>\n      <td>87.04</td>\n      <td>2382.60</td>\n      <td>1083</td>\n      <td>0.168408</td>\n      <td>0.157038</td>\n      <td>0.153093</td>\n      <td>...</td>\n      <td>3031.4470</td>\n      <td>87.2396</td>\n      <td>3074.1806</td>\n      <td>87.2796</td>\n      <td>3611.4438</td>\n      <td>86.90705</td>\n      <td>3937.01185</td>\n      <td>-0.034467</td>\n      <td>-1.723346</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>307382 rows × 140 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#2등분\ndef extract_last_half(df):\n    num_rows = len(df)\n    half_size = num_rows // 2\n    start_index = half_size\n    end_index = num_rows\n    last_half = df.iloc[start_index:end_index]\n    return last_half\n\n# 데이터프레임 2등분하여 마지막 등분 추출\ndata_test = extract_last_half(data_test)\ndata_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-06T06:10:32.878774Z","iopub.execute_input":"2024-08-06T06:10:32.879138Z","iopub.status.idle":"2024-08-06T06:10:32.900214Z","shell.execute_reply.started":"2024-08-06T06:10:32.879102Z","shell.execute_reply":"2024-08-06T06:10:32.899434Z"},"trusted":true},"execution_count":59,"outputs":[{"execution_count":59,"output_type":"execute_result","data":{"text/plain":"                 open_time    open    high     low   close    volume  time  \\\n483120 2024-06-26 03:00:00  138.88  139.12  138.88  139.12  2249.703   180   \n483121 2024-06-26 03:01:00  139.13  139.28  139.12  139.21   910.810   181   \n483122 2024-06-26 03:02:00  139.22  139.22  139.10  139.19   534.078   182   \n483123 2024-06-26 03:03:00  139.18  139.26  138.90  138.91  2139.050   183   \n483124 2024-06-26 03:04:00  138.91  138.96  138.80  138.83  2011.855   184   \n\n           atr_5    atr_10    atr_14  ...  volume_ma_20  price_ma_50  \\\n483120  0.152236  0.156799  0.164093  ...    1363.81765     139.2254   \n483121  0.153789  0.157119  0.163801  ...    1332.95975     139.2182   \n483122  0.147031  0.153407  0.160672  ...    1318.04715     139.2062   \n483123  0.189625  0.174067  0.174910  ...    1395.89380     139.1854   \n483124  0.183700  0.172660  0.173845  ...    1446.83300     139.1630   \n\n        volume_ma_50  price_ma_100  volume_ma_100  price_ma_200  \\\n483120    1925.32326      138.8242     2326.37461     137.74265   \n483121    1909.30954      138.8375     2295.96989     137.75670   \n483122    1905.31326      138.8513     2283.99669     137.77060   \n483123    1905.11432      138.8635     2292.31803     137.78335   \n483124    1889.52832      138.8753     2303.04817     137.79565   \n\n        volume_ma_200  max_return_60min  min_return_60min  \\\n483120    1780.108200          0.115009         -1.020702   \n483121    1780.754935          0.035917         -1.084692   \n483122    1781.998195          0.050291         -1.070479   \n483123    1788.059035          0.208768         -0.871068   \n483124    1797.307520          0.266513         -0.813945   \n\n        prediction_Transformer  \n483120                     1.0  \n483121                     1.0  \n483122                     1.0  \n483123                     1.0  \n483124                     1.0  \n\n[5 rows x 140 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open_time</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>time</th>\n      <th>atr_5</th>\n      <th>atr_10</th>\n      <th>atr_14</th>\n      <th>...</th>\n      <th>volume_ma_20</th>\n      <th>price_ma_50</th>\n      <th>volume_ma_50</th>\n      <th>price_ma_100</th>\n      <th>volume_ma_100</th>\n      <th>price_ma_200</th>\n      <th>volume_ma_200</th>\n      <th>max_return_60min</th>\n      <th>min_return_60min</th>\n      <th>prediction_Transformer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>483120</th>\n      <td>2024-06-26 03:00:00</td>\n      <td>138.88</td>\n      <td>139.12</td>\n      <td>138.88</td>\n      <td>139.12</td>\n      <td>2249.703</td>\n      <td>180</td>\n      <td>0.152236</td>\n      <td>0.156799</td>\n      <td>0.164093</td>\n      <td>...</td>\n      <td>1363.81765</td>\n      <td>139.2254</td>\n      <td>1925.32326</td>\n      <td>138.8242</td>\n      <td>2326.37461</td>\n      <td>137.74265</td>\n      <td>1780.108200</td>\n      <td>0.115009</td>\n      <td>-1.020702</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>483121</th>\n      <td>2024-06-26 03:01:00</td>\n      <td>139.13</td>\n      <td>139.28</td>\n      <td>139.12</td>\n      <td>139.21</td>\n      <td>910.810</td>\n      <td>181</td>\n      <td>0.153789</td>\n      <td>0.157119</td>\n      <td>0.163801</td>\n      <td>...</td>\n      <td>1332.95975</td>\n      <td>139.2182</td>\n      <td>1909.30954</td>\n      <td>138.8375</td>\n      <td>2295.96989</td>\n      <td>137.75670</td>\n      <td>1780.754935</td>\n      <td>0.035917</td>\n      <td>-1.084692</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>483122</th>\n      <td>2024-06-26 03:02:00</td>\n      <td>139.22</td>\n      <td>139.22</td>\n      <td>139.10</td>\n      <td>139.19</td>\n      <td>534.078</td>\n      <td>182</td>\n      <td>0.147031</td>\n      <td>0.153407</td>\n      <td>0.160672</td>\n      <td>...</td>\n      <td>1318.04715</td>\n      <td>139.2062</td>\n      <td>1905.31326</td>\n      <td>138.8513</td>\n      <td>2283.99669</td>\n      <td>137.77060</td>\n      <td>1781.998195</td>\n      <td>0.050291</td>\n      <td>-1.070479</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>483123</th>\n      <td>2024-06-26 03:03:00</td>\n      <td>139.18</td>\n      <td>139.26</td>\n      <td>138.90</td>\n      <td>138.91</td>\n      <td>2139.050</td>\n      <td>183</td>\n      <td>0.189625</td>\n      <td>0.174067</td>\n      <td>0.174910</td>\n      <td>...</td>\n      <td>1395.89380</td>\n      <td>139.1854</td>\n      <td>1905.11432</td>\n      <td>138.8635</td>\n      <td>2292.31803</td>\n      <td>137.78335</td>\n      <td>1788.059035</td>\n      <td>0.208768</td>\n      <td>-0.871068</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>483124</th>\n      <td>2024-06-26 03:04:00</td>\n      <td>138.91</td>\n      <td>138.96</td>\n      <td>138.80</td>\n      <td>138.83</td>\n      <td>2011.855</td>\n      <td>184</td>\n      <td>0.183700</td>\n      <td>0.172660</td>\n      <td>0.173845</td>\n      <td>...</td>\n      <td>1446.83300</td>\n      <td>139.1630</td>\n      <td>1889.52832</td>\n      <td>138.8753</td>\n      <td>2303.04817</td>\n      <td>137.79565</td>\n      <td>1797.307520</td>\n      <td>0.266513</td>\n      <td>-0.813945</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 140 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#3등분\ndef extract_last_third(df):\n    num_rows = len(df)\n    third_size = num_rows // 3\n    start_index = 2 * third_size\n    end_index = num_rows\n    last_third = df.iloc[start_index:end_index]\n    return last_third\n\n# 데이터프레임 3등분하여 마지막 등분 추출\ndata_test = extract_last_third(data_test)\ndata_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-06T06:12:43.224242Z","iopub.execute_input":"2024-08-06T06:12:43.225033Z","iopub.status.idle":"2024-08-06T06:12:43.248566Z","shell.execute_reply.started":"2024-08-06T06:12:43.224992Z","shell.execute_reply":"2024-08-06T06:12:43.247537Z"},"trusted":true},"execution_count":70,"outputs":[{"execution_count":70,"output_type":"execute_result","data":{"text/plain":"                 open_time    open    high     low   close    volume  time  \\\n483120 2024-06-26 03:00:00  138.88  139.12  138.88  139.12  2249.703   180   \n483121 2024-06-26 03:01:00  139.13  139.28  139.12  139.21   910.810   181   \n483122 2024-06-26 03:02:00  139.22  139.22  139.10  139.19   534.078   182   \n483123 2024-06-26 03:03:00  139.18  139.26  138.90  138.91  2139.050   183   \n483124 2024-06-26 03:04:00  138.91  138.96  138.80  138.83  2011.855   184   \n\n           atr_5    atr_10    atr_14  ...  volume_ma_20  price_ma_50  \\\n483120  0.152236  0.156799  0.164093  ...    1363.81765     139.2254   \n483121  0.153789  0.157119  0.163801  ...    1332.95975     139.2182   \n483122  0.147031  0.153407  0.160672  ...    1318.04715     139.2062   \n483123  0.189625  0.174067  0.174910  ...    1395.89380     139.1854   \n483124  0.183700  0.172660  0.173845  ...    1446.83300     139.1630   \n\n        volume_ma_50  price_ma_100  volume_ma_100  price_ma_200  \\\n483120    1925.32326      138.8242     2326.37461     137.74265   \n483121    1909.30954      138.8375     2295.96989     137.75670   \n483122    1905.31326      138.8513     2283.99669     137.77060   \n483123    1905.11432      138.8635     2292.31803     137.78335   \n483124    1889.52832      138.8753     2303.04817     137.79565   \n\n        volume_ma_200  max_return_60min  min_return_60min  \\\n483120    1780.108200          0.115009         -1.020702   \n483121    1780.754935          0.035917         -1.084692   \n483122    1781.998195          0.050291         -1.070479   \n483123    1788.059035          0.208768         -0.871068   \n483124    1797.307520          0.266513         -0.813945   \n\n        prediction_Transformer  \n483120                     1.0  \n483121                     1.0  \n483122                     1.0  \n483123                     1.0  \n483124                     1.0  \n\n[5 rows x 140 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open_time</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>time</th>\n      <th>atr_5</th>\n      <th>atr_10</th>\n      <th>atr_14</th>\n      <th>...</th>\n      <th>volume_ma_20</th>\n      <th>price_ma_50</th>\n      <th>volume_ma_50</th>\n      <th>price_ma_100</th>\n      <th>volume_ma_100</th>\n      <th>price_ma_200</th>\n      <th>volume_ma_200</th>\n      <th>max_return_60min</th>\n      <th>min_return_60min</th>\n      <th>prediction_Transformer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>483120</th>\n      <td>2024-06-26 03:00:00</td>\n      <td>138.88</td>\n      <td>139.12</td>\n      <td>138.88</td>\n      <td>139.12</td>\n      <td>2249.703</td>\n      <td>180</td>\n      <td>0.152236</td>\n      <td>0.156799</td>\n      <td>0.164093</td>\n      <td>...</td>\n      <td>1363.81765</td>\n      <td>139.2254</td>\n      <td>1925.32326</td>\n      <td>138.8242</td>\n      <td>2326.37461</td>\n      <td>137.74265</td>\n      <td>1780.108200</td>\n      <td>0.115009</td>\n      <td>-1.020702</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>483121</th>\n      <td>2024-06-26 03:01:00</td>\n      <td>139.13</td>\n      <td>139.28</td>\n      <td>139.12</td>\n      <td>139.21</td>\n      <td>910.810</td>\n      <td>181</td>\n      <td>0.153789</td>\n      <td>0.157119</td>\n      <td>0.163801</td>\n      <td>...</td>\n      <td>1332.95975</td>\n      <td>139.2182</td>\n      <td>1909.30954</td>\n      <td>138.8375</td>\n      <td>2295.96989</td>\n      <td>137.75670</td>\n      <td>1780.754935</td>\n      <td>0.035917</td>\n      <td>-1.084692</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>483122</th>\n      <td>2024-06-26 03:02:00</td>\n      <td>139.22</td>\n      <td>139.22</td>\n      <td>139.10</td>\n      <td>139.19</td>\n      <td>534.078</td>\n      <td>182</td>\n      <td>0.147031</td>\n      <td>0.153407</td>\n      <td>0.160672</td>\n      <td>...</td>\n      <td>1318.04715</td>\n      <td>139.2062</td>\n      <td>1905.31326</td>\n      <td>138.8513</td>\n      <td>2283.99669</td>\n      <td>137.77060</td>\n      <td>1781.998195</td>\n      <td>0.050291</td>\n      <td>-1.070479</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>483123</th>\n      <td>2024-06-26 03:03:00</td>\n      <td>139.18</td>\n      <td>139.26</td>\n      <td>138.90</td>\n      <td>138.91</td>\n      <td>2139.050</td>\n      <td>183</td>\n      <td>0.189625</td>\n      <td>0.174067</td>\n      <td>0.174910</td>\n      <td>...</td>\n      <td>1395.89380</td>\n      <td>139.1854</td>\n      <td>1905.11432</td>\n      <td>138.8635</td>\n      <td>2292.31803</td>\n      <td>137.78335</td>\n      <td>1788.059035</td>\n      <td>0.208768</td>\n      <td>-0.871068</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>483124</th>\n      <td>2024-06-26 03:04:00</td>\n      <td>138.91</td>\n      <td>138.96</td>\n      <td>138.80</td>\n      <td>138.83</td>\n      <td>2011.855</td>\n      <td>184</td>\n      <td>0.183700</td>\n      <td>0.172660</td>\n      <td>0.173845</td>\n      <td>...</td>\n      <td>1446.83300</td>\n      <td>139.1630</td>\n      <td>1889.52832</td>\n      <td>138.8753</td>\n      <td>2303.04817</td>\n      <td>137.79565</td>\n      <td>1797.307520</td>\n      <td>0.266513</td>\n      <td>-0.813945</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 140 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# 4등분하여 마지막 등분을 추출하는 함수\ndef extract_last_quarter(df):\n    num_rows = len(df)\n    quarter_size = num_rows // 4\n    start_index = 3 * quarter_size\n    end_index = num_rows\n    last_quarter = df.iloc[start_index:end_index]\n    return last_quarter\n\n# 데이터프레임 4등분하여 마지막 등분 추출\ndata_test = extract_last_quarter(data_test)\ndata_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-06T06:14:54.001735Z","iopub.execute_input":"2024-08-06T06:14:54.002651Z","iopub.status.idle":"2024-08-06T06:14:54.025411Z","shell.execute_reply.started":"2024-08-06T06:14:54.002611Z","shell.execute_reply":"2024-08-06T06:14:54.024712Z"},"trusted":true},"execution_count":81,"outputs":[{"execution_count":81,"output_type":"execute_result","data":{"text/plain":"                 open_time    open    high     low   close    volume  time  \\\n483120 2024-06-26 03:00:00  138.88  139.12  138.88  139.12  2249.703   180   \n483121 2024-06-26 03:01:00  139.13  139.28  139.12  139.21   910.810   181   \n483122 2024-06-26 03:02:00  139.22  139.22  139.10  139.19   534.078   182   \n483123 2024-06-26 03:03:00  139.18  139.26  138.90  138.91  2139.050   183   \n483124 2024-06-26 03:04:00  138.91  138.96  138.80  138.83  2011.855   184   \n\n           atr_5    atr_10    atr_14  ...  volume_ma_20  price_ma_50  \\\n483120  0.152236  0.156799  0.164093  ...    1363.81765     139.2254   \n483121  0.153789  0.157119  0.163801  ...    1332.95975     139.2182   \n483122  0.147031  0.153407  0.160672  ...    1318.04715     139.2062   \n483123  0.189625  0.174067  0.174910  ...    1395.89380     139.1854   \n483124  0.183700  0.172660  0.173845  ...    1446.83300     139.1630   \n\n        volume_ma_50  price_ma_100  volume_ma_100  price_ma_200  \\\n483120    1925.32326      138.8242     2326.37461     137.74265   \n483121    1909.30954      138.8375     2295.96989     137.75670   \n483122    1905.31326      138.8513     2283.99669     137.77060   \n483123    1905.11432      138.8635     2292.31803     137.78335   \n483124    1889.52832      138.8753     2303.04817     137.79565   \n\n        volume_ma_200  max_return_60min  min_return_60min  \\\n483120    1780.108200          0.115009         -1.020702   \n483121    1780.754935          0.035917         -1.084692   \n483122    1781.998195          0.050291         -1.070479   \n483123    1788.059035          0.208768         -0.871068   \n483124    1797.307520          0.266513         -0.813945   \n\n        prediction_Transformer  \n483120                     0.0  \n483121                     0.0  \n483122                     0.0  \n483123                     0.0  \n483124                     0.0  \n\n[5 rows x 140 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open_time</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>time</th>\n      <th>atr_5</th>\n      <th>atr_10</th>\n      <th>atr_14</th>\n      <th>...</th>\n      <th>volume_ma_20</th>\n      <th>price_ma_50</th>\n      <th>volume_ma_50</th>\n      <th>price_ma_100</th>\n      <th>volume_ma_100</th>\n      <th>price_ma_200</th>\n      <th>volume_ma_200</th>\n      <th>max_return_60min</th>\n      <th>min_return_60min</th>\n      <th>prediction_Transformer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>483120</th>\n      <td>2024-06-26 03:00:00</td>\n      <td>138.88</td>\n      <td>139.12</td>\n      <td>138.88</td>\n      <td>139.12</td>\n      <td>2249.703</td>\n      <td>180</td>\n      <td>0.152236</td>\n      <td>0.156799</td>\n      <td>0.164093</td>\n      <td>...</td>\n      <td>1363.81765</td>\n      <td>139.2254</td>\n      <td>1925.32326</td>\n      <td>138.8242</td>\n      <td>2326.37461</td>\n      <td>137.74265</td>\n      <td>1780.108200</td>\n      <td>0.115009</td>\n      <td>-1.020702</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483121</th>\n      <td>2024-06-26 03:01:00</td>\n      <td>139.13</td>\n      <td>139.28</td>\n      <td>139.12</td>\n      <td>139.21</td>\n      <td>910.810</td>\n      <td>181</td>\n      <td>0.153789</td>\n      <td>0.157119</td>\n      <td>0.163801</td>\n      <td>...</td>\n      <td>1332.95975</td>\n      <td>139.2182</td>\n      <td>1909.30954</td>\n      <td>138.8375</td>\n      <td>2295.96989</td>\n      <td>137.75670</td>\n      <td>1780.754935</td>\n      <td>0.035917</td>\n      <td>-1.084692</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483122</th>\n      <td>2024-06-26 03:02:00</td>\n      <td>139.22</td>\n      <td>139.22</td>\n      <td>139.10</td>\n      <td>139.19</td>\n      <td>534.078</td>\n      <td>182</td>\n      <td>0.147031</td>\n      <td>0.153407</td>\n      <td>0.160672</td>\n      <td>...</td>\n      <td>1318.04715</td>\n      <td>139.2062</td>\n      <td>1905.31326</td>\n      <td>138.8513</td>\n      <td>2283.99669</td>\n      <td>137.77060</td>\n      <td>1781.998195</td>\n      <td>0.050291</td>\n      <td>-1.070479</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483123</th>\n      <td>2024-06-26 03:03:00</td>\n      <td>139.18</td>\n      <td>139.26</td>\n      <td>138.90</td>\n      <td>138.91</td>\n      <td>2139.050</td>\n      <td>183</td>\n      <td>0.189625</td>\n      <td>0.174067</td>\n      <td>0.174910</td>\n      <td>...</td>\n      <td>1395.89380</td>\n      <td>139.1854</td>\n      <td>1905.11432</td>\n      <td>138.8635</td>\n      <td>2292.31803</td>\n      <td>137.78335</td>\n      <td>1788.059035</td>\n      <td>0.208768</td>\n      <td>-0.871068</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483124</th>\n      <td>2024-06-26 03:04:00</td>\n      <td>138.91</td>\n      <td>138.96</td>\n      <td>138.80</td>\n      <td>138.83</td>\n      <td>2011.855</td>\n      <td>184</td>\n      <td>0.183700</td>\n      <td>0.172660</td>\n      <td>0.173845</td>\n      <td>...</td>\n      <td>1446.83300</td>\n      <td>139.1630</td>\n      <td>1889.52832</td>\n      <td>138.8753</td>\n      <td>2303.04817</td>\n      <td>137.79565</td>\n      <td>1797.307520</td>\n      <td>0.266513</td>\n      <td>-0.813945</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 140 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# 5등분하여 마지막 등분을 추출하는 함수\ndef extract_last_sixth(df):\n    num_rows = len(df)\n    fifth_size = num_rows // 5\n    start_index = 4 * fifth_size\n    end_index = num_rows\n    last_sixth = df.iloc[start_index:end_index]\n    return last_sixth\n\n# 데이터프레임 5등분하여 마지막 등분 추출\ndata_test = extract_last_sixth(data_test)\ndata_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-06T06:16:41.955995Z","iopub.execute_input":"2024-08-06T06:16:41.957003Z","iopub.status.idle":"2024-08-06T06:16:41.978741Z","shell.execute_reply.started":"2024-08-06T06:16:41.956959Z","shell.execute_reply":"2024-08-06T06:16:41.978050Z"},"trusted":true},"execution_count":91,"outputs":[{"execution_count":91,"output_type":"execute_result","data":{"text/plain":"                 open_time    open    high     low   close    volume  time  \\\n483120 2024-06-26 03:00:00  138.88  139.12  138.88  139.12  2249.703   180   \n483121 2024-06-26 03:01:00  139.13  139.28  139.12  139.21   910.810   181   \n483122 2024-06-26 03:02:00  139.22  139.22  139.10  139.19   534.078   182   \n483123 2024-06-26 03:03:00  139.18  139.26  138.90  138.91  2139.050   183   \n483124 2024-06-26 03:04:00  138.91  138.96  138.80  138.83  2011.855   184   \n\n           atr_5    atr_10    atr_14  ...  volume_ma_20  price_ma_50  \\\n483120  0.152236  0.156799  0.164093  ...    1363.81765     139.2254   \n483121  0.153789  0.157119  0.163801  ...    1332.95975     139.2182   \n483122  0.147031  0.153407  0.160672  ...    1318.04715     139.2062   \n483123  0.189625  0.174067  0.174910  ...    1395.89380     139.1854   \n483124  0.183700  0.172660  0.173845  ...    1446.83300     139.1630   \n\n        volume_ma_50  price_ma_100  volume_ma_100  price_ma_200  \\\n483120    1925.32326      138.8242     2326.37461     137.74265   \n483121    1909.30954      138.8375     2295.96989     137.75670   \n483122    1905.31326      138.8513     2283.99669     137.77060   \n483123    1905.11432      138.8635     2292.31803     137.78335   \n483124    1889.52832      138.8753     2303.04817     137.79565   \n\n        volume_ma_200  max_return_60min  min_return_60min  \\\n483120    1780.108200          0.115009         -1.020702   \n483121    1780.754935          0.035917         -1.084692   \n483122    1781.998195          0.050291         -1.070479   \n483123    1788.059035          0.208768         -0.871068   \n483124    1797.307520          0.266513         -0.813945   \n\n        prediction_Transformer  \n483120                     0.0  \n483121                     0.0  \n483122                     0.0  \n483123                     0.0  \n483124                     0.0  \n\n[5 rows x 140 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open_time</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>time</th>\n      <th>atr_5</th>\n      <th>atr_10</th>\n      <th>atr_14</th>\n      <th>...</th>\n      <th>volume_ma_20</th>\n      <th>price_ma_50</th>\n      <th>volume_ma_50</th>\n      <th>price_ma_100</th>\n      <th>volume_ma_100</th>\n      <th>price_ma_200</th>\n      <th>volume_ma_200</th>\n      <th>max_return_60min</th>\n      <th>min_return_60min</th>\n      <th>prediction_Transformer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>483120</th>\n      <td>2024-06-26 03:00:00</td>\n      <td>138.88</td>\n      <td>139.12</td>\n      <td>138.88</td>\n      <td>139.12</td>\n      <td>2249.703</td>\n      <td>180</td>\n      <td>0.152236</td>\n      <td>0.156799</td>\n      <td>0.164093</td>\n      <td>...</td>\n      <td>1363.81765</td>\n      <td>139.2254</td>\n      <td>1925.32326</td>\n      <td>138.8242</td>\n      <td>2326.37461</td>\n      <td>137.74265</td>\n      <td>1780.108200</td>\n      <td>0.115009</td>\n      <td>-1.020702</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483121</th>\n      <td>2024-06-26 03:01:00</td>\n      <td>139.13</td>\n      <td>139.28</td>\n      <td>139.12</td>\n      <td>139.21</td>\n      <td>910.810</td>\n      <td>181</td>\n      <td>0.153789</td>\n      <td>0.157119</td>\n      <td>0.163801</td>\n      <td>...</td>\n      <td>1332.95975</td>\n      <td>139.2182</td>\n      <td>1909.30954</td>\n      <td>138.8375</td>\n      <td>2295.96989</td>\n      <td>137.75670</td>\n      <td>1780.754935</td>\n      <td>0.035917</td>\n      <td>-1.084692</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483122</th>\n      <td>2024-06-26 03:02:00</td>\n      <td>139.22</td>\n      <td>139.22</td>\n      <td>139.10</td>\n      <td>139.19</td>\n      <td>534.078</td>\n      <td>182</td>\n      <td>0.147031</td>\n      <td>0.153407</td>\n      <td>0.160672</td>\n      <td>...</td>\n      <td>1318.04715</td>\n      <td>139.2062</td>\n      <td>1905.31326</td>\n      <td>138.8513</td>\n      <td>2283.99669</td>\n      <td>137.77060</td>\n      <td>1781.998195</td>\n      <td>0.050291</td>\n      <td>-1.070479</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483123</th>\n      <td>2024-06-26 03:03:00</td>\n      <td>139.18</td>\n      <td>139.26</td>\n      <td>138.90</td>\n      <td>138.91</td>\n      <td>2139.050</td>\n      <td>183</td>\n      <td>0.189625</td>\n      <td>0.174067</td>\n      <td>0.174910</td>\n      <td>...</td>\n      <td>1395.89380</td>\n      <td>139.1854</td>\n      <td>1905.11432</td>\n      <td>138.8635</td>\n      <td>2292.31803</td>\n      <td>137.78335</td>\n      <td>1788.059035</td>\n      <td>0.208768</td>\n      <td>-0.871068</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483124</th>\n      <td>2024-06-26 03:04:00</td>\n      <td>138.91</td>\n      <td>138.96</td>\n      <td>138.80</td>\n      <td>138.83</td>\n      <td>2011.855</td>\n      <td>184</td>\n      <td>0.183700</td>\n      <td>0.172660</td>\n      <td>0.173845</td>\n      <td>...</td>\n      <td>1446.83300</td>\n      <td>139.1630</td>\n      <td>1889.52832</td>\n      <td>138.8753</td>\n      <td>2303.04817</td>\n      <td>137.79565</td>\n      <td>1797.307520</td>\n      <td>0.266513</td>\n      <td>-0.813945</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 140 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# 6등분하여 마지막 등분을 추출하는 함수\ndef extract_last_sixth(df):\n    num_rows = len(df)\n    sixth_size = num_rows // 6\n    start_index = 5 * sixth_size\n    end_index = num_rows\n    last_sixth = df.iloc[start_index:end_index]\n    return last_sixth\n\n# 데이터프레임 6등분하여 마지막 등분 추출\ndata_test = extract_last_sixth(data_test)\ndata_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-06T06:20:04.872054Z","iopub.execute_input":"2024-08-06T06:20:04.872472Z","iopub.status.idle":"2024-08-06T06:20:04.894642Z","shell.execute_reply.started":"2024-08-06T06:20:04.872440Z","shell.execute_reply":"2024-08-06T06:20:04.893946Z"},"trusted":true},"execution_count":102,"outputs":[{"execution_count":102,"output_type":"execute_result","data":{"text/plain":"                 open_time    open    high     low   close    volume  time  \\\n483120 2024-06-26 03:00:00  138.88  139.12  138.88  139.12  2249.703   180   \n483121 2024-06-26 03:01:00  139.13  139.28  139.12  139.21   910.810   181   \n483122 2024-06-26 03:02:00  139.22  139.22  139.10  139.19   534.078   182   \n483123 2024-06-26 03:03:00  139.18  139.26  138.90  138.91  2139.050   183   \n483124 2024-06-26 03:04:00  138.91  138.96  138.80  138.83  2011.855   184   \n\n           atr_5    atr_10    atr_14  ...  volume_ma_20  price_ma_50  \\\n483120  0.152236  0.156799  0.164093  ...    1363.81765     139.2254   \n483121  0.153789  0.157119  0.163801  ...    1332.95975     139.2182   \n483122  0.147031  0.153407  0.160672  ...    1318.04715     139.2062   \n483123  0.189625  0.174067  0.174910  ...    1395.89380     139.1854   \n483124  0.183700  0.172660  0.173845  ...    1446.83300     139.1630   \n\n        volume_ma_50  price_ma_100  volume_ma_100  price_ma_200  \\\n483120    1925.32326      138.8242     2326.37461     137.74265   \n483121    1909.30954      138.8375     2295.96989     137.75670   \n483122    1905.31326      138.8513     2283.99669     137.77060   \n483123    1905.11432      138.8635     2292.31803     137.78335   \n483124    1889.52832      138.8753     2303.04817     137.79565   \n\n        volume_ma_200  max_return_60min  min_return_60min  \\\n483120    1780.108200          0.115009         -1.020702   \n483121    1780.754935          0.035917         -1.084692   \n483122    1781.998195          0.050291         -1.070479   \n483123    1788.059035          0.208768         -0.871068   \n483124    1797.307520          0.266513         -0.813945   \n\n        prediction_Transformer  \n483120                     0.0  \n483121                     0.0  \n483122                     0.0  \n483123                     0.0  \n483124                     0.0  \n\n[5 rows x 140 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open_time</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>time</th>\n      <th>atr_5</th>\n      <th>atr_10</th>\n      <th>atr_14</th>\n      <th>...</th>\n      <th>volume_ma_20</th>\n      <th>price_ma_50</th>\n      <th>volume_ma_50</th>\n      <th>price_ma_100</th>\n      <th>volume_ma_100</th>\n      <th>price_ma_200</th>\n      <th>volume_ma_200</th>\n      <th>max_return_60min</th>\n      <th>min_return_60min</th>\n      <th>prediction_Transformer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>483120</th>\n      <td>2024-06-26 03:00:00</td>\n      <td>138.88</td>\n      <td>139.12</td>\n      <td>138.88</td>\n      <td>139.12</td>\n      <td>2249.703</td>\n      <td>180</td>\n      <td>0.152236</td>\n      <td>0.156799</td>\n      <td>0.164093</td>\n      <td>...</td>\n      <td>1363.81765</td>\n      <td>139.2254</td>\n      <td>1925.32326</td>\n      <td>138.8242</td>\n      <td>2326.37461</td>\n      <td>137.74265</td>\n      <td>1780.108200</td>\n      <td>0.115009</td>\n      <td>-1.020702</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483121</th>\n      <td>2024-06-26 03:01:00</td>\n      <td>139.13</td>\n      <td>139.28</td>\n      <td>139.12</td>\n      <td>139.21</td>\n      <td>910.810</td>\n      <td>181</td>\n      <td>0.153789</td>\n      <td>0.157119</td>\n      <td>0.163801</td>\n      <td>...</td>\n      <td>1332.95975</td>\n      <td>139.2182</td>\n      <td>1909.30954</td>\n      <td>138.8375</td>\n      <td>2295.96989</td>\n      <td>137.75670</td>\n      <td>1780.754935</td>\n      <td>0.035917</td>\n      <td>-1.084692</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483122</th>\n      <td>2024-06-26 03:02:00</td>\n      <td>139.22</td>\n      <td>139.22</td>\n      <td>139.10</td>\n      <td>139.19</td>\n      <td>534.078</td>\n      <td>182</td>\n      <td>0.147031</td>\n      <td>0.153407</td>\n      <td>0.160672</td>\n      <td>...</td>\n      <td>1318.04715</td>\n      <td>139.2062</td>\n      <td>1905.31326</td>\n      <td>138.8513</td>\n      <td>2283.99669</td>\n      <td>137.77060</td>\n      <td>1781.998195</td>\n      <td>0.050291</td>\n      <td>-1.070479</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483123</th>\n      <td>2024-06-26 03:03:00</td>\n      <td>139.18</td>\n      <td>139.26</td>\n      <td>138.90</td>\n      <td>138.91</td>\n      <td>2139.050</td>\n      <td>183</td>\n      <td>0.189625</td>\n      <td>0.174067</td>\n      <td>0.174910</td>\n      <td>...</td>\n      <td>1395.89380</td>\n      <td>139.1854</td>\n      <td>1905.11432</td>\n      <td>138.8635</td>\n      <td>2292.31803</td>\n      <td>137.78335</td>\n      <td>1788.059035</td>\n      <td>0.208768</td>\n      <td>-0.871068</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483124</th>\n      <td>2024-06-26 03:04:00</td>\n      <td>138.91</td>\n      <td>138.96</td>\n      <td>138.80</td>\n      <td>138.83</td>\n      <td>2011.855</td>\n      <td>184</td>\n      <td>0.183700</td>\n      <td>0.172660</td>\n      <td>0.173845</td>\n      <td>...</td>\n      <td>1446.83300</td>\n      <td>139.1630</td>\n      <td>1889.52832</td>\n      <td>138.8753</td>\n      <td>2303.04817</td>\n      <td>137.79565</td>\n      <td>1797.307520</td>\n      <td>0.266513</td>\n      <td>-0.813945</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 140 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# 7등분하여 마지막 등분을 추출하는 함수\ndef extract_last_sixth(df):\n    num_rows = len(df)\n    sixth_size = num_rows // 7\n    start_index = 6 * sixth_size\n    end_index = num_rows\n    last_sixth = df.iloc[start_index:end_index]\n    return last_sixth\n\n# 데이터프레임 6등분하여 마지막 등분 추출\ndata_test = extract_last_sixth(data_test)\ndata_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-06T06:22:14.915516Z","iopub.execute_input":"2024-08-06T06:22:14.916524Z","iopub.status.idle":"2024-08-06T06:22:14.940705Z","shell.execute_reply.started":"2024-08-06T06:22:14.916483Z","shell.execute_reply":"2024-08-06T06:22:14.939853Z"},"trusted":true},"execution_count":112,"outputs":[{"execution_count":112,"output_type":"execute_result","data":{"text/plain":"                 open_time    open    high     low   close    volume  time  \\\n483120 2024-06-26 03:00:00  138.88  139.12  138.88  139.12  2249.703   180   \n483121 2024-06-26 03:01:00  139.13  139.28  139.12  139.21   910.810   181   \n483122 2024-06-26 03:02:00  139.22  139.22  139.10  139.19   534.078   182   \n483123 2024-06-26 03:03:00  139.18  139.26  138.90  138.91  2139.050   183   \n483124 2024-06-26 03:04:00  138.91  138.96  138.80  138.83  2011.855   184   \n\n           atr_5    atr_10    atr_14  ...  volume_ma_20  price_ma_50  \\\n483120  0.152236  0.156799  0.164093  ...    1363.81765     139.2254   \n483121  0.153789  0.157119  0.163801  ...    1332.95975     139.2182   \n483122  0.147031  0.153407  0.160672  ...    1318.04715     139.2062   \n483123  0.189625  0.174067  0.174910  ...    1395.89380     139.1854   \n483124  0.183700  0.172660  0.173845  ...    1446.83300     139.1630   \n\n        volume_ma_50  price_ma_100  volume_ma_100  price_ma_200  \\\n483120    1925.32326      138.8242     2326.37461     137.74265   \n483121    1909.30954      138.8375     2295.96989     137.75670   \n483122    1905.31326      138.8513     2283.99669     137.77060   \n483123    1905.11432      138.8635     2292.31803     137.78335   \n483124    1889.52832      138.8753     2303.04817     137.79565   \n\n        volume_ma_200  max_return_60min  min_return_60min  \\\n483120    1780.108200          0.115009         -1.020702   \n483121    1780.754935          0.035917         -1.084692   \n483122    1781.998195          0.050291         -1.070479   \n483123    1788.059035          0.208768         -0.871068   \n483124    1797.307520          0.266513         -0.813945   \n\n        prediction_Transformer  \n483120                     0.0  \n483121                     0.0  \n483122                     0.0  \n483123                     0.0  \n483124                     0.0  \n\n[5 rows x 140 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open_time</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>time</th>\n      <th>atr_5</th>\n      <th>atr_10</th>\n      <th>atr_14</th>\n      <th>...</th>\n      <th>volume_ma_20</th>\n      <th>price_ma_50</th>\n      <th>volume_ma_50</th>\n      <th>price_ma_100</th>\n      <th>volume_ma_100</th>\n      <th>price_ma_200</th>\n      <th>volume_ma_200</th>\n      <th>max_return_60min</th>\n      <th>min_return_60min</th>\n      <th>prediction_Transformer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>483120</th>\n      <td>2024-06-26 03:00:00</td>\n      <td>138.88</td>\n      <td>139.12</td>\n      <td>138.88</td>\n      <td>139.12</td>\n      <td>2249.703</td>\n      <td>180</td>\n      <td>0.152236</td>\n      <td>0.156799</td>\n      <td>0.164093</td>\n      <td>...</td>\n      <td>1363.81765</td>\n      <td>139.2254</td>\n      <td>1925.32326</td>\n      <td>138.8242</td>\n      <td>2326.37461</td>\n      <td>137.74265</td>\n      <td>1780.108200</td>\n      <td>0.115009</td>\n      <td>-1.020702</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483121</th>\n      <td>2024-06-26 03:01:00</td>\n      <td>139.13</td>\n      <td>139.28</td>\n      <td>139.12</td>\n      <td>139.21</td>\n      <td>910.810</td>\n      <td>181</td>\n      <td>0.153789</td>\n      <td>0.157119</td>\n      <td>0.163801</td>\n      <td>...</td>\n      <td>1332.95975</td>\n      <td>139.2182</td>\n      <td>1909.30954</td>\n      <td>138.8375</td>\n      <td>2295.96989</td>\n      <td>137.75670</td>\n      <td>1780.754935</td>\n      <td>0.035917</td>\n      <td>-1.084692</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483122</th>\n      <td>2024-06-26 03:02:00</td>\n      <td>139.22</td>\n      <td>139.22</td>\n      <td>139.10</td>\n      <td>139.19</td>\n      <td>534.078</td>\n      <td>182</td>\n      <td>0.147031</td>\n      <td>0.153407</td>\n      <td>0.160672</td>\n      <td>...</td>\n      <td>1318.04715</td>\n      <td>139.2062</td>\n      <td>1905.31326</td>\n      <td>138.8513</td>\n      <td>2283.99669</td>\n      <td>137.77060</td>\n      <td>1781.998195</td>\n      <td>0.050291</td>\n      <td>-1.070479</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483123</th>\n      <td>2024-06-26 03:03:00</td>\n      <td>139.18</td>\n      <td>139.26</td>\n      <td>138.90</td>\n      <td>138.91</td>\n      <td>2139.050</td>\n      <td>183</td>\n      <td>0.189625</td>\n      <td>0.174067</td>\n      <td>0.174910</td>\n      <td>...</td>\n      <td>1395.89380</td>\n      <td>139.1854</td>\n      <td>1905.11432</td>\n      <td>138.8635</td>\n      <td>2292.31803</td>\n      <td>137.78335</td>\n      <td>1788.059035</td>\n      <td>0.208768</td>\n      <td>-0.871068</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483124</th>\n      <td>2024-06-26 03:04:00</td>\n      <td>138.91</td>\n      <td>138.96</td>\n      <td>138.80</td>\n      <td>138.83</td>\n      <td>2011.855</td>\n      <td>184</td>\n      <td>0.183700</td>\n      <td>0.172660</td>\n      <td>0.173845</td>\n      <td>...</td>\n      <td>1446.83300</td>\n      <td>139.1630</td>\n      <td>1889.52832</td>\n      <td>138.8753</td>\n      <td>2303.04817</td>\n      <td>137.79565</td>\n      <td>1797.307520</td>\n      <td>0.266513</td>\n      <td>-0.813945</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 140 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#12등분 => 1개월\ndef extract_last_twelfth(df):\n    num_rows = len(df)\n    twelfth_size = num_rows // 12\n    start_index = 11 * twelfth_size\n    end_index = num_rows\n    last_twelfth = df.iloc[start_index:end_index]\n    return last_twelfth\n\n# 데이터프레임 12등분하여 마지막 등분 추출\ndata_test = extract_last_twelfth(data_test)\ndata_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-06T06:25:25.425606Z","iopub.execute_input":"2024-08-06T06:25:25.426488Z","iopub.status.idle":"2024-08-06T06:25:25.448994Z","shell.execute_reply.started":"2024-08-06T06:25:25.426447Z","shell.execute_reply":"2024-08-06T06:25:25.448310Z"},"trusted":true},"execution_count":121,"outputs":[{"execution_count":121,"output_type":"execute_result","data":{"text/plain":"                 open_time    open    high     low   close    volume  time  \\\n483120 2024-06-26 03:00:00  138.88  139.12  138.88  139.12  2249.703   180   \n483121 2024-06-26 03:01:00  139.13  139.28  139.12  139.21   910.810   181   \n483122 2024-06-26 03:02:00  139.22  139.22  139.10  139.19   534.078   182   \n483123 2024-06-26 03:03:00  139.18  139.26  138.90  138.91  2139.050   183   \n483124 2024-06-26 03:04:00  138.91  138.96  138.80  138.83  2011.855   184   \n\n           atr_5    atr_10    atr_14  ...  volume_ma_20  price_ma_50  \\\n483120  0.152236  0.156799  0.164093  ...    1363.81765     139.2254   \n483121  0.153789  0.157119  0.163801  ...    1332.95975     139.2182   \n483122  0.147031  0.153407  0.160672  ...    1318.04715     139.2062   \n483123  0.189625  0.174067  0.174910  ...    1395.89380     139.1854   \n483124  0.183700  0.172660  0.173845  ...    1446.83300     139.1630   \n\n        volume_ma_50  price_ma_100  volume_ma_100  price_ma_200  \\\n483120    1925.32326      138.8242     2326.37461     137.74265   \n483121    1909.30954      138.8375     2295.96989     137.75670   \n483122    1905.31326      138.8513     2283.99669     137.77060   \n483123    1905.11432      138.8635     2292.31803     137.78335   \n483124    1889.52832      138.8753     2303.04817     137.79565   \n\n        volume_ma_200  max_return_60min  min_return_60min  \\\n483120    1780.108200          0.115009         -1.020702   \n483121    1780.754935          0.035917         -1.084692   \n483122    1781.998195          0.050291         -1.070479   \n483123    1788.059035          0.208768         -0.871068   \n483124    1797.307520          0.266513         -0.813945   \n\n        prediction_Transformer  \n483120                     0.0  \n483121                     0.0  \n483122                     0.0  \n483123                     0.0  \n483124                     0.0  \n\n[5 rows x 140 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open_time</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>time</th>\n      <th>atr_5</th>\n      <th>atr_10</th>\n      <th>atr_14</th>\n      <th>...</th>\n      <th>volume_ma_20</th>\n      <th>price_ma_50</th>\n      <th>volume_ma_50</th>\n      <th>price_ma_100</th>\n      <th>volume_ma_100</th>\n      <th>price_ma_200</th>\n      <th>volume_ma_200</th>\n      <th>max_return_60min</th>\n      <th>min_return_60min</th>\n      <th>prediction_Transformer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>483120</th>\n      <td>2024-06-26 03:00:00</td>\n      <td>138.88</td>\n      <td>139.12</td>\n      <td>138.88</td>\n      <td>139.12</td>\n      <td>2249.703</td>\n      <td>180</td>\n      <td>0.152236</td>\n      <td>0.156799</td>\n      <td>0.164093</td>\n      <td>...</td>\n      <td>1363.81765</td>\n      <td>139.2254</td>\n      <td>1925.32326</td>\n      <td>138.8242</td>\n      <td>2326.37461</td>\n      <td>137.74265</td>\n      <td>1780.108200</td>\n      <td>0.115009</td>\n      <td>-1.020702</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483121</th>\n      <td>2024-06-26 03:01:00</td>\n      <td>139.13</td>\n      <td>139.28</td>\n      <td>139.12</td>\n      <td>139.21</td>\n      <td>910.810</td>\n      <td>181</td>\n      <td>0.153789</td>\n      <td>0.157119</td>\n      <td>0.163801</td>\n      <td>...</td>\n      <td>1332.95975</td>\n      <td>139.2182</td>\n      <td>1909.30954</td>\n      <td>138.8375</td>\n      <td>2295.96989</td>\n      <td>137.75670</td>\n      <td>1780.754935</td>\n      <td>0.035917</td>\n      <td>-1.084692</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483122</th>\n      <td>2024-06-26 03:02:00</td>\n      <td>139.22</td>\n      <td>139.22</td>\n      <td>139.10</td>\n      <td>139.19</td>\n      <td>534.078</td>\n      <td>182</td>\n      <td>0.147031</td>\n      <td>0.153407</td>\n      <td>0.160672</td>\n      <td>...</td>\n      <td>1318.04715</td>\n      <td>139.2062</td>\n      <td>1905.31326</td>\n      <td>138.8513</td>\n      <td>2283.99669</td>\n      <td>137.77060</td>\n      <td>1781.998195</td>\n      <td>0.050291</td>\n      <td>-1.070479</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483123</th>\n      <td>2024-06-26 03:03:00</td>\n      <td>139.18</td>\n      <td>139.26</td>\n      <td>138.90</td>\n      <td>138.91</td>\n      <td>2139.050</td>\n      <td>183</td>\n      <td>0.189625</td>\n      <td>0.174067</td>\n      <td>0.174910</td>\n      <td>...</td>\n      <td>1395.89380</td>\n      <td>139.1854</td>\n      <td>1905.11432</td>\n      <td>138.8635</td>\n      <td>2292.31803</td>\n      <td>137.78335</td>\n      <td>1788.059035</td>\n      <td>0.208768</td>\n      <td>-0.871068</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>483124</th>\n      <td>2024-06-26 03:04:00</td>\n      <td>138.91</td>\n      <td>138.96</td>\n      <td>138.80</td>\n      <td>138.83</td>\n      <td>2011.855</td>\n      <td>184</td>\n      <td>0.183700</td>\n      <td>0.172660</td>\n      <td>0.173845</td>\n      <td>...</td>\n      <td>1446.83300</td>\n      <td>139.1630</td>\n      <td>1889.52832</td>\n      <td>138.8753</td>\n      <td>2303.04817</td>\n      <td>137.79565</td>\n      <td>1797.307520</td>\n      <td>0.266513</td>\n      <td>-0.813945</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 140 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# 'max_return_60min' 값이 1 이상이고 'prediction' 값이 0인 데이터의 개수\ncount_max_return_ge_1_prediction_0 = len(data_test[(data_test['max_return_60min'] >= 1.1) & (data_test['prediction_Transformer'] == 1)])\n\n# 'max_return_60min' 값이 1 미만이고 'prediction' 값이 1인 데이터의 개수\ncount_max_return_lt_1_prediction_1 = len(data_test[(data_test['max_return_60min'] < 1.1) & (data_test['prediction_Transformer'] == 0)])\n\nprint(f\"max_return_60min이 1 이상인데 prediction이 0인 데이터의 비율: {count_max_return_ge_1_prediction_0/len(data_test)*100}\")\nprint(f\"max_return_60min이 1 미만인데 prediction이 1인 데이터의 비율: {count_max_return_lt_1_prediction_1/len(data_test)*100}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-06T06:25:28.054829Z","iopub.execute_input":"2024-08-06T06:25:28.055294Z","iopub.status.idle":"2024-08-06T06:25:28.074119Z","shell.execute_reply.started":"2024-08-06T06:25:28.055257Z","shell.execute_reply":"2024-08-06T06:25:28.073282Z"},"trusted":true},"execution_count":122,"outputs":[{"name":"stdout","text":"max_return_60min이 1 이상인데 prediction이 0인 데이터의 비율: 0.8720202181188953\nmax_return_60min이 1 미만인데 prediction이 1인 데이터의 비율: 82.17936750073996\n","output_type":"stream"}]},{"cell_type":"code","source":"# TransformerEncoder 모델 정의\nclass TransformerEncoderModel(nn.Module):\n    def __init__(self, input_dim, nhead, num_layers, dim_feedforward, output_dim):\n        super(TransformerEncoderModel, self).__init__()\n        encoder_layer = nn.TransformerEncoderLayer(d_model=input_dim, nhead=nhead, dim_feedforward=dim_feedforward, batch_first=True)\n        self.transformer_encoder = nn.TransformerEncoder(encoder_layer, num_layers=num_layers)\n        self.fc = nn.Linear(input_dim, output_dim)\n\n    def forward(self, src):\n        output = self.transformer_encoder(src)\n        output = self.fc(output[:, -1, :])\n        return output\n\ndef train_model(model, train_loader, criterion, optimizer, device):\n    model.train()\n    running_loss = 0.0\n    for X_batch, y_batch in train_loader:\n        X_batch, y_batch = X_batch.to(device), y_batch.to(device)\n        optimizer.zero_grad()\n        output = model(X_batch)\n        loss = criterion(output, y_batch)\n        loss.backward()\n        xm.optimizer_step(optimizer)\n        running_loss += loss.item()\n    avg_train_loss = running_loss / len(train_loader)\n    return avg_train_loss\n\ndef validate_model(model, test_loader, criterion, device):\n    model.eval()\n    val_loss = 0.0\n    with torch.no_grad():\n        for X_batch, y_batch in test_loader:\n            X_batch, y_batch = X_batch.to(device), y_batch.to(device)\n            output = model(X_batch)\n            loss = criterion(output, y_batch)\n            val_loss += loss.item()\n    avg_val_loss = val_loss / len(test_loader)\n    return avg_val_loss\n\ndef _mp_fn(rank, flags):\n    # 데이터 로더 생성\n    train_loader = pl.MpDeviceLoader(train_dataset, xm.xla_device())\n    test_loader = pl.MpDeviceLoader(test_dataset, xm.xla_device())\n    \n    input_dim = X_train.shape[2]\n    nhead = 2\n    num_layers = 2\n    dim_feedforward = 64\n    output_dim = 1\n\n    model = TransformerEncoderModel(input_dim, nhead, num_layers, dim_feedforward, output_dim).to(xm.xla_device())\n    criterion = nn.BCEWithLogitsLoss()\n    optimizer = optim.Adam(model.parameters(), lr=0.001)\n    scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=10, gamma=0.1)\n\n    patience = 5\n    best_val_loss = float('inf')\n    patience_counter = 0\n\n    train_losses = []\n    val_losses = []\n\n    num_epochs = 50\n    print_freq = 5\n\n    for epoch in range(num_epochs):\n        start_time = time.time()\n        \n        avg_train_loss = train_model(model, train_loader, criterion, optimizer, xm.xla_device())\n        train_losses.append(avg_train_loss)\n        \n        avg_val_loss = validate_model(model, test_loader, criterion, xm.xla_device())\n        val_losses.append(avg_val_loss)\n\n        end_time = time.time()\n        epoch_duration = end_time - start_time\n\n        if (epoch + 1) % print_freq == 0 or epoch == num_epochs - 1:\n            print(f'Epoch [{epoch+1}/{num_epochs}], Train Loss: {avg_train_loss:.4f}, Val Loss: {avg_val_loss:.4f}, Duration: {epoch_duration:.2f}s')\n\n        if avg_val_loss < best_val_loss:\n            best_val_loss = avg_val_loss\n            patience_counter = 0\n            xm.save(model.state_dict(), 'best_transformer_model.pth')\n        else:\n            patience_counter += 1\n\n        if patience_counter >= patience:\n            print(\"조기 종료 조건 충족. 학습을 중지합니다.\")\n            break\n\n        scheduler.step()\n\n    plt.plot(train_losses, label='Train Loss')\n    plt.plot(val_losses, label='Validation Loss')\n    plt.xlabel('Epochs')\n    plt.ylabel('Loss')\n    plt.legend()\n    plt.savefig('training_validation_loss.png')  # 학습 곡선 저장\n    plt.show()\n\n    # 모델을 반환하기 위해 로드하고 저장 경로 설정\n    model.load_state_dict(torch.load('best_transformer_model.pth'))\n    model.to(xm.xla_device())\n\n    model.eval()\n    with torch.no_grad():\n        y_true = []\n        y_pred = []\n        for X_batch, y_batch in test_loader:\n            X_batch, y_batch = X_batch.to(xm.xla_device()), y_batch.to(xm.xla_device())\n            output = model(X_batch)\n            y_true.extend(y_batch.tolist())\n            y_pred.extend(torch.sigmoid(output).squeeze().tolist())\n\n    y_pred = np.array(y_pred) > 0.5\n    y_true = y_test_tensor.numpy()\n\n    accuracy = accuracy_score(y_true, y_pred)\n    precision = precision_score(y_true, y_pred)\n    recall = recall_score(y_true, y_pred)\n    f1 = f1_score(y_true, y_pred)\n    conf_matrix = confusion_matrix(y_true, y_pred)\n\n    print(f'Accuracy: {accuracy:.4f}')\n    print(f'Precision: {precision:.4f}')\n    print(f'Recall: {recall:.4f}')\n    print(f'F1 Score: {f1:.4f}')\n\n    # 혼동 행렬 시각화\n    plt.figure(figsize=(6, 6))\n    sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['Negative', 'Positive'], yticklabels=['Negative', 'Positive'])\n    plt.xlabel('Predicted')\n    plt.ylabel('True')\n    plt.title('Confusion Matrix')\n    plt.savefig('confusion_matrix.png')  # 혼동 행렬 저장\n    plt.show()\n\n    # 모델 저장 경로\n    model_path = '/kaggle/working/SOL60_SMALLL_INDICATOR3_Transformer_v4.pth'\n    torch.save(model.state_dict(), model_path)\n    print(f\"Model saved to {model_path}\")\n\n    return model  # 모델 반환\n\nFLAGS = {}\nmodel = xmp.spawn(_mp_fn, args=(FLAGS,), nprocs=1, start_method='fork')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#2nd Account\n# 모델 저장 경로\nmodel_path = '/kaggle/working/SOL60_SMALLL_INDICATOR3_Transformer_v4.pth'\n\n# 모델 상태 저장\ntorch.save(model.state_dict(), model_path)\nprint(f\"Model saved to {model_path}\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"시간대 분석","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.impute import SimpleImputer","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#메인 데이터\ndata = pd.read_csv(\"/kaggle/input/indicator3-full/SOL60_INDICATOR3\")\n\n# Display the first few rows of the dataset to ensure it is loaded correctly\ndata.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 시간 관련 열 변환 함수\ndef convert_time_features(data):\n    # open_time 열이 datetime 형식이 아닌 경우 변환\n    if not np.issubdtype(data['open_time'].dtype, np.datetime64):\n        data['open_time'] = pd.to_datetime(data['open_time'])\n\n    # time 열을 분 단위로 변환\n    data['time'] = data['open_time'].dt.hour * 60 + data['open_time'].dt.minute\n\n    # 사용하지 않을 열 제외\n    data = data.drop(columns=['open_time', 'Unnamed: 0', 'Unnamed: 0.1'])\n    \n    return data\n# 시간 관련 열 변환\ndata = convert_time_features(data)\ndata.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 무한대 값을 NaN으로 대체\ndata.replace([np.inf, -np.inf], np.nan, inplace=True)\n\n# NaN 값을 평균으로 대체\nimputer = SimpleImputer(strategy='mean')\ndata_imputed = imputer.fit_transform(data)\n\n# numpy 배열을 다시 DataFrame으로 변환\ndata = pd.DataFrame(data_imputed, columns=data.columns)\n\ndata.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# time 열을 기준으로 그룹화하여 필요한 계산 수행\nresults = data.groupby('time').agg(\n    total_rows=('max_return_60min', 'size'),\n    count_above_1_1=('max_return_60min', lambda x: (x >= 1.1).sum())\n)\n\n# 비율 계산\nresults['percentage_above_1_1'] = (results['count_above_1_1'] / results['total_rows']) * 100\n\n# 결과 출력\nresults = results.reset_index()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 시각화\nplt.figure(figsize=(10, 6))\nplt.plot(results['time'], results['percentage_above_1_1'], marker='o', linestyle='-')\nplt.title('Percentage of max_return_60min >= 1.1 over Time')\nplt.xlabel('Time')\nplt.ylabel('Percentage of max_return_60min >= 1.1')\nplt.xticks(rotation=45)\nplt.grid(True)\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# time 값을 시-분 형식으로 변환하는 함수\ndef convert_minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{int(hours):02}:{int(mins):02}\"\n\n# time 열을 기준으로 그룹화하여 필요한 계산 수행\nresults = data.groupby('time').agg(\n    total_rows=('max_return_60min', 'size'),\n    count_above_1_1=('max_return_60min', lambda x: (x >= 1.1).sum())\n)\n\n# 비율 계산\nresults['percentage_above_1_1'] = (results['count_above_1_1'] / results['total_rows']) * 100\n\n# time 값을 시-분 형식으로 변환\nresults = results.reset_index()\nresults['time'] = results['time'].apply(convert_minutes_to_time)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# time 열을 기준으로 그룹화하여 필요한 계산 수행\nresults = data.groupby('time').agg(\n    total_rows=('max_return_60min', 'size'),\n    count_above_1_1=('max_return_60min', lambda x: (x >= 1.1).sum())\n)\n\n# 비율 계산\nresults['percentage_above_1_1'] = (results['count_above_1_1'] / results['total_rows']) * 100\n\n# 결과 출력\nresults = results.reset_index()\n\n# 슬라이딩 윈도우의 크기 설정 (예: 60분)\nwindow_size = 60\n\n# 슬라이딩 윈도우 평균 계산\nresults['rolling_mean'] = results['percentage_above_1_1'].rolling(window=window_size // 10, min_periods=1).mean()\n\n# 임계값 설정\nthreshold = 33  # 여기서 임계값을 설정하세요\n\n# 임계값 이상의 구간 필터링\nhigh_prob_zones = results[results['rolling_mean'] >= threshold]\n\n# 연속된 구간의 시작과 끝을 식별\nhigh_prob_zones['group'] = (high_prob_zones['time'].diff() > 10).cumsum()\n\n# 각 그룹의 시작과 끝 시간 구하기\ngrouped_zones = high_prob_zones.groupby('group').agg(\n    start_time=('time', 'first'),\n    end_time=('time', 'last')\n).reset_index()\n\n# 시간축 이동\nshift_point = 200\nbefore_shift = results[results['time'] < shift_point].copy()\nafter_shift = results[results['time'] >= shift_point].copy()\n\nbefore_shift['shifted_time'] = before_shift['time'] + 1440\nafter_shift['shifted_time'] = after_shift['time']\n\nresults_shifted = pd.concat([after_shift, before_shift]).reset_index(drop=True)\n\n# 시각화\nplt.figure(figsize=(12, 6))\nplt.plot(results_shifted['shifted_time'], results_shifted['percentage_above_1_1'], marker='o', linestyle='-', label='Percentage over Time')\nplt.plot(results_shifted['shifted_time'], results_shifted['rolling_mean'], linestyle='-', color='orange', label='Rolling Mean')\n\n# 임계값 선 추가\nplt.axhline(y=threshold, color='purple', linestyle='-', label=f'Threshold {threshold}%')\n\n# 영역 색칠\nplt.fill_between(results_shifted['shifted_time'], threshold, results_shifted['percentage_above_1_1'], where=(results_shifted['percentage_above_1_1'] >= threshold), interpolate=True, color='purple', alpha=0.3)\n\n# 높은 확률 구간에서 시작과 끝 구간만 표시\nfor _, row in grouped_zones.iterrows():\n    if row['start_time'] < shift_point:\n        shifted_start_time = row['start_time'] + 1440\n    else:\n        shifted_start_time = row['start_time']\n    if row['end_time'] < shift_point:\n        shifted_end_time = row['end_time'] + 1440\n    else:\n        shifted_end_time = row['end_time']\n    plt.axvline(x=shifted_start_time, color='red', linestyle='--', label='Start Time' if row['start_time'] == grouped_zones['start_time'].iloc[0] else \"\")\n    plt.axvline(x=shifted_end_time, color='green', linestyle='--', label='End Time' if row['end_time'] == grouped_zones['end_time'].iloc[0] else \"\")\n\n# 0 지점을 나타내는 세로선 추가\nplt.axvline(x=shift_point, color='blue', linestyle=':', label='Midnight Transition')\n\nplt.title('Percentage of max_return_60min >= 1.1 over Time')\nplt.xlabel('Time (minutes)')\nplt.ylabel('Percentage of max_return_60min >= 1.1')\nplt.xticks(rotation=45)\nplt.xlim(shift_point, 1440 + shift_point)\nplt.xticks(np.arange(shift_point, 1440 + shift_point + 1, 100), labels=[str(x % 1440) for x in np.arange(shift_point, 1440 + shift_point + 1, 100)])\nplt.xticks(list(plt.xticks()[0]) + [0], labels=list(plt.xticks()[1]) + ['0'])  # 0을 x축에 추가\nplt.grid(True)\nplt.legend()\nplt.tight_layout()\nplt.show()\n\n# 분을 시-분 형식으로 변환하는 함수\ndef convert_minutes_to_time(minutes):\n    hours = minutes // 60\n    mins = minutes % 60\n    return f\"{int(hours):02}:{int(mins):02}\"\n\n# 한국 시간으로 변환하는 함수\ndef convert_to_kst(utc_minutes):\n    kst_minutes = (utc_minutes + 540) % 1440  # 한국 시간은 UTC+9 (540분)\n    return convert_minutes_to_time(kst_minutes)\n\n# 높은 확률 구간 시작과 끝 값 출력\nprint(f\"High probability zones above {threshold}% (start_time, end_time):\")\nfor _, row in grouped_zones.iterrows():\n    start_time_utc = convert_minutes_to_time(row['start_time'])\n    end_time_utc = convert_minutes_to_time(row['end_time'])\n    start_time_kst = convert_to_kst(row['start_time'])\n    end_time_kst = convert_to_kst(row['end_time'])\n    print(f\"Start: {start_time_utc} (KST: {start_time_kst}), End: {end_time_utc} (KST: {end_time_kst})\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"요일분석","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.impute import SimpleImputer","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#메인 데이터\ndata = pd.read_csv(\"/kaggle/input/indicator3-full/SOL60_INDICATOR3\")\n\n# Display the first few rows of the dataset to ensure it is loaded correctly\ndata.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 시간 관련 열 변환 함수\ndef convert_time_features(data):\n    # open_time 열이 datetime 형식이 아닌 경우 변환\n    if not np.issubdtype(data['open_time'].dtype, np.datetime64):\n        data['open_time'] = pd.to_datetime(data['open_time'])\n        \n    # 요일 추출하여 data_day 변수에 저장\n    data_day = data['open_time'].dt.day_name()\n    \n    # time 열을 분 단위로 변환\n    data['time'] = data['open_time'].dt.hour * 60 + data['open_time'].dt.minute    \n    \n    # 사용하지 않을 열 제외\n    data = data.drop(columns=['open_time', 'Unnamed: 0', 'Unnamed: 0.1'])\n    \n    # 무한대 값을 NaN으로 대체\n    data.replace([np.inf, -np.inf], np.nan, inplace=True)\n\n    # NaN 값을 평균으로 대체\n    imputer = SimpleImputer(strategy='mean')\n    data_imputed = imputer.fit_transform(data)\n\n    # numpy 배열을 다시 DataFrame으로 변환\n    data = pd.DataFrame(data_imputed, columns=data.columns)\n    \n    data['day'] = data_day\n    \n    return data\n# 시간 관련 열 변환\ndata = convert_time_features(data)\ndata.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 그룹화하여 집계 계산\nresults = data.groupby('day').agg(\n    total_rows=('max_return_60min', 'size'),\n    count_above_1_1=('max_return_60min', lambda x: (x >= 1.1).sum())\n)\n\n# 비율 계산\nresults['percentage_above_1_1'] = (results['count_above_1_1'] / results['total_rows']) * 100\n\n# 결과 출력\nprint(results)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 요일 순서 정렬\nordered_days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\nresults = results.reindex(ordered_days)\n\n# 결과 출력\nprint(results)\n\n# 시각화\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# 막대 그래프 생성\nresults['percentage_above_1_1'].plot(kind='bar', ax=ax, color='skyblue', edgecolor='black')\n\n# 그래프 제목 및 축 레이블 설정\nax.set_title('Percentage of max_return_60min >= 1.1 by Day of Week')\nax.set_xlabel('Day of Week')\nax.set_ylabel('Percentage (%)')\nax.set_xticklabels(ordered_days, rotation=45, ha='right')\n\n# 값 레이블 추가\nfor i in ax.containers:\n    ax.bar_label(i, fmt='%.1f%%')\n\n# 그래프 출력\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"변동에 대한 최대 하락 구간의 분포","metadata":{}},{"cell_type":"code","source":"pip install mplfinance","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.impute import SimpleImputer\nimport mplfinance as mpf","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#메인 데이터\ndata = pd.read_csv(\"/kaggle/input/indicator3-full/SOL60_INDICATOR3\")\n\n# Display the first few rows of the dataset to ensure it is loaded correctly\ndata.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# 시간 관련 열 변환 함수\ndef convert_time_features(data):\n    # open_time 열이 datetime 형식이 아닌 경우 변환\n    if not np.issubdtype(data['open_time'].dtype, np.datetime64):\n        data['open_time'] = pd.to_datetime(data['open_time'])\n        \n    # 요일 추출하여 data_day 변수에 저장\n    data_day = data['open_time'].dt.day_name()\n    \n    # time 열을 분 단위로 변환\n    data['time'] = data['open_time'].dt.hour * 60 + data['open_time'].dt.minute    \n    \n    # 사용하지 않을 열 제외\n    data = data.drop(columns=['open_time', 'Unnamed: 0', 'Unnamed: 0.1'])\n    \n    # 무한대 값을 NaN으로 대체\n    data.replace([np.inf, -np.inf], np.nan, inplace=True)\n\n    # NaN 값을 평균으로 대체\n    imputer = SimpleImputer(strategy='mean')\n    data_imputed = imputer.fit_transform(data)\n\n    # numpy 배열을 다시 DataFrame으로 변환\n    data = pd.DataFrame(data_imputed, columns=data.columns)\n    \n    data['day'] = data_day\n    \n    return data\n# 시간 관련 열 변환\ndata = convert_time_features(data)\n\n# 시간 변환 함수\ndef convert_time_to_hhmm(df, time_col='time'):\n    # 분 단위를 시-분 형식으로 변환\n    df['hhmm_time'] = pd.to_datetime(df[time_col], unit='m').dt.strftime('%H:%M')\n    return df\n\n# 시간 변환 함수 적용\ndata = convert_time_to_hhmm(data)\n\ndata.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# max_return_60min이 1.1 이상인 데이터 필터링\nfiltered_data = data[data['max_return_60min'] >= 1.5]\n\n# hhmm_time을 datetime 형식으로 변환\nfiltered_data['hhmm_time'] = pd.to_datetime(filtered_data['hhmm_time'], format='%H:%M')\n\n# hhmm_time 열을 기준으로 그룹화하여 min_return_60min의 분포를 캔들 스틱으로 표시\ncandlestick_data = filtered_data.groupby(filtered_data['hhmm_time']).agg(\n    Open=('min_return_60min', 'first'),\n    High=('min_return_60min', 'max'),\n    Low=('min_return_60min', 'min'),\n    Close=('min_return_60min', 'last')\n)\n\n# 인덱스를 DatetimeIndex로 설정\ncandlestick_data.index = pd.to_datetime(candlestick_data.index)\n\n# 캔들 스틱 차트 시각화\nmpf.plot(candlestick_data, type='candle', style='charles', title='Candlestick chart of min_return_60min', ylabel='min_return_60min')\n\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# max_return_60min과 min_return_60min 열을 마지막 부분으로 이동\ncolumns = list(data.columns)\ncolumns.remove('max_return_60min')\ncolumns.remove('min_return_60min')\ncolumns.extend(['max_return_60min', 'min_return_60min'])\ndata = data[columns]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# max_return_60min이 1.1 이상이면서 min_return_60min이 1 이하인 데이터 필터링\nfiltered_data2 = data[(data['max_return_60min'] >= 1.5) & (data['min_return_60min'] <= -10)]\n\n# 결과 출력\nfiltered_data2","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"###########################Trailing Test######################","metadata":{}},{"cell_type":"code","source":"#테스트 데이터 호출\ndata_test_tmp = pd.read_csv(\"/kaggle/input/indicator3-test-data/SOL_Data_Test_Indicator3.csv\")\n\n# Display the first few rows of the dataset to ensure it is loaded correctly\ndata_test_tmp.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-06T11:34:03.565001Z","iopub.execute_input":"2024-08-06T11:34:03.565429Z","iopub.status.idle":"2024-08-06T11:34:27.071426Z","shell.execute_reply.started":"2024-08-06T11:34:03.565401Z","shell.execute_reply":"2024-08-06T11:34:27.070615Z"},"trusted":true},"execution_count":2,"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"   Unnamed: 0            open_time   open   high    low  close   volume  \\\n0           0  2023-07-26 15:00:00  24.49  24.53  24.49  24.53  4241.87   \n1           1  2023-07-26 15:01:00  24.53  24.57  24.53  24.55  5665.44   \n2           2  2023-07-26 15:02:00  24.55  24.59  24.54  24.57  3515.11   \n3           3  2023-07-26 15:03:00  24.58  24.58  24.53  24.53  2160.81   \n4           4  2023-07-26 15:04:00  24.53  24.55  24.52  24.53  2068.28   \n\n    time  atr_5  atr_10  ...  price_ma_20  volume_ma_20  price_ma_50  \\\n0  15:00  0.000     0.0  ...          NaN           NaN          NaN   \n1  15:01  0.000     0.0  ...          NaN           NaN          NaN   \n2  15:02  0.000     0.0  ...          NaN           NaN          NaN   \n3  15:03  0.000     0.0  ...          NaN           NaN          NaN   \n4  15:04  0.042     0.0  ...          NaN           NaN          NaN   \n\n   volume_ma_50  price_ma_100  volume_ma_100  price_ma_200  volume_ma_200  \\\n0           NaN           NaN            NaN           NaN            NaN   \n1           NaN           NaN            NaN           NaN            NaN   \n2           NaN           NaN            NaN           NaN            NaN   \n3           NaN           NaN            NaN           NaN            NaN   \n4           NaN           NaN            NaN           NaN            NaN   \n\n   max_return_60min  min_return_60min  \n0          1.916021         -0.122299  \n1          1.832994         -0.203666  \n2          1.750102         -0.284900  \n3          1.916021         -0.122299  \n4          1.916021         -0.122299  \n\n[5 rows x 140 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>open_time</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>time</th>\n      <th>atr_5</th>\n      <th>atr_10</th>\n      <th>...</th>\n      <th>price_ma_20</th>\n      <th>volume_ma_20</th>\n      <th>price_ma_50</th>\n      <th>volume_ma_50</th>\n      <th>price_ma_100</th>\n      <th>volume_ma_100</th>\n      <th>price_ma_200</th>\n      <th>volume_ma_200</th>\n      <th>max_return_60min</th>\n      <th>min_return_60min</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>2023-07-26 15:00:00</td>\n      <td>24.49</td>\n      <td>24.53</td>\n      <td>24.49</td>\n      <td>24.53</td>\n      <td>4241.87</td>\n      <td>15:00</td>\n      <td>0.000</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.916021</td>\n      <td>-0.122299</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2023-07-26 15:01:00</td>\n      <td>24.53</td>\n      <td>24.57</td>\n      <td>24.53</td>\n      <td>24.55</td>\n      <td>5665.44</td>\n      <td>15:01</td>\n      <td>0.000</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.832994</td>\n      <td>-0.203666</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>2023-07-26 15:02:00</td>\n      <td>24.55</td>\n      <td>24.59</td>\n      <td>24.54</td>\n      <td>24.57</td>\n      <td>3515.11</td>\n      <td>15:02</td>\n      <td>0.000</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.750102</td>\n      <td>-0.284900</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>2023-07-26 15:03:00</td>\n      <td>24.58</td>\n      <td>24.58</td>\n      <td>24.53</td>\n      <td>24.53</td>\n      <td>2160.81</td>\n      <td>15:03</td>\n      <td>0.000</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.916021</td>\n      <td>-0.122299</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>2023-07-26 15:04:00</td>\n      <td>24.53</td>\n      <td>24.55</td>\n      <td>24.52</td>\n      <td>24.53</td>\n      <td>2068.28</td>\n      <td>15:04</td>\n      <td>0.042</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.916021</td>\n      <td>-0.122299</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 140 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"data_test = data_test_tmp\ndata_test.columns","metadata":{"execution":{"iopub.status.busy":"2024-08-06T11:36:36.887500Z","iopub.execute_input":"2024-08-06T11:36:36.887872Z","iopub.status.idle":"2024-08-06T11:36:36.894466Z","shell.execute_reply.started":"2024-08-06T11:36:36.887839Z","shell.execute_reply":"2024-08-06T11:36:36.893552Z"},"trusted":true},"execution_count":20,"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"Index(['Unnamed: 0', 'open_time', 'open', 'high', 'low', 'close', 'volume',\n       'time', 'atr_5', 'atr_10',\n       ...\n       'price_ma_20', 'volume_ma_20', 'price_ma_50', 'volume_ma_50',\n       'price_ma_100', 'volume_ma_100', 'price_ma_200', 'volume_ma_200',\n       'max_return_60min', 'min_return_60min'],\n      dtype='object', length=140)"},"metadata":{}}]},{"cell_type":"code","source":"# open_time 열을 datetime 형식으로 변환\nif not np.issubdtype(data_test['open_time'].dtype, np.datetime64):\n    data_test['open_time'] = pd.to_datetime(data_test['open_time'])\n\n# time 열을 분 단위로 변환\ndata_test['time'] = data_test['open_time'].dt.hour * 60 + data_test['open_time'].dt.minute\n\ndata_test = data_test.drop(columns=['Unnamed: 0'])","metadata":{"execution":{"iopub.status.busy":"2024-08-06T11:36:39.310396Z","iopub.execute_input":"2024-08-06T11:36:39.310815Z","iopub.status.idle":"2024-08-06T11:36:39.509607Z","shell.execute_reply.started":"2024-08-06T11:36:39.310777Z","shell.execute_reply":"2024-08-06T11:36:39.508457Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"# 사용하지 않을 열 제외\ndata_test_predict = data_test.drop(columns=['open_time', 'max_return_60min', 'min_return_60min'])","metadata":{"execution":{"iopub.status.busy":"2024-08-06T11:35:26.466356Z","iopub.execute_input":"2024-08-06T11:35:26.466683Z","iopub.status.idle":"2024-08-06T11:35:26.636552Z","shell.execute_reply.started":"2024-08-06T11:35:26.466658Z","shell.execute_reply":"2024-08-06T11:35:26.635780Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"# 사용하지 않을 열 제외 v2\n# 피처 목록\nfeatures_to_keep = ['ichimoku_conversion_9', 'ichimoku_conversion_200', 'supertrend_upper_14_2_10', \n                    'supertrend_upper_10_3_20', 'bollinger_hband_200', 'volume_ma_100', 'ROC_30', \n                    'open', 'high', 'supertrend_lower_10_3_20', 'obv', 'atr_50', 'volume_ma_200', \n                    'Accumulation_Distribution_Line', 'bollinger_lband_20', 'lowerband', 'volume_ma_20', \n                    'supertrend_lower_7_3_14', 'atr_14', 'disparity_index_100', 'price_ma_200', \n                    'bollinger_lband_50', 'ichimoku_conversion_52', 'upperband', 'atr_20', 'price_ma_20', \n                    'disparity_index_20', 'time', 'vwap', 'bollinger_lband_200', 'atr_10', 'MFI_40', \n                    'volume_ma_10', 'supertrend_in_uptrend_7_3_14', 'Momentum_30', 'Momentum_20', \n                    'supertrend_upper_20_4_50', 'bollinger_hband_100', 'MFI_50', 'CMO_50', 'close', \n                    'Momentum_50', 'stoch_%k_21_5', 'supertrend_upper_7_3_14', 'bollinger_hband_50', \n                    'Parabolic_SAR_0.02', 'bollinger_lband_100', 'stoch_%k_9_3', 'Williams_%R_30', 'CMO_40']\n\n# 피처들만 남기기\ndata_test_predict = data_test[features_to_keep]","metadata":{"execution":{"iopub.status.busy":"2024-08-06T07:32:08.101608Z","iopub.execute_input":"2024-08-06T07:32:08.102527Z","iopub.status.idle":"2024-08-06T07:32:08.170900Z","shell.execute_reply.started":"2024-08-06T07:32:08.102483Z","shell.execute_reply":"2024-08-06T07:32:08.170115Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"# 무한대 값을 NaN으로 대체\ndata_test_predict.replace([np.inf, -np.inf], np.nan, inplace=True)\n\n# NaN 값을 평균으로 대체\nimputer = SimpleImputer(strategy='mean')\ndata_test_predict_imputed = imputer.fit_transform(data_test_predict)  # 같은 imputer 사용\n\n# 데이터 정규화\nscaler = MinMaxScaler()\ndata_test_predict_scaled = scaler.fit_transform(data_test_predict_imputed)  # 같은 scaler 사용","metadata":{"execution":{"iopub.status.busy":"2024-08-06T11:35:29.640248Z","iopub.execute_input":"2024-08-06T11:35:29.641096Z","iopub.status.idle":"2024-08-06T11:35:41.251430Z","shell.execute_reply.started":"2024-08-06T11:35:29.641060Z","shell.execute_reply":"2024-08-06T11:35:41.250628Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"#Transformer model 호출\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader, TensorDataset\n\n# 모델 정의 (로드할 때 필요)\nclass TransformerEncoderModel(nn.Module):\n    def __init__(self, input_dim, nhead, num_layers, dim_feedforward, output_dim):\n        super(TransformerEncoderModel, self).__init__()\n        self.embedding = nn.Linear(input_dim, input_dim)\n        encoder_layer = nn.TransformerEncoderLayer(d_model=input_dim, nhead=nhead, dim_feedforward=dim_feedforward, batch_first=True)\n        self.transformer_encoder = nn.TransformerEncoder(encoder_layer, num_layers=num_layers)\n        self.fc = nn.Linear(input_dim, output_dim)\n\n    def forward(self, src):\n        src = self.embedding(src)\n        output = self.transformer_encoder(src)\n        output = self.fc(output[:, -1, :])  # Use the output from the last time step\n        return output","metadata":{"execution":{"iopub.status.busy":"2024-08-06T11:35:41.252768Z","iopub.execute_input":"2024-08-06T11:35:41.253276Z","iopub.status.idle":"2024-08-06T11:35:59.554997Z","shell.execute_reply.started":"2024-08-06T11:35:41.253248Z","shell.execute_reply":"2024-08-06T11:35:59.554347Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"#Transformer model 호출2\n# 시퀀스 길이 설정\nsequence_length = 60\n\n# 예측 데이터를 시퀀스 형태로 변환\ndef create_sequences_for_prediction(data, sequence_length):\n    sequences = []\n    for i in range(len(data) - sequence_length + 1):\n        seq = data[i:i + sequence_length]\n        sequences.append(seq)\n    return np.array(sequences)\n\n# 예측용 시퀀스 데이터 생성\nX_test_seq = create_sequences_for_prediction(data_test_predict_scaled, sequence_length)\n\n# 입력 차원 확인 및 설정\ninput_dim = X_test_seq.shape[2]\nprint(f\"Input dimension: {input_dim}\")\n\n# 모델 설정 (로드할 때 필요)\nnhead = 2\nnum_layers = 2\ndim_feedforward = 64\noutput_dim = 1\n\nmodel = TransformerEncoderModel(input_dim, nhead, num_layers, dim_feedforward, output_dim)\n\n# 모델 로드\nmodel_path = '/kaggle/input/lstm_indiactor3/pytorch/tcn_transformer/6/SOL60_SMALLL_INDICATOR3_Transformer_v3.pth'\nmodel.load_state_dict(torch.load(model_path))\nmodel.eval()\nprint(f\"Model loaded from {model_path}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-06T11:35:59.555917Z","iopub.execute_input":"2024-08-06T11:35:59.556167Z","iopub.status.idle":"2024-08-06T11:36:09.213963Z","shell.execute_reply.started":"2024-08-06T11:35:59.556142Z","shell.execute_reply":"2024-08-06T11:36:09.213073Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"Input dimension: 136\nModel loaded from /kaggle/input/lstm_indiactor3/pytorch/tcn_transformer/6/SOL60_SMALLL_INDICATOR3_Transformer_v3.pth\n","output_type":"stream"}]},{"cell_type":"code","source":"#TCN 모델 호출\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader, TensorDataset\n\n#모델 로드\nclass TCNModel(nn.Module):\n    def __init__(self, input_channels, num_channels, kernel_size=2, dropout=0.2):\n        super(TCNModel, self).__init__()\n        self.tcn = nn.Conv1d(input_channels, num_channels, kernel_size, padding=kernel_size//2)\n        self.relu = nn.ReLU()\n        self.dropout = nn.Dropout(dropout)\n        self.fc = nn.Linear(num_channels, 1)\n\n    def forward(self, x):\n        x = x.transpose(1, 2)  # (batch_size, seq_len, input_channels) -> (batch_size, input_channels, seq_len)\n        y1 = self.tcn(x)\n        y1 = self.relu(y1)\n        y1 = self.dropout(y1)\n        y1 = y1[:, :, -1]\n        o = self.fc(y1)\n        return o","metadata":{"execution":{"iopub.status.busy":"2024-08-06T09:24:21.924215Z","iopub.execute_input":"2024-08-06T09:24:21.924494Z","iopub.status.idle":"2024-08-06T09:24:40.895845Z","shell.execute_reply.started":"2024-08-06T09:24:21.924464Z","shell.execute_reply":"2024-08-06T09:24:40.895067Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"#TCN 모델 호출2\n# 시퀀스 길이 설정\nsequence_length = 60\n\n# 예측 데이터를 시퀀스 형태로 변환\ndef create_sequences_for_prediction(data, sequence_length):\n    sequences = []\n    for i in range(len(data) - sequence_length + 1):\n        seq = data[i:i + sequence_length]\n        sequences.append(seq)\n    return np.array(sequences)\n\n# 예측용 시퀀스 데이터 생성\nX_test_seq = create_sequences_for_prediction(data_test_predict_scaled, sequence_length)\n\n# 입력 차원 확인 및 설정\ninput_channels = X_test_seq.shape[2]\nprint(f\"Input channels: {input_channels}\")\n\n# 모델 설정\nnum_channels = 64\nmodel = TCNModel(input_channels, num_channels)\n\n# 모델 로드\nmodel_path = '/kaggle/input/lstm_indiactor3/pytorch/tcn_transformer/6/SOL60_SMALLL_INDICATOR3_TCN_v4.pth'\nmodel.load_state_dict(torch.load(model_path))\nmodel.eval()\nprint(f\"Model loaded from {model_path}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-06T09:25:00.282960Z","iopub.execute_input":"2024-08-06T09:25:00.283663Z","iopub.status.idle":"2024-08-06T09:25:09.941305Z","shell.execute_reply.started":"2024-08-06T09:25:00.283629Z","shell.execute_reply":"2024-08-06T09:25:09.940581Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"Input channels: 136\nModel loaded from /kaggle/input/lstm_indiactor3/pytorch/tcn_transformer/6/SOL60_SMALLL_INDICATOR3_TCN_v4.pth\n","output_type":"stream"}]},{"cell_type":"code","source":"# 슬라이딩 윈도우로 데이터 범위 추출\nnum_rows = data_test_predict_scaled.shape[0]\n\n# 시퀀스 데이터를 텐서로 변환\nX_test_tensor = torch.tensor(X_test_seq, dtype=torch.float32)\nprint(f\"Tensor Transform Complete\")","metadata":{"execution":{"iopub.status.busy":"2024-08-06T11:36:09.215680Z","iopub.execute_input":"2024-08-06T11:36:09.216072Z","iopub.status.idle":"2024-08-06T11:36:10.522045Z","shell.execute_reply.started":"2024-08-06T11:36:09.216042Z","shell.execute_reply":"2024-08-06T11:36:10.521076Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"Tensor Transform Complete\n","output_type":"stream"}]},{"cell_type":"code","source":"# 모델을 GPU로 이동 (가능한 경우)\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nmodel.to(device)\nX_test_tensor = X_test_tensor.to(device)","metadata":{"execution":{"iopub.status.busy":"2024-08-06T11:36:10.523235Z","iopub.execute_input":"2024-08-06T11:36:10.523591Z","iopub.status.idle":"2024-08-06T11:36:10.530542Z","shell.execute_reply.started":"2024-08-06T11:36:10.523559Z","shell.execute_reply":"2024-08-06T11:36:10.529731Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"#prediction 결과 저장\nresults = []\n\nwindow_size = 216000\n#window_size = 259200\n#window_size = 302400\n\nbatch_size = 64  # 배치 크기 설정\n\nfor end in tqdm(range(num_rows, window_size - 1, -batch_size)):\n    start = max(end - batch_size + 1, 0)\n    \n    # 해당 범위에 대한 시퀀스 텐서 추출\n    X_test_tensor_tmp = X_test_tensor[start:end]\n    \n    # 예측 수행\n    model.eval()\n    with torch.no_grad():\n        predictions = torch.sigmoid(model(X_test_tensor_tmp)).squeeze().cpu().numpy()\n\n    # 예측 결과를 이진 분류로 변환 (0 또는 1)\n    predictions = (predictions > 0.5).astype(int)\n    \n    # 예측 결과의 마지막 값을 추가\n    if len(predictions.shape) > 0:\n        results.append(predictions[-1])\n    else:\n        results.append(predictions)\n\nresults = results[::-1]  # 원래 순서대로 변경","metadata":{"execution":{"iopub.status.busy":"2024-08-06T11:36:51.990742Z","iopub.execute_input":"2024-08-06T11:36:51.991421Z","iopub.status.idle":"2024-08-06T11:37:18.028575Z","shell.execute_reply.started":"2024-08-06T11:36:51.991382Z","shell.execute_reply":"2024-08-06T11:37:18.027708Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stderr","text":"100%|██████████| 4861/4861 [00:26<00:00, 186.77it/s]\n","output_type":"stream"}]},{"cell_type":"code","source":"# 결과를 원본 데이터프레임에 추가\ndata_test['Predictions'] = np.nan\ndata_test.loc[data_test.index[-len(results):], 'Predictions'] = results\ndata_test = data_test.dropna(subset=['Predictions'])","metadata":{"execution":{"iopub.status.busy":"2024-08-06T11:37:18.030029Z","iopub.execute_input":"2024-08-06T11:37:18.030421Z","iopub.status.idle":"2024-08-06T11:37:18.045319Z","shell.execute_reply.started":"2024-08-06T11:37:18.030390Z","shell.execute_reply":"2024-08-06T11:37:18.044633Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"# 'max_return_60min' 값이 1 이상이고 'prediction' 값이 0인 데이터의 개수\ncount_max_return_ge_1_prediction_0 = len(data_test[(data_test['max_return_60min'] >= 1.1) & (data_test['Predictions'] == 1)])\n\n# 'max_return_60min' 값이 1 미만이고 'prediction' 값이 1인 데이터의 개수\ncount_max_return_lt_1_prediction_1 = len(data_test[(data_test['max_return_60min'] < 1.1) & (data_test['Predictions'] == 0)])\n    \n#\nprint(f\"max_return_60min이 1 이상인데 prediction이 0인 데이터의 비율: {count_max_return_ge_1_prediction_0/len(data_test)*100}\")\nprint(f\"max_return_60min이 1 미만인데 prediction이 1인 데이터의 비율: {count_max_return_lt_1_prediction_1/len(data_test)*100}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-06T11:37:18.046130Z","iopub.execute_input":"2024-08-06T11:37:18.046392Z","iopub.status.idle":"2024-08-06T11:37:18.055021Z","shell.execute_reply.started":"2024-08-06T11:37:18.046368Z","shell.execute_reply":"2024-08-06T11:37:18.054234Z"},"trusted":true},"execution_count":24,"outputs":[{"name":"stdout","text":"max_return_60min이 1 이상인데 prediction이 0인 데이터의 비율: 2.4069121579921826\nmax_return_60min이 1 미만인데 prediction이 1인 데이터의 비율: 74.86113968319276\n","output_type":"stream"}]},{"cell_type":"code","source":"# 시간대를 나타내는 새로운 열 추가 (30분 단위)\ndata_test['half_hour'] = data_test['open_time'].dt.floor('30T').dt.time\n\n# 시간대별로 데이터 그룹화 (30분 단위)\ngrouped = data_test.groupby('half_hour')\n\n# 각 시간대별로 조건을 만족하는 데이터의 개수를 계산하는 함수\ndef calculate_counts(group):\n    count_max_return_ge_1_prediction_0 = len(group[(group['max_return_60min'] >= 1.1) & (group['Predictions'] == 1)])\n    count_max_return_lt_1_prediction_1 = len(group[(group['max_return_60min'] < 1.1) & (group['Predictions'] == 0)])\n    \n    total_count = len(group)\n    \n    if total_count == 0:\n        return pd.Series([0, 0, 0, 0, 0])\n    \n    rate_max_return_ge_1_prediction_0 = (count_max_return_ge_1_prediction_0 / total_count) * 100\n    rate_max_return_lt_1_prediction_1 = (count_max_return_lt_1_prediction_1 / total_count) * 100\n    \n    total_rate = rate_max_return_ge_1_prediction_0 + rate_max_return_lt_1_prediction_1\n    \n    return pd.Series([count_max_return_ge_1_prediction_0, count_max_return_lt_1_prediction_1, rate_max_return_ge_1_prediction_0, rate_max_return_lt_1_prediction_1, total_rate])\n\n# 각 그룹에 함수 적용\nresults = grouped.apply(calculate_counts)\nresults.columns = ['Count_GE_1_Pred_0', 'Count_LT_1_Pred_1', 'Rate_GE_1_Pred_0', 'Rate_LT_1_Pred_1', 'Total_Rate']\n\n# 결과 출력\nprint(results)","metadata":{"execution":{"iopub.status.busy":"2024-08-06T11:43:14.123822Z","iopub.execute_input":"2024-08-06T11:43:14.124190Z","iopub.status.idle":"2024-08-06T11:43:14.215716Z","shell.execute_reply.started":"2024-08-06T11:43:14.124161Z","shell.execute_reply":"2024-08-06T11:43:14.214959Z"},"trusted":true},"execution_count":31,"outputs":[{"name":"stdout","text":"           Count_GE_1_Pred_0  Count_LT_1_Pred_1  Rate_GE_1_Pred_0  \\\nhalf_hour                                                           \n00:00:00                 3.0               64.0          3.333333   \n00:30:00                 2.0               70.0          2.222222   \n01:00:00                 3.0               68.0          3.333333   \n01:30:00                 6.0               35.0          6.666667   \n02:00:00                 0.0               26.0          0.000000   \n02:30:00                 0.0               70.0          0.000000   \n03:00:00                 0.0               85.0          0.000000   \n03:30:00                 0.0               68.0          0.000000   \n04:00:00                 0.0               68.0          0.000000   \n04:30:00                 0.0               90.0          0.000000   \n05:00:00                 0.0               89.0          0.000000   \n05:30:00                 0.0               90.0          0.000000   \n06:00:00                 0.0               93.0          0.000000   \n06:30:00                 0.0               96.0          0.000000   \n07:00:00                10.0               85.0          8.333333   \n07:30:00                18.0               63.0         15.000000   \n08:00:00                 2.0               85.0          1.666667   \n08:30:00                 0.0              107.0          0.000000   \n09:00:00                 0.0              112.0          0.000000   \n09:30:00                 0.0              108.0          0.000000   \n10:00:00                 0.0              108.0          0.000000   \n10:30:00                 0.0              108.0          0.000000   \n11:00:00                 0.0              113.0          0.000000   \n11:30:00                 0.0              109.0          0.000000   \n12:00:00                 0.0              106.0          0.000000   \n12:30:00                12.0               70.0         10.000000   \n13:00:00                 9.0               51.0          7.500000   \n13:30:00                12.0               12.0         10.000000   \n14:00:00                15.0               33.0         12.500000   \n14:30:00                13.0               92.0         10.833333   \n15:00:00                 0.0               79.0          0.000000   \n15:30:00                 0.0               61.0          0.000000   \n16:00:00                 0.0               42.0          0.000000   \n16:30:00                 0.0               59.0          0.000000   \n17:00:00                 0.0               66.0          0.000000   \n17:30:00                 5.0               79.0          5.555556   \n18:00:00                 0.0               90.0          0.000000   \n18:30:00                 0.0               83.0          0.000000   \n19:00:00                 0.0               83.0          0.000000   \n19:30:00                 1.0               69.0          1.111111   \n20:00:00                 1.0               39.0          1.111111   \n20:30:00                 1.0               58.0          1.111111   \n21:00:00                 0.0               79.0          0.000000   \n21:30:00                 0.0               72.0          0.000000   \n22:00:00                 0.0               89.0          0.000000   \n22:30:00                 0.0               89.0          0.000000   \n23:00:00                 0.0               67.0          0.000000   \n23:30:00                 4.0               61.0          4.444444   \n\n           Rate_LT_1_Pred_1  Total_Rate  \nhalf_hour                                \n00:00:00          71.111111   74.444444  \n00:30:00          77.777778   80.000000  \n01:00:00          75.555556   78.888889  \n01:30:00          38.888889   45.555556  \n02:00:00          28.888889   28.888889  \n02:30:00          77.777778   77.777778  \n03:00:00          94.444444   94.444444  \n03:30:00          75.555556   75.555556  \n04:00:00          75.555556   75.555556  \n04:30:00         100.000000  100.000000  \n05:00:00          98.888889   98.888889  \n05:30:00         100.000000  100.000000  \n06:00:00          77.500000   77.500000  \n06:30:00          80.000000   80.000000  \n07:00:00          70.833333   79.166667  \n07:30:00          52.500000   67.500000  \n08:00:00          70.833333   72.500000  \n08:30:00          89.166667   89.166667  \n09:00:00          93.333333   93.333333  \n09:30:00          90.000000   90.000000  \n10:00:00          90.000000   90.000000  \n10:30:00          90.000000   90.000000  \n11:00:00          94.166667   94.166667  \n11:30:00          90.833333   90.833333  \n12:00:00          88.333333   88.333333  \n12:30:00          58.333333   68.333333  \n13:00:00          42.500000   50.000000  \n13:30:00          10.000000   20.000000  \n14:00:00          27.500000   40.000000  \n14:30:00          76.666667   87.500000  \n15:00:00          86.813187   86.813187  \n15:30:00          67.777778   67.777778  \n16:00:00          46.666667   46.666667  \n16:30:00          65.555556   65.555556  \n17:00:00          73.333333   73.333333  \n17:30:00          87.777778   93.333333  \n18:00:00         100.000000  100.000000  \n18:30:00          92.222222   92.222222  \n19:00:00          92.222222   92.222222  \n19:30:00          76.666667   77.777778  \n20:00:00          43.333333   44.444444  \n20:30:00          64.444444   65.555556  \n21:00:00          87.777778   87.777778  \n21:30:00          80.000000   80.000000  \n22:00:00          98.888889   98.888889  \n22:30:00          98.888889   98.888889  \n23:00:00          74.444444   74.444444  \n23:30:00          67.777778   72.222222  \n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_13/186013514.py:2: FutureWarning: 'T' is deprecated and will be removed in a future version, please use 'min' instead.\n  data_test['half_hour'] = data_test['open_time'].dt.floor('30T').dt.time\n/tmp/ipykernel_13/186013514.py:25: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  results = grouped.apply(calculate_counts)\n","output_type":"stream"}]},{"cell_type":"code","source":"# 시간대를 UTC 및 KST로 표시\nresults['half_hour_utc'] = pd.to_datetime(results.index.astype(str), format='%H:%M:%S').time\nresults['half_hour_kst'] = (pd.to_datetime(results.index.astype(str), format='%H:%M:%S') + pd.Timedelta(hours=9)).time\nresults['half_hour_label'] = results.index.astype(str) + ' (' + results['half_hour_kst'].astype(str) + ' KST)'\n\n# x축을 시간으로, y축을 Total_Rate으로 하는 차트 그리기\nplt.figure(figsize=(12, 6))\nplt.plot(results['half_hour_label'], results['Total_Rate'], marker='o')\nplt.xlabel('Half Hour of the Day (UTC)')\nplt.ylabel('Total Rate (%)')\nplt.title('Total Rate of Conditions Met by Half Hour of the Day (UTC with KST)')\nplt.grid(True)\nplt.xticks(rotation=45, ha='right')  # 레이블을 오른쪽으로 회전하여 수평으로 정렬\n\n# y축 90 라인 진하게 표시\nplt.axhline(90, color='red', linewidth=1.5, linestyle='--')  # y=90 라인을 진하게\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-06T11:44:20.074192Z","iopub.execute_input":"2024-08-06T11:44:20.074558Z","iopub.status.idle":"2024-08-06T11:44:20.481149Z","shell.execute_reply.started":"2024-08-06T11:44:20.074530Z","shell.execute_reply":"2024-08-06T11:44:20.480478Z"},"trusted":true},"execution_count":33,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":""},"metadata":{}}]}]}